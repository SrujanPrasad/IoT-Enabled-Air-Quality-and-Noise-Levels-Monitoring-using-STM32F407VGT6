
NEW_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b1c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b70  08009cb0  08009cb0  0000acb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a820  0800a820  0000c1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a820  0800a820  0000b820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a828  0800a828  0000c1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a828  0800a828  0000b828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a82c  0800a82c  0000b82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800a830  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1e8  2**0
                  CONTENTS
 10 .bss          000006b0  200001e8  200001e8  0000c1e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000898  20000898  0000c1e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010258  00000000  00000000  0000c218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ac3  00000000  00000000  0001c470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d88  00000000  00000000  0001ef38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a70  00000000  00000000  0001fcc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a4c  00000000  00000000  00020730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001350b  00000000  00000000  0004417c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4d43  00000000  00000000  00057687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012c3ca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004dd8  00000000  00000000  0012c410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  001311e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009c94 	.word	0x08009c94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08009c94 	.word	0x08009c94

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <ESP_SendData>:
    HAL_UART_Transmit(huart, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
    HAL_Delay(5000); // Allow time to connect
}

/* Function to send data to ThingSpeak */
void ESP_SendData(UART_HandleTypeDef *huart, const char *api_key, int aqi, int noise_level) {
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b0d3      	sub	sp, #332	@ 0x14c
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 8000f42:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 8000f46:	6020      	str	r0, [r4, #0]
 8000f48:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8000f4c:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8000f50:	6001      	str	r1, [r0, #0]
 8000f52:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8000f56:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 8000f5a:	600a      	str	r2, [r1, #0]
 8000f5c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8000f60:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8000f64:	6013      	str	r3, [r2, #0]
    char command[100];
    char http_request[200];

    // Start TCP connection to ThingSpeak
    snprintf(command, sizeof(command), "AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");
 8000f66:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f6a:	4a3f      	ldr	r2, [pc, #252]	@ (8001068 <ESP_SendData+0x130>)
 8000f6c:	2164      	movs	r1, #100	@ 0x64
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f005 faec 	bl	800654c <sniprintf>
    HAL_UART_Transmit(huart, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8000f74:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff f979 	bl	8000270 <strlen>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	f107 01dc 	add.w	r1, r7, #220	@ 0xdc
 8000f86:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000f8a:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f92:	6800      	ldr	r0, [r0, #0]
 8000f94:	f003 fdfc 	bl	8004b90 <HAL_UART_Transmit>
    HAL_Delay(2000);
 8000f98:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f9c:	f001 fbe0 	bl	8002760 <HAL_Delay>

    // Prepare HTTP GET request
    snprintf(http_request, sizeof(http_request),
 8000fa0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000fa4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000fa8:	f107 0014 	add.w	r0, r7, #20
 8000fac:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8000fb0:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8000fb4:	6812      	ldr	r2, [r2, #0]
 8000fb6:	9201      	str	r2, [sp, #4]
 8000fb8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8000fbc:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8000fc0:	6812      	ldr	r2, [r2, #0]
 8000fc2:	9200      	str	r2, [sp, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a29      	ldr	r2, [pc, #164]	@ (800106c <ESP_SendData+0x134>)
 8000fc8:	21c8      	movs	r1, #200	@ 0xc8
 8000fca:	f005 fabf 	bl	800654c <sniprintf>
             "GET /update?api_key=%s&field1=%d&field2=%d\r\n",
             api_key, aqi, noise_level);

    // Send HTTP GET request length
    snprintf(command, sizeof(command), "AT+CIPSEND=%d\r\n", (int)strlen(http_request) + 2);
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff f94c 	bl	8000270 <strlen>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	3302      	adds	r3, #2
 8000fdc:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8000fe0:	4a23      	ldr	r2, [pc, #140]	@ (8001070 <ESP_SendData+0x138>)
 8000fe2:	2164      	movs	r1, #100	@ 0x64
 8000fe4:	f005 fab2 	bl	800654c <sniprintf>
    HAL_UART_Transmit(huart, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8000fe8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff f93f 	bl	8000270 <strlen>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	f107 01dc 	add.w	r1, r7, #220	@ 0xdc
 8000ffa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000ffe:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	6800      	ldr	r0, [r0, #0]
 8001008:	f003 fdc2 	bl	8004b90 <HAL_UART_Transmit>
    HAL_Delay(1000);
 800100c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001010:	f001 fba6 	bl	8002760 <HAL_Delay>

    // Send the HTTP GET request
    HAL_UART_Transmit(huart, (uint8_t *)http_request, strlen(http_request), HAL_MAX_DELAY);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff f929 	bl	8000270 <strlen>
 800101e:	4603      	mov	r3, r0
 8001020:	b29a      	uxth	r2, r3
 8001022:	f107 0114 	add.w	r1, r7, #20
 8001026:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800102a:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	6800      	ldr	r0, [r0, #0]
 8001034:	f003 fdac 	bl	8004b90 <HAL_UART_Transmit>
    HAL_Delay(1000);
 8001038:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800103c:	f001 fb90 	bl	8002760 <HAL_Delay>

    // Close the TCP connection
    HAL_UART_Transmit(huart, (uint8_t *)"AT+CIPCLOSE\r\n", strlen("AT+CIPCLOSE\r\n"), HAL_MAX_DELAY);
 8001040:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001044:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8001048:	f04f 33ff 	mov.w	r3, #4294967295
 800104c:	220d      	movs	r2, #13
 800104e:	4909      	ldr	r1, [pc, #36]	@ (8001074 <ESP_SendData+0x13c>)
 8001050:	6800      	ldr	r0, [r0, #0]
 8001052:	f003 fd9d 	bl	8004b90 <HAL_UART_Transmit>
    HAL_Delay(500);
 8001056:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800105a:	f001 fb81 	bl	8002760 <HAL_Delay>
}
 800105e:	bf00      	nop
 8001060:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8001064:	46bd      	mov	sp, r7
 8001066:	bd90      	pop	{r4, r7, pc}
 8001068:	08009ce4 	.word	0x08009ce4
 800106c:	08009d10 	.word	0x08009d10
 8001070:	08009d40 	.word	0x08009d40
 8001074:	08009d50 	.word	0x08009d50

08001078 <KY037_Init>:
#define CALIBRATION_OFFSET 0.0    // Calibration offset (set based on calibration)
#define NUM_SAMPLES 100            // Number of samples for averaging

ADC_HandleTypeDef* hadc_global_ky037;

void KY037_Init(ADC_HandleTypeDef* hadc) {
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
    hadc_global_ky037 = hadc;
 8001080:	4a04      	ldr	r2, [pc, #16]	@ (8001094 <KY037_Init+0x1c>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000204 	.word	0x20000204

08001098 <KY037_ReadDecibels>:

float KY037_ReadDecibels(void) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
    uint32_t adc_sum = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]

    // Take NUM_SAMPLES ADC readings and calculate their sum
    for (int i = 0; i < NUM_SAMPLES; i++) {
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	e018      	b.n	80010da <KY037_ReadDecibels+0x42>
        HAL_ADC_Start(hadc_global_ky037);
 80010a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001168 <KY037_ReadDecibels+0xd0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f001 fbbf 	bl	8002830 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(hadc_global_ky037, HAL_MAX_DELAY);
 80010b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001168 <KY037_ReadDecibels+0xd0>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f04f 31ff 	mov.w	r1, #4294967295
 80010ba:	4618      	mov	r0, r3
 80010bc:	f001 fc8a 	bl	80029d4 <HAL_ADC_PollForConversion>
        uint32_t adc_value = HAL_ADC_GetValue(hadc_global_ky037);
 80010c0:	4b29      	ldr	r3, [pc, #164]	@ (8001168 <KY037_ReadDecibels+0xd0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f001 fe20 	bl	8002d0a <HAL_ADC_GetValue>
 80010ca:	6038      	str	r0, [r7, #0]
        adc_sum += adc_value;
 80010cc:	697a      	ldr	r2, [r7, #20]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	4413      	add	r3, r2
 80010d2:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < NUM_SAMPLES; i++) {
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	3301      	adds	r3, #1
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	2b63      	cmp	r3, #99	@ 0x63
 80010de:	dde3      	ble.n	80010a8 <KY037_ReadDecibels+0x10>
    }

    // Calculate the average ADC value
    uint32_t adc_avg_value = adc_sum / NUM_SAMPLES;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	4a22      	ldr	r2, [pc, #136]	@ (800116c <KY037_ReadDecibels+0xd4>)
 80010e4:	fba2 2303 	umull	r2, r3, r2, r3
 80010e8:	095b      	lsrs	r3, r3, #5
 80010ea:	60fb      	str	r3, [r7, #12]

    // Convert ADC value to voltage
    float voltage = (adc_avg_value / ADC_RESOLUTION) * REFERENCE_VOLTAGE;
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	f7ff fa09 	bl	8000504 <__aeabi_ui2d>
 80010f2:	a31b      	add	r3, pc, #108	@ (adr r3, 8001160 <KY037_ReadDecibels+0xc8>)
 80010f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f8:	f7ff fba8 	bl	800084c <__aeabi_ddiv>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4610      	mov	r0, r2
 8001102:	4619      	mov	r1, r3
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	4b19      	ldr	r3, [pc, #100]	@ (8001170 <KY037_ReadDecibels+0xd8>)
 800110a:	f7ff fa75 	bl	80005f8 <__aeabi_dmul>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4610      	mov	r0, r2
 8001114:	4619      	mov	r1, r3
 8001116:	f7ff fd47 	bl	8000ba8 <__aeabi_d2f>
 800111a:	4603      	mov	r3, r0
 800111c:	60bb      	str	r3, [r7, #8]

    // Calculate decibels using the formula
    float decibels = (20 * log10(voltage / REFERENCE_VALUE)) - CALIBRATION_OFFSET;
 800111e:	68b8      	ldr	r0, [r7, #8]
 8001120:	f7ff fa12 	bl	8000548 <__aeabi_f2d>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	ec43 2b10 	vmov	d0, r2, r3
 800112c:	f007 fb74 	bl	8008818 <log10>
 8001130:	ec51 0b10 	vmov	r0, r1, d0
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	4b0e      	ldr	r3, [pc, #56]	@ (8001174 <KY037_ReadDecibels+0xdc>)
 800113a:	f7ff fa5d 	bl	80005f8 <__aeabi_dmul>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4610      	mov	r0, r2
 8001144:	4619      	mov	r1, r3
 8001146:	f7ff fd2f 	bl	8000ba8 <__aeabi_d2f>
 800114a:	4603      	mov	r3, r0
 800114c:	607b      	str	r3, [r7, #4]

    return decibels;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	ee07 3a90 	vmov	s15, r3
}
 8001154:	eeb0 0a67 	vmov.f32	s0, s15
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	00000000 	.word	0x00000000
 8001164:	40affe00 	.word	0x40affe00
 8001168:	20000204 	.word	0x20000204
 800116c:	51eb851f 	.word	0x51eb851f
 8001170:	40140000 	.word	0x40140000
 8001174:	40340000 	.word	0x40340000

08001178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001178:	b5b0      	push	{r4, r5, r7, lr}
 800117a:	b0ae      	sub	sp, #184	@ 0xb8
 800117c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117e:	f001 fa7d 	bl	800267c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001182:	f000 f91d 	bl	80013c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001186:	f000 fa59 	bl	800163c <MX_GPIO_Init>
  MX_I2C1_Init();
 800118a:	f000 f9d5 	bl	8001538 <MX_I2C1_Init>
  MX_ADC1_Init();
 800118e:	f000 f981 	bl	8001494 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001192:	f000 fa29 	bl	80015e8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001196:	f000 f9fd 	bl	8001594 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MQ135_Init(&hadc1);
 800119a:	487b      	ldr	r0, [pc, #492]	@ (8001388 <main+0x210>)
 800119c:	f000 fab2 	bl	8001704 <MQ135_Init>
     KY037_Init(&hadc1);
 80011a0:	4879      	ldr	r0, [pc, #484]	@ (8001388 <main+0x210>)
 80011a2:	f7ff ff69 	bl	8001078 <KY037_Init>
     ssd1306_Init();
 80011a6:	f000 fdd3 	bl	8001d50 <ssd1306_Init>

    /* USER CODE BEGIN 3 */
	  // Simulate high AQI and noise levels
	  // Simulate high AQI and noise levels
	  // Start ADC conversion for both AQI and noise level
	      HAL_ADC_Start(&hadc1);
 80011aa:	4877      	ldr	r0, [pc, #476]	@ (8001388 <main+0x210>)
 80011ac:	f001 fb40 	bl	8002830 <HAL_ADC_Start>
	      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295
 80011b4:	4874      	ldr	r0, [pc, #464]	@ (8001388 <main+0x210>)
 80011b6:	f001 fc0d 	bl	80029d4 <HAL_ADC_PollForConversion>
	      float aqi = MQ135_ReadPPM();  // Get AQI
 80011ba:	f000 fc69 	bl	8001a90 <MQ135_ReadPPM>
 80011be:	ed87 0a2b 	vstr	s0, [r7, #172]	@ 0xac
	      float noise_level = KY037_ReadDecibels();  // Get noise level
 80011c2:	f7ff ff69 	bl	8001098 <KY037_ReadDecibels>
 80011c6:	ed87 0a2a 	vstr	s0, [r7, #168]	@ 0xa8

	      // Debugging prints for verification
	      printf("Air Quality: %.2f, Noise Level: %.2f dB\n", aqi, noise_level);
 80011ca:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80011ce:	f7ff f9bb 	bl	8000548 <__aeabi_f2d>
 80011d2:	4604      	mov	r4, r0
 80011d4:	460d      	mov	r5, r1
 80011d6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80011da:	f7ff f9b5 	bl	8000548 <__aeabi_f2d>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	e9cd 2300 	strd	r2, r3, [sp]
 80011e6:	4622      	mov	r2, r4
 80011e8:	462b      	mov	r3, r5
 80011ea:	4868      	ldr	r0, [pc, #416]	@ (800138c <main+0x214>)
 80011ec:	f005 f99c 	bl	8006528 <iprintf>

	      // Display AQI and Noise Level on OLED


	      ssd1306_SetCursor(2,0);  // New line for noise level
 80011f0:	2100      	movs	r1, #0
 80011f2:	2002      	movs	r0, #2
 80011f4:	f000 ff60 	bl	80020b8 <ssd1306_SetCursor>
	      ssd1306_WriteString("Noise Level: ", Font_6x8, White);
 80011f8:	4b65      	ldr	r3, [pc, #404]	@ (8001390 <main+0x218>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	9200      	str	r2, [sp, #0]
 80011fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001200:	4864      	ldr	r0, [pc, #400]	@ (8001394 <main+0x21c>)
 8001202:	f000 ff33 	bl	800206c <ssd1306_WriteString>
	      char noise_str[10];
	      sprintf(noise_str, "%.2f dB", noise_level);
 8001206:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800120a:	f7ff f99d 	bl	8000548 <__aeabi_f2d>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 8001216:	4960      	ldr	r1, [pc, #384]	@ (8001398 <main+0x220>)
 8001218:	f005 f9cc 	bl	80065b4 <siprintf>
	      ssd1306_WriteString(noise_str, Font_6x8, White);
 800121c:	4b5c      	ldr	r3, [pc, #368]	@ (8001390 <main+0x218>)
 800121e:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 8001222:	2201      	movs	r2, #1
 8001224:	9200      	str	r2, [sp, #0]
 8001226:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001228:	f000 ff20 	bl	800206c <ssd1306_WriteString>
	      ssd1306_UpdateScreen();
 800122c:	f000 fe12 	bl	8001e54 <ssd1306_UpdateScreen>
	      HAL_Delay(2000);
 8001230:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001234:	f001 fa94 	bl	8002760 <HAL_Delay>


	      // Buzzer control based on AQI and Noise levels
	      if (noise_level > NOISE_THRESHOLD) {
 8001238:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800123c:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 800139c <main+0x224>
 8001240:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001248:	dd0f      	ble.n	800126a <main+0xf2>
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // Turn on buzzer
 800124a:	2201      	movs	r2, #1
 800124c:	2101      	movs	r1, #1
 800124e:	4854      	ldr	r0, [pc, #336]	@ (80013a0 <main+0x228>)
 8001250:	f002 faee 	bl	8003830 <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001254:	2201      	movs	r2, #1
 8001256:	2102      	movs	r1, #2
 8001258:	4851      	ldr	r0, [pc, #324]	@ (80013a0 <main+0x228>)
 800125a:	f002 fae9 	bl	8003830 <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);// Optional
 800125e:	2200      	movs	r2, #0
 8001260:	2104      	movs	r1, #4
 8001262:	484f      	ldr	r0, [pc, #316]	@ (80013a0 <main+0x228>)
 8001264:	f002 fae4 	bl	8003830 <HAL_GPIO_WritePin>
 8001268:	e012      	b.n	8001290 <main+0x118>
	      }
	      else {
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // Turn off buzzer
 800126a:	2200      	movs	r2, #0
 800126c:	2101      	movs	r1, #1
 800126e:	484c      	ldr	r0, [pc, #304]	@ (80013a0 <main+0x228>)
 8001270:	f002 fade 	bl	8003830 <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	2102      	movs	r1, #2
 8001278:	4849      	ldr	r0, [pc, #292]	@ (80013a0 <main+0x228>)
 800127a:	f002 fad9 	bl	8003830 <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 800127e:	2201      	movs	r2, #1
 8001280:	2104      	movs	r1, #4
 8001282:	4847      	ldr	r0, [pc, #284]	@ (80013a0 <main+0x228>)
 8001284:	f002 fad4 	bl	8003830 <HAL_GPIO_WritePin>
	          HAL_Delay(1000);
 8001288:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800128c:	f001 fa68 	bl	8002760 <HAL_Delay>
	      char uart_buffer[50];
	      char alert[50];
	      char good[50];

	      // Display AQI separately
	      sprintf(uart_buffer, "AQI: %.2f\n", aqi);
 8001290:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001294:	f7ff f958 	bl	8000548 <__aeabi_f2d>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4638      	mov	r0, r7
 800129e:	4941      	ldr	r1, [pc, #260]	@ (80013a4 <main+0x22c>)
 80012a0:	f005 f988 	bl	80065b4 <siprintf>
	      HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80012a4:	463b      	mov	r3, r7
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7fe ffe2 	bl	8000270 <strlen>
 80012ac:	4603      	mov	r3, r0
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	4639      	mov	r1, r7
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
 80012b6:	483c      	ldr	r0, [pc, #240]	@ (80013a8 <main+0x230>)
 80012b8:	f003 fc6a 	bl	8004b90 <HAL_UART_Transmit>
	      sprintf(uart_buffer, "Noise Level: %.2f dB\n", noise_level);
 80012bc:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80012c0:	f7ff f942 	bl	8000548 <__aeabi_f2d>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4638      	mov	r0, r7
 80012ca:	4938      	ldr	r1, [pc, #224]	@ (80013ac <main+0x234>)
 80012cc:	f005 f972 	bl	80065b4 <siprintf>
	      HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80012d0:	463b      	mov	r3, r7
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7fe ffcc 	bl	8000270 <strlen>
 80012d8:	4603      	mov	r3, r0
 80012da:	b29a      	uxth	r2, r3
 80012dc:	4639      	mov	r1, r7
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
 80012e2:	4831      	ldr	r0, [pc, #196]	@ (80013a8 <main+0x230>)
 80012e4:	f003 fc54 	bl	8004b90 <HAL_UART_Transmit>
	      if (aqi > AQI_THRESHOLD || noise_level > NOISE_THRESHOLD) {
 80012e8:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80012ec:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80013b0 <main+0x238>
 80012f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f8:	dc08      	bgt.n	800130c <main+0x194>
 80012fa:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80012fe:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800139c <main+0x224>
 8001302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130a:	dd14      	ble.n	8001336 <main+0x1be>
	    	  sprintf(alert, "Warning!! Bad Air Quality Stay Safe\n" );
 800130c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001310:	4928      	ldr	r1, [pc, #160]	@ (80013b4 <main+0x23c>)
 8001312:	4618      	mov	r0, r3
 8001314:	f005 f94e 	bl	80065b4 <siprintf>
	    	  HAL_UART_Transmit(&huart2, (uint8_t*)alert, strlen(alert), HAL_MAX_DELAY);
 8001318:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800131c:	4618      	mov	r0, r3
 800131e:	f7fe ffa7 	bl	8000270 <strlen>
 8001322:	4603      	mov	r3, r0
 8001324:	b29a      	uxth	r2, r3
 8001326:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
 800132e:	481e      	ldr	r0, [pc, #120]	@ (80013a8 <main+0x230>)
 8001330:	f003 fc2e 	bl	8004b90 <HAL_UART_Transmit>
 8001334:	e017      	b.n	8001366 <main+0x1ee>
	      	      }
	      else {
	      	    	sprintf(good, "Good Air Quality Have a great day\n" );
 8001336:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800133a:	491f      	ldr	r1, [pc, #124]	@ (80013b8 <main+0x240>)
 800133c:	4618      	mov	r0, r3
 800133e:	f005 f939 	bl	80065b4 <siprintf>
	      	    	HAL_UART_Transmit(&huart2, (uint8_t*)good, strlen(good), HAL_MAX_DELAY);
 8001342:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001346:	4618      	mov	r0, r3
 8001348:	f7fe ff92 	bl	8000270 <strlen>
 800134c:	4603      	mov	r3, r0
 800134e:	b29a      	uxth	r2, r3
 8001350:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8001354:	f04f 33ff 	mov.w	r3, #4294967295
 8001358:	4813      	ldr	r0, [pc, #76]	@ (80013a8 <main+0x230>)
 800135a:	f003 fc19 	bl	8004b90 <HAL_UART_Transmit>
	      	        HAL_Delay(2000);
 800135e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001362:	f001 f9fd 	bl	8002760 <HAL_Delay>
	      	      }
	      ESP_SendData(&huart2, THINGSPEAK_API_KEY, aqi, noise_level);
 8001366:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800136a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800136e:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8001372:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001376:	ee17 3a90 	vmov	r3, s15
 800137a:	ee17 2a10 	vmov	r2, s14
 800137e:	490f      	ldr	r1, [pc, #60]	@ (80013bc <main+0x244>)
 8001380:	4809      	ldr	r0, [pc, #36]	@ (80013a8 <main+0x230>)
 8001382:	f7ff fdd9 	bl	8000f38 <ESP_SendData>
  {
 8001386:	e710      	b.n	80011aa <main+0x32>
 8001388:	20000208 	.word	0x20000208
 800138c:	08009d60 	.word	0x08009d60
 8001390:	0800a458 	.word	0x0800a458
 8001394:	08009d8c 	.word	0x08009d8c
 8001398:	08009d9c 	.word	0x08009d9c
 800139c:	42a00000 	.word	0x42a00000
 80013a0:	40020400 	.word	0x40020400
 80013a4:	08009da4 	.word	0x08009da4
 80013a8:	200002ec 	.word	0x200002ec
 80013ac:	08009db0 	.word	0x08009db0
 80013b0:	43c80000 	.word	0x43c80000
 80013b4:	08009dc8 	.word	0x08009dc8
 80013b8:	08009df0 	.word	0x08009df0
 80013bc:	08009e14 	.word	0x08009e14

080013c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b094      	sub	sp, #80	@ 0x50
 80013c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c6:	f107 0320 	add.w	r3, r7, #32
 80013ca:	2230      	movs	r2, #48	@ 0x30
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f005 f96d 	bl	80066ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	4b28      	ldr	r3, [pc, #160]	@ (800148c <SystemClock_Config+0xcc>)
 80013ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ec:	4a27      	ldr	r2, [pc, #156]	@ (800148c <SystemClock_Config+0xcc>)
 80013ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f4:	4b25      	ldr	r3, [pc, #148]	@ (800148c <SystemClock_Config+0xcc>)
 80013f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001400:	2300      	movs	r3, #0
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	4b22      	ldr	r3, [pc, #136]	@ (8001490 <SystemClock_Config+0xd0>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a21      	ldr	r2, [pc, #132]	@ (8001490 <SystemClock_Config+0xd0>)
 800140a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	4b1f      	ldr	r3, [pc, #124]	@ (8001490 <SystemClock_Config+0xd0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800141c:	2301      	movs	r3, #1
 800141e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001420:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001424:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001426:	2302      	movs	r3, #2
 8001428:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800142a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800142e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001430:	2308      	movs	r3, #8
 8001432:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001434:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001438:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800143a:	2302      	movs	r3, #2
 800143c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800143e:	2307      	movs	r3, #7
 8001440:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001442:	f107 0320 	add.w	r3, r7, #32
 8001446:	4618      	mov	r0, r3
 8001448:	f002 feba 	bl	80041c0 <HAL_RCC_OscConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001452:	f000 f951 	bl	80016f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001456:	230f      	movs	r3, #15
 8001458:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145a:	2302      	movs	r3, #2
 800145c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001462:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001466:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001468:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800146c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800146e:	f107 030c 	add.w	r3, r7, #12
 8001472:	2105      	movs	r1, #5
 8001474:	4618      	mov	r0, r3
 8001476:	f003 f91b 	bl	80046b0 <HAL_RCC_ClockConfig>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001480:	f000 f93a 	bl	80016f8 <Error_Handler>
  }
}
 8001484:	bf00      	nop
 8001486:	3750      	adds	r7, #80	@ 0x50
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40023800 	.word	0x40023800
 8001490:	40007000 	.word	0x40007000

08001494 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800149a:	463b      	mov	r3, r7
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014a6:	4b21      	ldr	r3, [pc, #132]	@ (800152c <MX_ADC1_Init+0x98>)
 80014a8:	4a21      	ldr	r2, [pc, #132]	@ (8001530 <MX_ADC1_Init+0x9c>)
 80014aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014ac:	4b1f      	ldr	r3, [pc, #124]	@ (800152c <MX_ADC1_Init+0x98>)
 80014ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014b4:	4b1d      	ldr	r3, [pc, #116]	@ (800152c <MX_ADC1_Init+0x98>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014ba:	4b1c      	ldr	r3, [pc, #112]	@ (800152c <MX_ADC1_Init+0x98>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014c0:	4b1a      	ldr	r3, [pc, #104]	@ (800152c <MX_ADC1_Init+0x98>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014c6:	4b19      	ldr	r3, [pc, #100]	@ (800152c <MX_ADC1_Init+0x98>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014ce:	4b17      	ldr	r3, [pc, #92]	@ (800152c <MX_ADC1_Init+0x98>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014d4:	4b15      	ldr	r3, [pc, #84]	@ (800152c <MX_ADC1_Init+0x98>)
 80014d6:	4a17      	ldr	r2, [pc, #92]	@ (8001534 <MX_ADC1_Init+0xa0>)
 80014d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014da:	4b14      	ldr	r3, [pc, #80]	@ (800152c <MX_ADC1_Init+0x98>)
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014e0:	4b12      	ldr	r3, [pc, #72]	@ (800152c <MX_ADC1_Init+0x98>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014e6:	4b11      	ldr	r3, [pc, #68]	@ (800152c <MX_ADC1_Init+0x98>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ee:	4b0f      	ldr	r3, [pc, #60]	@ (800152c <MX_ADC1_Init+0x98>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014f4:	480d      	ldr	r0, [pc, #52]	@ (800152c <MX_ADC1_Init+0x98>)
 80014f6:	f001 f957 	bl	80027a8 <HAL_ADC_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001500:	f000 f8fa 	bl	80016f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001504:	2300      	movs	r3, #0
 8001506:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001508:	2301      	movs	r3, #1
 800150a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001510:	463b      	mov	r3, r7
 8001512:	4619      	mov	r1, r3
 8001514:	4805      	ldr	r0, [pc, #20]	@ (800152c <MX_ADC1_Init+0x98>)
 8001516:	f001 fc23 	bl	8002d60 <HAL_ADC_ConfigChannel>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001520:	f000 f8ea 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000208 	.word	0x20000208
 8001530:	40012000 	.word	0x40012000
 8001534:	0f000001 	.word	0x0f000001

08001538 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800153c:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <MX_I2C1_Init+0x50>)
 800153e:	4a13      	ldr	r2, [pc, #76]	@ (800158c <MX_I2C1_Init+0x54>)
 8001540:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001542:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <MX_I2C1_Init+0x50>)
 8001544:	4a12      	ldr	r2, [pc, #72]	@ (8001590 <MX_I2C1_Init+0x58>)
 8001546:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001548:	4b0f      	ldr	r3, [pc, #60]	@ (8001588 <MX_I2C1_Init+0x50>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800154e:	4b0e      	ldr	r3, [pc, #56]	@ (8001588 <MX_I2C1_Init+0x50>)
 8001550:	2200      	movs	r2, #0
 8001552:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001554:	4b0c      	ldr	r3, [pc, #48]	@ (8001588 <MX_I2C1_Init+0x50>)
 8001556:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800155a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800155c:	4b0a      	ldr	r3, [pc, #40]	@ (8001588 <MX_I2C1_Init+0x50>)
 800155e:	2200      	movs	r2, #0
 8001560:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001562:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <MX_I2C1_Init+0x50>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001568:	4b07      	ldr	r3, [pc, #28]	@ (8001588 <MX_I2C1_Init+0x50>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800156e:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <MX_I2C1_Init+0x50>)
 8001570:	2200      	movs	r2, #0
 8001572:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001574:	4804      	ldr	r0, [pc, #16]	@ (8001588 <MX_I2C1_Init+0x50>)
 8001576:	f002 f975 	bl	8003864 <HAL_I2C_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001580:	f000 f8ba 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000250 	.word	0x20000250
 800158c:	40005400 	.word	0x40005400
 8001590:	00061a80 	.word	0x00061a80

08001594 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001598:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <MX_USART1_UART_Init+0x4c>)
 800159a:	4a12      	ldr	r2, [pc, #72]	@ (80015e4 <MX_USART1_UART_Init+0x50>)
 800159c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <MX_USART1_UART_Init+0x4c>)
 80015a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	@ (80015e0 <MX_USART1_UART_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <MX_USART1_UART_Init+0x4c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	@ (80015e0 <MX_USART1_UART_Init+0x4c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015b8:	4b09      	ldr	r3, [pc, #36]	@ (80015e0 <MX_USART1_UART_Init+0x4c>)
 80015ba:	220c      	movs	r2, #12
 80015bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015be:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <MX_USART1_UART_Init+0x4c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c4:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <MX_USART1_UART_Init+0x4c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015ca:	4805      	ldr	r0, [pc, #20]	@ (80015e0 <MX_USART1_UART_Init+0x4c>)
 80015cc:	f003 fa90 	bl	8004af0 <HAL_UART_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015d6:	f000 f88f 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200002a4 	.word	0x200002a4
 80015e4:	40011000 	.word	0x40011000

080015e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015ec:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <MX_USART2_UART_Init+0x4c>)
 80015ee:	4a12      	ldr	r2, [pc, #72]	@ (8001638 <MX_USART2_UART_Init+0x50>)
 80015f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80015f2:	4b10      	ldr	r3, [pc, #64]	@ (8001634 <MX_USART2_UART_Init+0x4c>)
 80015f4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80015f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <MX_USART2_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001600:	4b0c      	ldr	r3, [pc, #48]	@ (8001634 <MX_USART2_UART_Init+0x4c>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001606:	4b0b      	ldr	r3, [pc, #44]	@ (8001634 <MX_USART2_UART_Init+0x4c>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800160c:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <MX_USART2_UART_Init+0x4c>)
 800160e:	220c      	movs	r2, #12
 8001610:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001612:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <MX_USART2_UART_Init+0x4c>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001618:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <MX_USART2_UART_Init+0x4c>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800161e:	4805      	ldr	r0, [pc, #20]	@ (8001634 <MX_USART2_UART_Init+0x4c>)
 8001620:	f003 fa66 	bl	8004af0 <HAL_UART_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800162a:	f000 f865 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200002ec 	.word	0x200002ec
 8001638:	40004400 	.word	0x40004400

0800163c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001642:	f107 030c 	add.w	r3, r7, #12
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
 8001650:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	4b26      	ldr	r3, [pc, #152]	@ (80016f0 <MX_GPIO_Init+0xb4>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	4a25      	ldr	r2, [pc, #148]	@ (80016f0 <MX_GPIO_Init+0xb4>)
 800165c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001660:	6313      	str	r3, [r2, #48]	@ 0x30
 8001662:	4b23      	ldr	r3, [pc, #140]	@ (80016f0 <MX_GPIO_Init+0xb4>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	4b1f      	ldr	r3, [pc, #124]	@ (80016f0 <MX_GPIO_Init+0xb4>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	4a1e      	ldr	r2, [pc, #120]	@ (80016f0 <MX_GPIO_Init+0xb4>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6313      	str	r3, [r2, #48]	@ 0x30
 800167e:	4b1c      	ldr	r3, [pc, #112]	@ (80016f0 <MX_GPIO_Init+0xb4>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <MX_GPIO_Init+0xb4>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	4a17      	ldr	r2, [pc, #92]	@ (80016f0 <MX_GPIO_Init+0xb4>)
 8001694:	f043 0302 	orr.w	r3, r3, #2
 8001698:	6313      	str	r3, [r2, #48]	@ 0x30
 800169a:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <MX_GPIO_Init+0xb4>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2107      	movs	r1, #7
 80016aa:	4812      	ldr	r0, [pc, #72]	@ (80016f4 <MX_GPIO_Init+0xb8>)
 80016ac:	f002 f8c0 	bl	8003830 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016b0:	2303      	movs	r3, #3
 80016b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b4:	2301      	movs	r3, #1
 80016b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b8:	2301      	movs	r3, #1
 80016ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	4619      	mov	r1, r3
 80016c6:	480b      	ldr	r0, [pc, #44]	@ (80016f4 <MX_GPIO_Init+0xb8>)
 80016c8:	f001 ff16 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016cc:	2304      	movs	r3, #4
 80016ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d0:	2301      	movs	r3, #1
 80016d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	4619      	mov	r1, r3
 80016e2:	4804      	ldr	r0, [pc, #16]	@ (80016f4 <MX_GPIO_Init+0xb8>)
 80016e4:	f001 ff08 	bl	80034f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016e8:	bf00      	nop
 80016ea:	3720      	adds	r7, #32
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40020400 	.word	0x40020400

080016f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016fc:	b672      	cpsid	i
}
 80016fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <Error_Handler+0x8>

08001704 <MQ135_Init>:
const float smoke_breakpoints[] = {0, 50, 150, 300};
const float nox_breakpoints[] = {0, 0.1, 0.2, 1.0};
const float o3_breakpoints[] = {0, 0.05, 0.1, 0.2};

// Function to initialize MQ135 sensor
void MQ135_Init(ADC_HandleTypeDef* hadc) {
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
    hadc_global = hadc;
 800170c:	4a04      	ldr	r2, [pc, #16]	@ (8001720 <MQ135_Init+0x1c>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6013      	str	r3, [r2, #0]
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20000334 	.word	0x20000334
 8001724:	00000000 	.word	0x00000000

08001728 <calculateResistance>:

// Function to calculate resistance
float calculateResistance(float adc_value) {
 8001728:	b5b0      	push	{r4, r5, r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	ed87 0a01 	vstr	s0, [r7, #4]
    float voltage = (adc_value / 4095.0) * 3.3;
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7fe ff08 	bl	8000548 <__aeabi_f2d>
 8001738:	a322      	add	r3, pc, #136	@ (adr r3, 80017c4 <calculateResistance+0x9c>)
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	f7ff f885 	bl	800084c <__aeabi_ddiv>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	a320      	add	r3, pc, #128	@ (adr r3, 80017cc <calculateResistance+0xa4>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7fe ff52 	bl	80005f8 <__aeabi_dmul>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f7ff fa24 	bl	8000ba8 <__aeabi_d2f>
 8001760:	4603      	mov	r3, r0
 8001762:	60fb      	str	r3, [r7, #12]
    return ((3.3 - voltage) / voltage) * RL_VALUE;
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f7fe feef 	bl	8000548 <__aeabi_f2d>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	a117      	add	r1, pc, #92	@ (adr r1, 80017cc <calculateResistance+0xa4>)
 8001770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001774:	f7fe fd88 	bl	8000288 <__aeabi_dsub>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4614      	mov	r4, r2
 800177e:	461d      	mov	r5, r3
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f7fe fee1 	bl	8000548 <__aeabi_f2d>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4620      	mov	r0, r4
 800178c:	4629      	mov	r1, r5
 800178e:	f7ff f85d 	bl	800084c <__aeabi_ddiv>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <calculateResistance+0x98>)
 80017a0:	f7fe ff2a 	bl	80005f8 <__aeabi_dmul>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	f7ff f9fc 	bl	8000ba8 <__aeabi_d2f>
 80017b0:	4603      	mov	r3, r0
 80017b2:	ee07 3a90 	vmov	s15, r3
}
 80017b6:	eeb0 0a67 	vmov.f32	s0, s15
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bdb0      	pop	{r4, r5, r7, pc}
 80017c0:	40240000 	.word	0x40240000
 80017c4:	00000000 	.word	0x00000000
 80017c8:	40affe00 	.word	0x40affe00
 80017cc:	66666666 	.word	0x66666666
 80017d0:	400a6666 	.word	0x400a6666
 80017d4:	00000000 	.word	0x00000000

080017d8 <applyExponentialSmoothing>:

// Function for exponential smoothing
float applyExponentialSmoothing(float new_value) {
 80017d8:	b5b0      	push	{r4, r5, r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	ed87 0a01 	vstr	s0, [r7, #4]
    smooth_value = (ALPHA * new_value) + ((1 - ALPHA) * smooth_value);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7fe feb0 	bl	8000548 <__aeabi_f2d>
 80017e8:	a318      	add	r3, pc, #96	@ (adr r3, 800184c <applyExponentialSmoothing+0x74>)
 80017ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ee:	f7fe ff03 	bl	80005f8 <__aeabi_dmul>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4614      	mov	r4, r2
 80017f8:	461d      	mov	r5, r3
 80017fa:	4b13      	ldr	r3, [pc, #76]	@ (8001848 <applyExponentialSmoothing+0x70>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fea2 	bl	8000548 <__aeabi_f2d>
 8001804:	a30e      	add	r3, pc, #56	@ (adr r3, 8001840 <applyExponentialSmoothing+0x68>)
 8001806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180a:	f7fe fef5 	bl	80005f8 <__aeabi_dmul>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4620      	mov	r0, r4
 8001814:	4629      	mov	r1, r5
 8001816:	f7fe fd39 	bl	800028c <__adddf3>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4610      	mov	r0, r2
 8001820:	4619      	mov	r1, r3
 8001822:	f7ff f9c1 	bl	8000ba8 <__aeabi_d2f>
 8001826:	4603      	mov	r3, r0
 8001828:	4a07      	ldr	r2, [pc, #28]	@ (8001848 <applyExponentialSmoothing+0x70>)
 800182a:	6013      	str	r3, [r2, #0]
    return smooth_value;
 800182c:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <applyExponentialSmoothing+0x70>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	ee07 3a90 	vmov	s15, r3
}
 8001834:	eeb0 0a67 	vmov.f32	s0, s15
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bdb0      	pop	{r4, r5, r7, pc}
 800183e:	bf00      	nop
 8001840:	9999999a 	.word	0x9999999a
 8001844:	3fe99999 	.word	0x3fe99999
 8001848:	20000338 	.word	0x20000338
 800184c:	9999999a 	.word	0x9999999a
 8001850:	3fc99999 	.word	0x3fc99999

08001854 <calculatePPM>:

// Function to calculate PPM for a specific gas
float calculatePPM(float resistance, float ppm_const, float exponent) {
 8001854:	b5b0      	push	{r4, r5, r7, lr}
 8001856:	ed2d 8b02 	vpush	{d8}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001862:	edc7 0a02 	vstr	s1, [r7, #8]
 8001866:	ed87 1a01 	vstr	s2, [r7, #4]
    return ppm_const * pow((resistance / R0), exponent);
 800186a:	68b8      	ldr	r0, [r7, #8]
 800186c:	f7fe fe6c 	bl	8000548 <__aeabi_f2d>
 8001870:	4604      	mov	r4, r0
 8001872:	460d      	mov	r5, r1
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f7fe fe67 	bl	8000548 <__aeabi_f2d>
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <calculatePPM+0x80>)
 8001880:	f7fe ffe4 	bl	800084c <__aeabi_ddiv>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	ec43 2b18 	vmov	d8, r2, r3
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7fe fe5b 	bl	8000548 <__aeabi_f2d>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	ec43 2b11 	vmov	d1, r2, r3
 800189a:	eeb0 0a48 	vmov.f32	s0, s16
 800189e:	eef0 0a68 	vmov.f32	s1, s17
 80018a2:	f006 fff7 	bl	8008894 <pow>
 80018a6:	ec53 2b10 	vmov	r2, r3, d0
 80018aa:	4620      	mov	r0, r4
 80018ac:	4629      	mov	r1, r5
 80018ae:	f7fe fea3 	bl	80005f8 <__aeabi_dmul>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	f7ff f975 	bl	8000ba8 <__aeabi_d2f>
 80018be:	4603      	mov	r3, r0
 80018c0:	ee07 3a90 	vmov	s15, r3
}
 80018c4:	eeb0 0a67 	vmov.f32	s0, s15
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	ecbd 8b02 	vpop	{d8}
 80018d0:	bdb0      	pop	{r4, r5, r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40240000 	.word	0x40240000

080018d8 <calculateAQISubIndex>:

// Function to calculate AQI subindex (linear interpolation)
float calculateAQISubIndex(float ppm, const float* breakpoints, int num_breakpoints) {
 80018d8:	b480      	push	{r7}
 80018da:	b087      	sub	sp, #28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	ed87 0a03 	vstr	s0, [r7, #12]
 80018e2:	60b8      	str	r0, [r7, #8]
 80018e4:	6079      	str	r1, [r7, #4]
    for (int i = 0; i < num_breakpoints - 1; i++) {
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	e045      	b.n	8001978 <calculateAQISubIndex+0xa0>
        if (ppm >= breakpoints[i] && ppm <= breakpoints[i + 1]) {
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	68ba      	ldr	r2, [r7, #8]
 80018f2:	4413      	add	r3, r2
 80018f4:	edd3 7a00 	vldr	s15, [r3]
 80018f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80018fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001904:	db35      	blt.n	8001972 <calculateAQISubIndex+0x9a>
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	3301      	adds	r3, #1
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	68ba      	ldr	r2, [r7, #8]
 800190e:	4413      	add	r3, r2
 8001910:	edd3 7a00 	vldr	s15, [r3]
 8001914:	ed97 7a03 	vldr	s14, [r7, #12]
 8001918:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800191c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001920:	d827      	bhi.n	8001972 <calculateAQISubIndex+0x9a>
            return ((ppm - breakpoints[i]) / (breakpoints[i + 1] - breakpoints[i])) *
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	4413      	add	r3, r2
 800192a:	edd3 7a00 	vldr	s15, [r3]
 800192e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001932:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	3301      	adds	r3, #1
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	4413      	add	r3, r2
 8001940:	ed93 7a00 	vldr	s14, [r3]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	68ba      	ldr	r2, [r7, #8]
 800194a:	4413      	add	r3, r2
 800194c:	edd3 7a00 	vldr	s15, [r3]
 8001950:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001954:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                   (i + 1) * 50;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	3301      	adds	r3, #1
            return ((ppm - breakpoints[i]) / (breakpoints[i + 1] - breakpoints[i])) *
 800195c:	ee07 3a90 	vmov	s15, r3
 8001960:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001964:	ee67 7a27 	vmul.f32	s15, s14, s15
                   (i + 1) * 50;
 8001968:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001994 <calculateAQISubIndex+0xbc>
 800196c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001970:	e009      	b.n	8001986 <calculateAQISubIndex+0xae>
    for (int i = 0; i < num_breakpoints - 1; i++) {
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	3301      	adds	r3, #1
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	429a      	cmp	r2, r3
 8001980:	dbb4      	blt.n	80018ec <calculateAQISubIndex+0x14>
        }
    }
    return 0;
 8001982:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8001998 <calculateAQISubIndex+0xc0>
}
 8001986:	eeb0 0a67 	vmov.f32	s0, s15
 800198a:	371c      	adds	r7, #28
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	42480000 	.word	0x42480000
 8001998:	00000000 	.word	0x00000000

0800199c <getStandardTempHumidity>:

// Function to assume standard temperature and humidity
void getStandardTempHumidity(float* temperature, float* humidity) {
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
    *temperature = 25.0; // Assume 25°C as standard temperature
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a05      	ldr	r2, [pc, #20]	@ (80019c0 <getStandardTempHumidity+0x24>)
 80019aa:	601a      	str	r2, [r3, #0]
    *humidity = 50.0;    // Assume 50% humidity as standard value
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	4a05      	ldr	r2, [pc, #20]	@ (80019c4 <getStandardTempHumidity+0x28>)
 80019b0:	601a      	str	r2, [r3, #0]
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	41c80000 	.word	0x41c80000
 80019c4:	42480000 	.word	0x42480000

080019c8 <compensateForTempHumidity>:

// Function to compensate for temperature and humidity (using assumed values)
float compensateForTempHumidity(float ppm, float temperature, float humidity) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	ed87 0a03 	vstr	s0, [r7, #12]
 80019d2:	edc7 0a02 	vstr	s1, [r7, #8]
 80019d6:	ed87 1a01 	vstr	s2, [r7, #4]
    // Adjust the PPM value based on temperature and humidity.
    // Example formula (you can adjust based on calibration data):
    float tempFactor = 1 + (temperature - 25) * 0.02; // Assume 2% change per degree Celsius
 80019da:	edd7 7a02 	vldr	s15, [r7, #8]
 80019de:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80019e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019e6:	ee17 0a90 	vmov	r0, s15
 80019ea:	f7fe fdad 	bl	8000548 <__aeabi_f2d>
 80019ee:	a326      	add	r3, pc, #152	@ (adr r3, 8001a88 <compensateForTempHumidity+0xc0>)
 80019f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f4:	f7fe fe00 	bl	80005f8 <__aeabi_dmul>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	4b1e      	ldr	r3, [pc, #120]	@ (8001a80 <compensateForTempHumidity+0xb8>)
 8001a06:	f7fe fc41 	bl	800028c <__adddf3>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4610      	mov	r0, r2
 8001a10:	4619      	mov	r1, r3
 8001a12:	f7ff f8c9 	bl	8000ba8 <__aeabi_d2f>
 8001a16:	4603      	mov	r3, r0
 8001a18:	617b      	str	r3, [r7, #20]
    float humidityFactor = 1 + (humidity - 50) * 0.01; // Assume 1% change per 1% humidity
 8001a1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a1e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001a84 <compensateForTempHumidity+0xbc>
 8001a22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a26:	ee17 0a90 	vmov	r0, s15
 8001a2a:	f7fe fd8d 	bl	8000548 <__aeabi_f2d>
 8001a2e:	a312      	add	r3, pc, #72	@ (adr r3, 8001a78 <compensateForTempHumidity+0xb0>)
 8001a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a34:	f7fe fde0 	bl	80005f8 <__aeabi_dmul>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	4b0e      	ldr	r3, [pc, #56]	@ (8001a80 <compensateForTempHumidity+0xb8>)
 8001a46:	f7fe fc21 	bl	800028c <__adddf3>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4610      	mov	r0, r2
 8001a50:	4619      	mov	r1, r3
 8001a52:	f7ff f8a9 	bl	8000ba8 <__aeabi_d2f>
 8001a56:	4603      	mov	r3, r0
 8001a58:	613b      	str	r3, [r7, #16]
    return ppm * tempFactor * humidityFactor;
 8001a5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a66:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	47ae147b 	.word	0x47ae147b
 8001a7c:	3f847ae1 	.word	0x3f847ae1
 8001a80:	3ff00000 	.word	0x3ff00000
 8001a84:	42480000 	.word	0x42480000
 8001a88:	47ae147b 	.word	0x47ae147b
 8001a8c:	3f947ae1 	.word	0x3f947ae1

08001a90 <MQ135_ReadPPM>:

// Function to read PPM and calculate AQI
float MQ135_ReadPPM(void) {
 8001a90:	b5b0      	push	{r4, r5, r7, lr}
 8001a92:	ed2d 8b02 	vpush	{d8}
 8001a96:	b08c      	sub	sp, #48	@ 0x30
 8001a98:	af00      	add	r7, sp, #0
    uint32_t adc_sum = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float temperature = 0, humidity = 0;
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]

    // Collect multiple ADC samples
    for (int i = 0; i < NUM_SAMPLES; i++) {
 8001aaa:	2300      	movs	r3, #0
 8001aac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001aae:	e017      	b.n	8001ae0 <MQ135_ReadPPM+0x50>
        HAL_ADC_Start(hadc_global);
 8001ab0:	4b7e      	ldr	r3, [pc, #504]	@ (8001cac <MQ135_ReadPPM+0x21c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f000 febb 	bl	8002830 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(hadc_global, HAL_MAX_DELAY);
 8001aba:	4b7c      	ldr	r3, [pc, #496]	@ (8001cac <MQ135_ReadPPM+0x21c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 ff86 	bl	80029d4 <HAL_ADC_PollForConversion>
        adc_sum += HAL_ADC_GetValue(hadc_global);
 8001ac8:	4b78      	ldr	r3, [pc, #480]	@ (8001cac <MQ135_ReadPPM+0x21c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f001 f91c 	bl	8002d0a <HAL_ADC_GetValue>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ad6:	4413      	add	r3, r2
 8001ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (int i = 0; i < NUM_SAMPLES; i++) {
 8001ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001adc:	3301      	adds	r3, #1
 8001ade:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ae2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001ae6:	dbe3      	blt.n	8001ab0 <MQ135_ReadPPM+0x20>
    }

    // Calculate average ADC value
    uint32_t adc_value = adc_sum / NUM_SAMPLES;
 8001ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aea:	4a71      	ldr	r2, [pc, #452]	@ (8001cb0 <MQ135_ReadPPM+0x220>)
 8001aec:	fba2 2303 	umull	r2, r3, r2, r3
 8001af0:	095b      	lsrs	r3, r3, #5
 8001af2:	627b      	str	r3, [r7, #36]	@ 0x24

    // Calculate resistance and smooth the value
    float resistance = calculateResistance(adc_value);
 8001af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af6:	ee07 3a90 	vmov	s15, r3
 8001afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001afe:	eeb0 0a67 	vmov.f32	s0, s15
 8001b02:	f7ff fe11 	bl	8001728 <calculateResistance>
 8001b06:	ed87 0a08 	vstr	s0, [r7, #32]
    resistance = applyExponentialSmoothing(resistance);
 8001b0a:	ed97 0a08 	vldr	s0, [r7, #32]
 8001b0e:	f7ff fe63 	bl	80017d8 <applyExponentialSmoothing>
 8001b12:	ed87 0a08 	vstr	s0, [r7, #32]

    // Calculate PPM values
    float ppm_co2 = calculatePPM(resistance, PPM_CO2_CONST, CO2_EXPONENT);
 8001b16:	ed9f 1a67 	vldr	s2, [pc, #412]	@ 8001cb4 <MQ135_ReadPPM+0x224>
 8001b1a:	eddf 0a67 	vldr	s1, [pc, #412]	@ 8001cb8 <MQ135_ReadPPM+0x228>
 8001b1e:	ed97 0a08 	vldr	s0, [r7, #32]
 8001b22:	f7ff fe97 	bl	8001854 <calculatePPM>
 8001b26:	ed87 0a07 	vstr	s0, [r7, #28]
    float ppm_smoke = calculatePPM(resistance, PPM_SMOKE_CONST, SMOKE_EXPONENT);
 8001b2a:	ed9f 1a64 	vldr	s2, [pc, #400]	@ 8001cbc <MQ135_ReadPPM+0x22c>
 8001b2e:	eddf 0a64 	vldr	s1, [pc, #400]	@ 8001cc0 <MQ135_ReadPPM+0x230>
 8001b32:	ed97 0a08 	vldr	s0, [r7, #32]
 8001b36:	f7ff fe8d 	bl	8001854 <calculatePPM>
 8001b3a:	ed87 0a06 	vstr	s0, [r7, #24]
    float ppm_nox = calculatePPM(resistance, PPM_NOX_CONST, NOX_EXPONENT);
 8001b3e:	ed9f 1a61 	vldr	s2, [pc, #388]	@ 8001cc4 <MQ135_ReadPPM+0x234>
 8001b42:	eef7 0a08 	vmov.f32	s1, #120	@ 0x3fc00000  1.5
 8001b46:	ed97 0a08 	vldr	s0, [r7, #32]
 8001b4a:	f7ff fe83 	bl	8001854 <calculatePPM>
 8001b4e:	ed87 0a05 	vstr	s0, [r7, #20]
    float ppm_o3 = calculatePPM(resistance, PPM_O3_CONST, O3_EXPONENT);
 8001b52:	ed9f 1a5d 	vldr	s2, [pc, #372]	@ 8001cc8 <MQ135_ReadPPM+0x238>
 8001b56:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 8001b5a:	ed97 0a08 	vldr	s0, [r7, #32]
 8001b5e:	f7ff fe79 	bl	8001854 <calculatePPM>
 8001b62:	ed87 0a04 	vstr	s0, [r7, #16]

    // Get standard temperature and humidity (since no sensor is available)
    getStandardTempHumidity(&temperature, &humidity);
 8001b66:	1d3a      	adds	r2, r7, #4
 8001b68:	f107 0308 	add.w	r3, r7, #8
 8001b6c:	4611      	mov	r1, r2
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff ff14 	bl	800199c <getStandardTempHumidity>

    // Compensate PPM values for temperature and humidity
    ppm_co2 = compensateForTempHumidity(ppm_co2, temperature, humidity);
 8001b74:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b78:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b7c:	eeb0 1a47 	vmov.f32	s2, s14
 8001b80:	eef0 0a67 	vmov.f32	s1, s15
 8001b84:	ed97 0a07 	vldr	s0, [r7, #28]
 8001b88:	f7ff ff1e 	bl	80019c8 <compensateForTempHumidity>
 8001b8c:	ed87 0a07 	vstr	s0, [r7, #28]
    ppm_smoke = compensateForTempHumidity(ppm_smoke, temperature, humidity);
 8001b90:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b94:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b98:	eeb0 1a47 	vmov.f32	s2, s14
 8001b9c:	eef0 0a67 	vmov.f32	s1, s15
 8001ba0:	ed97 0a06 	vldr	s0, [r7, #24]
 8001ba4:	f7ff ff10 	bl	80019c8 <compensateForTempHumidity>
 8001ba8:	ed87 0a06 	vstr	s0, [r7, #24]
    ppm_nox = compensateForTempHumidity(ppm_nox, temperature, humidity);
 8001bac:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bb0:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bb4:	eeb0 1a47 	vmov.f32	s2, s14
 8001bb8:	eef0 0a67 	vmov.f32	s1, s15
 8001bbc:	ed97 0a05 	vldr	s0, [r7, #20]
 8001bc0:	f7ff ff02 	bl	80019c8 <compensateForTempHumidity>
 8001bc4:	ed87 0a05 	vstr	s0, [r7, #20]
    ppm_o3 = compensateForTempHumidity(ppm_o3, temperature, humidity);
 8001bc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bcc:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bd0:	eeb0 1a47 	vmov.f32	s2, s14
 8001bd4:	eef0 0a67 	vmov.f32	s1, s15
 8001bd8:	ed97 0a04 	vldr	s0, [r7, #16]
 8001bdc:	f7ff fef4 	bl	80019c8 <compensateForTempHumidity>
 8001be0:	ed87 0a04 	vstr	s0, [r7, #16]

    // Calculate AQI based on the highest subindex
    float overall_aqi = fmax(fmax(calculateAQISubIndex(ppm_co2, co2_breakpoints, 4),
 8001be4:	2104      	movs	r1, #4
 8001be6:	4839      	ldr	r0, [pc, #228]	@ (8001ccc <MQ135_ReadPPM+0x23c>)
 8001be8:	ed97 0a07 	vldr	s0, [r7, #28]
 8001bec:	f7ff fe74 	bl	80018d8 <calculateAQISubIndex>
 8001bf0:	ee10 3a10 	vmov	r3, s0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fca7 	bl	8000548 <__aeabi_f2d>
 8001bfa:	4604      	mov	r4, r0
 8001bfc:	460d      	mov	r5, r1
                                  calculateAQISubIndex(ppm_smoke, smoke_breakpoints, 4)),
 8001bfe:	2104      	movs	r1, #4
 8001c00:	4833      	ldr	r0, [pc, #204]	@ (8001cd0 <MQ135_ReadPPM+0x240>)
 8001c02:	ed97 0a06 	vldr	s0, [r7, #24]
 8001c06:	f7ff fe67 	bl	80018d8 <calculateAQISubIndex>
 8001c0a:	ee10 3a10 	vmov	r3, s0
    float overall_aqi = fmax(fmax(calculateAQISubIndex(ppm_co2, co2_breakpoints, 4),
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fc9a 	bl	8000548 <__aeabi_f2d>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	ec43 2b11 	vmov	d1, r2, r3
 8001c1c:	ec45 4b10 	vmov	d0, r4, r5
 8001c20:	f006 febe 	bl	80089a0 <fmax>
 8001c24:	eeb0 8a40 	vmov.f32	s16, s0
 8001c28:	eef0 8a60 	vmov.f32	s17, s1
                             fmax(calculateAQISubIndex(ppm_nox, nox_breakpoints, 4),
 8001c2c:	2104      	movs	r1, #4
 8001c2e:	4829      	ldr	r0, [pc, #164]	@ (8001cd4 <MQ135_ReadPPM+0x244>)
 8001c30:	ed97 0a05 	vldr	s0, [r7, #20]
 8001c34:	f7ff fe50 	bl	80018d8 <calculateAQISubIndex>
 8001c38:	ee10 3a10 	vmov	r3, s0
    float overall_aqi = fmax(fmax(calculateAQISubIndex(ppm_co2, co2_breakpoints, 4),
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7fe fc83 	bl	8000548 <__aeabi_f2d>
 8001c42:	4604      	mov	r4, r0
 8001c44:	460d      	mov	r5, r1
                                  calculateAQISubIndex(ppm_o3, o3_breakpoints, 4)));
 8001c46:	2104      	movs	r1, #4
 8001c48:	4823      	ldr	r0, [pc, #140]	@ (8001cd8 <MQ135_ReadPPM+0x248>)
 8001c4a:	ed97 0a04 	vldr	s0, [r7, #16]
 8001c4e:	f7ff fe43 	bl	80018d8 <calculateAQISubIndex>
 8001c52:	ee10 3a10 	vmov	r3, s0
    float overall_aqi = fmax(fmax(calculateAQISubIndex(ppm_co2, co2_breakpoints, 4),
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe fc76 	bl	8000548 <__aeabi_f2d>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	ec43 2b11 	vmov	d1, r2, r3
 8001c64:	ec45 4b10 	vmov	d0, r4, r5
 8001c68:	f006 fe9a 	bl	80089a0 <fmax>
 8001c6c:	eeb0 7a40 	vmov.f32	s14, s0
 8001c70:	eef0 7a60 	vmov.f32	s15, s1
 8001c74:	eeb0 1a47 	vmov.f32	s2, s14
 8001c78:	eef0 1a67 	vmov.f32	s3, s15
 8001c7c:	eeb0 0a48 	vmov.f32	s0, s16
 8001c80:	eef0 0a68 	vmov.f32	s1, s17
 8001c84:	f006 fe8c 	bl	80089a0 <fmax>
 8001c88:	ec53 2b10 	vmov	r2, r3, d0
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f7fe ff8a 	bl	8000ba8 <__aeabi_d2f>
 8001c94:	4603      	mov	r3, r0
 8001c96:	60fb      	str	r3, [r7, #12]

    return overall_aqi;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	ee07 3a90 	vmov	s15, r3
}
 8001c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca2:	3730      	adds	r7, #48	@ 0x30
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	ecbd 8b02 	vpop	{d8}
 8001caa:	bdb0      	pop	{r4, r5, r7, pc}
 8001cac:	20000334 	.word	0x20000334
 8001cb0:	10624dd3 	.word	0x10624dd3
 8001cb4:	c03137de 	.word	0xc03137de
 8001cb8:	42e93442 	.word	0x42e93442
 8001cbc:	bfbf9db2 	.word	0xbfbf9db2
 8001cc0:	40133333 	.word	0x40133333
 8001cc4:	bf4ccccd 	.word	0xbf4ccccd
 8001cc8:	bf933333 	.word	0xbf933333
 8001ccc:	08009e28 	.word	0x08009e28
 8001cd0:	08009e38 	.word	0x08009e38
 8001cd4:	08009e48 	.word	0x08009e48
 8001cd8:	08009e58 	.word	0x08009e58

08001cdc <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af04      	add	r7, sp, #16
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfa:	9302      	str	r3, [sp, #8]
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	9301      	str	r3, [sp, #4]
 8001d00:	1dfb      	adds	r3, r7, #7
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	2301      	movs	r3, #1
 8001d06:	2200      	movs	r2, #0
 8001d08:	2178      	movs	r1, #120	@ 0x78
 8001d0a:	4803      	ldr	r0, [pc, #12]	@ (8001d18 <ssd1306_WriteCommand+0x2c>)
 8001d0c:	f001 feee 	bl	8003aec <HAL_I2C_Mem_Write>
}
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000250 	.word	0x20000250

08001d1c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af04      	add	r7, sp, #16
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d2e:	9202      	str	r2, [sp, #8]
 8001d30:	9301      	str	r3, [sp, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	2301      	movs	r3, #1
 8001d38:	2240      	movs	r2, #64	@ 0x40
 8001d3a:	2178      	movs	r1, #120	@ 0x78
 8001d3c:	4803      	ldr	r0, [pc, #12]	@ (8001d4c <ssd1306_WriteData+0x30>)
 8001d3e:	f001 fed5 	bl	8003aec <HAL_I2C_Mem_Write>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000250 	.word	0x20000250

08001d50 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001d54:	f7ff ffc2 	bl	8001cdc <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001d58:	2064      	movs	r0, #100	@ 0x64
 8001d5a:	f000 fd01 	bl	8002760 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f000 f9d6 	bl	8002110 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001d64:	2020      	movs	r0, #32
 8001d66:	f7ff ffc1 	bl	8001cec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f7ff ffbe 	bl	8001cec <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001d70:	20b0      	movs	r0, #176	@ 0xb0
 8001d72:	f7ff ffbb 	bl	8001cec <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001d76:	20c8      	movs	r0, #200	@ 0xc8
 8001d78:	f7ff ffb8 	bl	8001cec <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f7ff ffb5 	bl	8001cec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001d82:	2010      	movs	r0, #16
 8001d84:	f7ff ffb2 	bl	8001cec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001d88:	2040      	movs	r0, #64	@ 0x40
 8001d8a:	f7ff ffaf 	bl	8001cec <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001d8e:	20ff      	movs	r0, #255	@ 0xff
 8001d90:	f000 f9aa 	bl	80020e8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001d94:	20a1      	movs	r0, #161	@ 0xa1
 8001d96:	f7ff ffa9 	bl	8001cec <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001d9a:	20a6      	movs	r0, #166	@ 0xa6
 8001d9c:	f7ff ffa6 	bl	8001cec <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001da0:	20a8      	movs	r0, #168	@ 0xa8
 8001da2:	f7ff ffa3 	bl	8001cec <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001da6:	203f      	movs	r0, #63	@ 0x3f
 8001da8:	f7ff ffa0 	bl	8001cec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001dac:	20a4      	movs	r0, #164	@ 0xa4
 8001dae:	f7ff ff9d 	bl	8001cec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001db2:	20d3      	movs	r0, #211	@ 0xd3
 8001db4:	f7ff ff9a 	bl	8001cec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001db8:	2000      	movs	r0, #0
 8001dba:	f7ff ff97 	bl	8001cec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001dbe:	20d5      	movs	r0, #213	@ 0xd5
 8001dc0:	f7ff ff94 	bl	8001cec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001dc4:	20f0      	movs	r0, #240	@ 0xf0
 8001dc6:	f7ff ff91 	bl	8001cec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001dca:	20d9      	movs	r0, #217	@ 0xd9
 8001dcc:	f7ff ff8e 	bl	8001cec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001dd0:	2022      	movs	r0, #34	@ 0x22
 8001dd2:	f7ff ff8b 	bl	8001cec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001dd6:	20da      	movs	r0, #218	@ 0xda
 8001dd8:	f7ff ff88 	bl	8001cec <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001ddc:	2012      	movs	r0, #18
 8001dde:	f7ff ff85 	bl	8001cec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001de2:	20db      	movs	r0, #219	@ 0xdb
 8001de4:	f7ff ff82 	bl	8001cec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001de8:	2020      	movs	r0, #32
 8001dea:	f7ff ff7f 	bl	8001cec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001dee:	208d      	movs	r0, #141	@ 0x8d
 8001df0:	f7ff ff7c 	bl	8001cec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001df4:	2014      	movs	r0, #20
 8001df6:	f7ff ff79 	bl	8001cec <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	f000 f988 	bl	8002110 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001e00:	2000      	movs	r0, #0
 8001e02:	f000 f80f 	bl	8001e24 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001e06:	f000 f825 	bl	8001e54 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001e0a:	4b05      	ldr	r3, [pc, #20]	@ (8001e20 <ssd1306_Init+0xd0>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001e10:	4b03      	ldr	r3, [pc, #12]	@ (8001e20 <ssd1306_Init+0xd0>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001e16:	4b02      	ldr	r3, [pc, #8]	@ (8001e20 <ssd1306_Init+0xd0>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	711a      	strb	r2, [r3, #4]
}
 8001e1c:	bf00      	nop
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	2000073c 	.word	0x2000073c

08001e24 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <ssd1306_Fill+0x14>
 8001e34:	2300      	movs	r3, #0
 8001e36:	e000      	b.n	8001e3a <ssd1306_Fill+0x16>
 8001e38:	23ff      	movs	r3, #255	@ 0xff
 8001e3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4803      	ldr	r0, [pc, #12]	@ (8001e50 <ssd1306_Fill+0x2c>)
 8001e42:	f004 fc34 	bl	80066ae <memset>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	2000033c 	.word	0x2000033c

08001e54 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	71fb      	strb	r3, [r7, #7]
 8001e5e:	e016      	b.n	8001e8e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	3b50      	subs	r3, #80	@ 0x50
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff ff40 	bl	8001cec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f7ff ff3d 	bl	8001cec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001e72:	2010      	movs	r0, #16
 8001e74:	f7ff ff3a 	bl	8001cec <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	01db      	lsls	r3, r3, #7
 8001e7c:	4a08      	ldr	r2, [pc, #32]	@ (8001ea0 <ssd1306_UpdateScreen+0x4c>)
 8001e7e:	4413      	add	r3, r2
 8001e80:	2180      	movs	r1, #128	@ 0x80
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff ff4a 	bl	8001d1c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	71fb      	strb	r3, [r7, #7]
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	2b07      	cmp	r3, #7
 8001e92:	d9e5      	bls.n	8001e60 <ssd1306_UpdateScreen+0xc>
    }
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	2000033c 	.word	0x2000033c

08001ea4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	71fb      	strb	r3, [r7, #7]
 8001eae:	460b      	mov	r3, r1
 8001eb0:	71bb      	strb	r3, [r7, #6]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	db3d      	blt.n	8001f3a <ssd1306_DrawPixel+0x96>
 8001ebe:	79bb      	ldrb	r3, [r7, #6]
 8001ec0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ec2:	d83a      	bhi.n	8001f3a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001ec4:	797b      	ldrb	r3, [r7, #5]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d11a      	bne.n	8001f00 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001eca:	79fa      	ldrb	r2, [r7, #7]
 8001ecc:	79bb      	ldrb	r3, [r7, #6]
 8001ece:	08db      	lsrs	r3, r3, #3
 8001ed0:	b2d8      	uxtb	r0, r3
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	01db      	lsls	r3, r3, #7
 8001ed6:	4413      	add	r3, r2
 8001ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8001f48 <ssd1306_DrawPixel+0xa4>)
 8001eda:	5cd3      	ldrb	r3, [r2, r3]
 8001edc:	b25a      	sxtb	r2, r3
 8001ede:	79bb      	ldrb	r3, [r7, #6]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eea:	b25b      	sxtb	r3, r3
 8001eec:	4313      	orrs	r3, r2
 8001eee:	b259      	sxtb	r1, r3
 8001ef0:	79fa      	ldrb	r2, [r7, #7]
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	01db      	lsls	r3, r3, #7
 8001ef6:	4413      	add	r3, r2
 8001ef8:	b2c9      	uxtb	r1, r1
 8001efa:	4a13      	ldr	r2, [pc, #76]	@ (8001f48 <ssd1306_DrawPixel+0xa4>)
 8001efc:	54d1      	strb	r1, [r2, r3]
 8001efe:	e01d      	b.n	8001f3c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001f00:	79fa      	ldrb	r2, [r7, #7]
 8001f02:	79bb      	ldrb	r3, [r7, #6]
 8001f04:	08db      	lsrs	r3, r3, #3
 8001f06:	b2d8      	uxtb	r0, r3
 8001f08:	4603      	mov	r3, r0
 8001f0a:	01db      	lsls	r3, r3, #7
 8001f0c:	4413      	add	r3, r2
 8001f0e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f48 <ssd1306_DrawPixel+0xa4>)
 8001f10:	5cd3      	ldrb	r3, [r2, r3]
 8001f12:	b25a      	sxtb	r2, r3
 8001f14:	79bb      	ldrb	r3, [r7, #6]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f20:	b25b      	sxtb	r3, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	b25b      	sxtb	r3, r3
 8001f26:	4013      	ands	r3, r2
 8001f28:	b259      	sxtb	r1, r3
 8001f2a:	79fa      	ldrb	r2, [r7, #7]
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	01db      	lsls	r3, r3, #7
 8001f30:	4413      	add	r3, r2
 8001f32:	b2c9      	uxtb	r1, r1
 8001f34:	4a04      	ldr	r2, [pc, #16]	@ (8001f48 <ssd1306_DrawPixel+0xa4>)
 8001f36:	54d1      	strb	r1, [r2, r3]
 8001f38:	e000      	b.n	8001f3c <ssd1306_DrawPixel+0x98>
        return;
 8001f3a:	bf00      	nop
    }
}
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	2000033c 	.word	0x2000033c

08001f4c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001f4c:	b590      	push	{r4, r7, lr}
 8001f4e:	b089      	sub	sp, #36	@ 0x24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4604      	mov	r4, r0
 8001f54:	4638      	mov	r0, r7
 8001f56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001f5a:	4623      	mov	r3, r4
 8001f5c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
 8001f60:	2b1f      	cmp	r3, #31
 8001f62:	d902      	bls.n	8001f6a <ssd1306_WriteChar+0x1e>
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	2b7e      	cmp	r3, #126	@ 0x7e
 8001f68:	d901      	bls.n	8001f6e <ssd1306_WriteChar+0x22>
        return 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e077      	b.n	800205e <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001f6e:	4b3e      	ldr	r3, [pc, #248]	@ (8002068 <ssd1306_WriteChar+0x11c>)
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	783b      	ldrb	r3, [r7, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	2b80      	cmp	r3, #128	@ 0x80
 8001f7a:	dc06      	bgt.n	8001f8a <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001f7c:	4b3a      	ldr	r3, [pc, #232]	@ (8002068 <ssd1306_WriteChar+0x11c>)
 8001f7e:	885b      	ldrh	r3, [r3, #2]
 8001f80:	461a      	mov	r2, r3
 8001f82:	787b      	ldrb	r3, [r7, #1]
 8001f84:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001f86:	2b40      	cmp	r3, #64	@ 0x40
 8001f88:	dd01      	ble.n	8001f8e <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	e067      	b.n	800205e <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
 8001f92:	e04e      	b.n	8002032 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
 8001f98:	3b20      	subs	r3, #32
 8001f9a:	7879      	ldrb	r1, [r7, #1]
 8001f9c:	fb01 f303 	mul.w	r3, r1, r3
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	440b      	add	r3, r1
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4413      	add	r3, r2
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61bb      	str	r3, [r7, #24]
 8001fb2:	e036      	b.n	8002022 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d013      	beq.n	8001fec <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001fc4:	4b28      	ldr	r3, [pc, #160]	@ (8002068 <ssd1306_WriteChar+0x11c>)
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	4413      	add	r3, r2
 8001fd0:	b2d8      	uxtb	r0, r3
 8001fd2:	4b25      	ldr	r3, [pc, #148]	@ (8002068 <ssd1306_WriteChar+0x11c>)
 8001fd4:	885b      	ldrh	r3, [r3, #2]
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	4413      	add	r3, r2
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f7ff ff5d 	bl	8001ea4 <ssd1306_DrawPixel>
 8001fea:	e017      	b.n	800201c <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001fec:	4b1e      	ldr	r3, [pc, #120]	@ (8002068 <ssd1306_WriteChar+0x11c>)
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	b2d8      	uxtb	r0, r3
 8001ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8002068 <ssd1306_WriteChar+0x11c>)
 8001ffc:	885b      	ldrh	r3, [r3, #2]
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	b2db      	uxtb	r3, r3
 8002004:	4413      	add	r3, r2
 8002006:	b2d9      	uxtb	r1, r3
 8002008:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800200c:	2b00      	cmp	r3, #0
 800200e:	bf0c      	ite	eq
 8002010:	2301      	moveq	r3, #1
 8002012:	2300      	movne	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	461a      	mov	r2, r3
 8002018:	f7ff ff44 	bl	8001ea4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	3301      	adds	r3, #1
 8002020:	61bb      	str	r3, [r7, #24]
 8002022:	783b      	ldrb	r3, [r7, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	4293      	cmp	r3, r2
 800202a:	d3c3      	bcc.n	8001fb4 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	3301      	adds	r3, #1
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	787b      	ldrb	r3, [r7, #1]
 8002034:	461a      	mov	r2, r3
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	4293      	cmp	r3, r2
 800203a:	d3ab      	bcc.n	8001f94 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 800203c:	4b0a      	ldr	r3, [pc, #40]	@ (8002068 <ssd1306_WriteChar+0x11c>)
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	2a00      	cmp	r2, #0
 8002044:	d005      	beq.n	8002052 <ssd1306_WriteChar+0x106>
 8002046:	68b9      	ldr	r1, [r7, #8]
 8002048:	7bfa      	ldrb	r2, [r7, #15]
 800204a:	3a20      	subs	r2, #32
 800204c:	440a      	add	r2, r1
 800204e:	7812      	ldrb	r2, [r2, #0]
 8002050:	e000      	b.n	8002054 <ssd1306_WriteChar+0x108>
 8002052:	783a      	ldrb	r2, [r7, #0]
 8002054:	4413      	add	r3, r2
 8002056:	b29a      	uxth	r2, r3
 8002058:	4b03      	ldr	r3, [pc, #12]	@ (8002068 <ssd1306_WriteChar+0x11c>)
 800205a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800205c:	7bfb      	ldrb	r3, [r7, #15]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3724      	adds	r7, #36	@ 0x24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd90      	pop	{r4, r7, pc}
 8002066:	bf00      	nop
 8002068:	2000073c 	.word	0x2000073c

0800206c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af02      	add	r7, sp, #8
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	4638      	mov	r0, r7
 8002076:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800207a:	e013      	b.n	80020a4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	7818      	ldrb	r0, [r3, #0]
 8002080:	7e3b      	ldrb	r3, [r7, #24]
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	463b      	mov	r3, r7
 8002086:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002088:	f7ff ff60 	bl	8001f4c <ssd1306_WriteChar>
 800208c:	4603      	mov	r3, r0
 800208e:	461a      	mov	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d002      	beq.n	800209e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	e008      	b.n	80020b0 <ssd1306_WriteString+0x44>
        }
        str++;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	3301      	adds	r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1e7      	bne.n	800207c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	781b      	ldrb	r3, [r3, #0]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	460a      	mov	r2, r1
 80020c2:	71fb      	strb	r3, [r7, #7]
 80020c4:	4613      	mov	r3, r2
 80020c6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	4b05      	ldr	r3, [pc, #20]	@ (80020e4 <ssd1306_SetCursor+0x2c>)
 80020ce:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80020d0:	79bb      	ldrb	r3, [r7, #6]
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	4b03      	ldr	r3, [pc, #12]	@ (80020e4 <ssd1306_SetCursor+0x2c>)
 80020d6:	805a      	strh	r2, [r3, #2]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	2000073c 	.word	0x2000073c

080020e8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80020f2:	2381      	movs	r3, #129	@ 0x81
 80020f4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fdf7 	bl	8001cec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff fdf3 	bl	8001cec <ssd1306_WriteCommand>
}
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d005      	beq.n	800212c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002120:	23af      	movs	r3, #175	@ 0xaf
 8002122:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002124:	4b08      	ldr	r3, [pc, #32]	@ (8002148 <ssd1306_SetDisplayOn+0x38>)
 8002126:	2201      	movs	r2, #1
 8002128:	715a      	strb	r2, [r3, #5]
 800212a:	e004      	b.n	8002136 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800212c:	23ae      	movs	r3, #174	@ 0xae
 800212e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002130:	4b05      	ldr	r3, [pc, #20]	@ (8002148 <ssd1306_SetDisplayOn+0x38>)
 8002132:	2200      	movs	r2, #0
 8002134:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fdd7 	bl	8001cec <ssd1306_WriteCommand>
}
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	2000073c 	.word	0x2000073c

0800214c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	607b      	str	r3, [r7, #4]
 8002156:	4b10      	ldr	r3, [pc, #64]	@ (8002198 <HAL_MspInit+0x4c>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215a:	4a0f      	ldr	r2, [pc, #60]	@ (8002198 <HAL_MspInit+0x4c>)
 800215c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002160:	6453      	str	r3, [r2, #68]	@ 0x44
 8002162:	4b0d      	ldr	r3, [pc, #52]	@ (8002198 <HAL_MspInit+0x4c>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800216a:	607b      	str	r3, [r7, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	603b      	str	r3, [r7, #0]
 8002172:	4b09      	ldr	r3, [pc, #36]	@ (8002198 <HAL_MspInit+0x4c>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002176:	4a08      	ldr	r2, [pc, #32]	@ (8002198 <HAL_MspInit+0x4c>)
 8002178:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800217c:	6413      	str	r3, [r2, #64]	@ 0x40
 800217e:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <HAL_MspInit+0x4c>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002186:	603b      	str	r3, [r7, #0]
 8002188:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800218a:	2007      	movs	r0, #7
 800218c:	f001 f8e0 	bl	8003350 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40023800 	.word	0x40023800

0800219c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08a      	sub	sp, #40	@ 0x28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002228 <HAL_ADC_MspInit+0x8c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d12f      	bne.n	800221e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	4b1a      	ldr	r3, [pc, #104]	@ (800222c <HAL_ADC_MspInit+0x90>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c6:	4a19      	ldr	r2, [pc, #100]	@ (800222c <HAL_ADC_MspInit+0x90>)
 80021c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ce:	4b17      	ldr	r3, [pc, #92]	@ (800222c <HAL_ADC_MspInit+0x90>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	4b13      	ldr	r3, [pc, #76]	@ (800222c <HAL_ADC_MspInit+0x90>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e2:	4a12      	ldr	r2, [pc, #72]	@ (800222c <HAL_ADC_MspInit+0x90>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ea:	4b10      	ldr	r3, [pc, #64]	@ (800222c <HAL_ADC_MspInit+0x90>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021f6:	2303      	movs	r3, #3
 80021f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021fa:	2303      	movs	r3, #3
 80021fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002202:	f107 0314 	add.w	r3, r7, #20
 8002206:	4619      	mov	r1, r3
 8002208:	4809      	ldr	r0, [pc, #36]	@ (8002230 <HAL_ADC_MspInit+0x94>)
 800220a:	f001 f975 	bl	80034f8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800220e:	2200      	movs	r2, #0
 8002210:	2100      	movs	r1, #0
 8002212:	2012      	movs	r0, #18
 8002214:	f001 f8a7 	bl	8003366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002218:	2012      	movs	r0, #18
 800221a:	f001 f8c0 	bl	800339e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800221e:	bf00      	nop
 8002220:	3728      	adds	r7, #40	@ 0x28
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40012000 	.word	0x40012000
 800222c:	40023800 	.word	0x40023800
 8002230:	40020000 	.word	0x40020000

08002234 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08a      	sub	sp, #40	@ 0x28
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a19      	ldr	r2, [pc, #100]	@ (80022b8 <HAL_I2C_MspInit+0x84>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d12b      	bne.n	80022ae <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	4b18      	ldr	r3, [pc, #96]	@ (80022bc <HAL_I2C_MspInit+0x88>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	4a17      	ldr	r2, [pc, #92]	@ (80022bc <HAL_I2C_MspInit+0x88>)
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	6313      	str	r3, [r2, #48]	@ 0x30
 8002266:	4b15      	ldr	r3, [pc, #84]	@ (80022bc <HAL_I2C_MspInit+0x88>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002272:	23c0      	movs	r3, #192	@ 0xc0
 8002274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002276:	2312      	movs	r3, #18
 8002278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800227a:	2301      	movs	r3, #1
 800227c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227e:	2303      	movs	r3, #3
 8002280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002282:	2304      	movs	r3, #4
 8002284:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002286:	f107 0314 	add.w	r3, r7, #20
 800228a:	4619      	mov	r1, r3
 800228c:	480c      	ldr	r0, [pc, #48]	@ (80022c0 <HAL_I2C_MspInit+0x8c>)
 800228e:	f001 f933 	bl	80034f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	4b09      	ldr	r3, [pc, #36]	@ (80022bc <HAL_I2C_MspInit+0x88>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	4a08      	ldr	r2, [pc, #32]	@ (80022bc <HAL_I2C_MspInit+0x88>)
 800229c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022a2:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <HAL_I2C_MspInit+0x88>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80022ae:	bf00      	nop
 80022b0:	3728      	adds	r7, #40	@ 0x28
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40005400 	.word	0x40005400
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40020400 	.word	0x40020400

080022c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08c      	sub	sp, #48	@ 0x30
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022cc:	f107 031c 	add.w	r3, r7, #28
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a3a      	ldr	r2, [pc, #232]	@ (80023cc <HAL_UART_MspInit+0x108>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d135      	bne.n	8002352 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	61bb      	str	r3, [r7, #24]
 80022ea:	4b39      	ldr	r3, [pc, #228]	@ (80023d0 <HAL_UART_MspInit+0x10c>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ee:	4a38      	ldr	r2, [pc, #224]	@ (80023d0 <HAL_UART_MspInit+0x10c>)
 80022f0:	f043 0310 	orr.w	r3, r3, #16
 80022f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022f6:	4b36      	ldr	r3, [pc, #216]	@ (80023d0 <HAL_UART_MspInit+0x10c>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	61bb      	str	r3, [r7, #24]
 8002300:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
 8002306:	4b32      	ldr	r3, [pc, #200]	@ (80023d0 <HAL_UART_MspInit+0x10c>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230a:	4a31      	ldr	r2, [pc, #196]	@ (80023d0 <HAL_UART_MspInit+0x10c>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6313      	str	r3, [r2, #48]	@ 0x30
 8002312:	4b2f      	ldr	r3, [pc, #188]	@ (80023d0 <HAL_UART_MspInit+0x10c>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800231e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232c:	2303      	movs	r3, #3
 800232e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002330:	2307      	movs	r3, #7
 8002332:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002334:	f107 031c 	add.w	r3, r7, #28
 8002338:	4619      	mov	r1, r3
 800233a:	4826      	ldr	r0, [pc, #152]	@ (80023d4 <HAL_UART_MspInit+0x110>)
 800233c:	f001 f8dc 	bl	80034f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002340:	2200      	movs	r2, #0
 8002342:	2100      	movs	r1, #0
 8002344:	2025      	movs	r0, #37	@ 0x25
 8002346:	f001 f80e 	bl	8003366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800234a:	2025      	movs	r0, #37	@ 0x25
 800234c:	f001 f827 	bl	800339e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002350:	e038      	b.n	80023c4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a20      	ldr	r2, [pc, #128]	@ (80023d8 <HAL_UART_MspInit+0x114>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d133      	bne.n	80023c4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800235c:	2300      	movs	r3, #0
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	4b1b      	ldr	r3, [pc, #108]	@ (80023d0 <HAL_UART_MspInit+0x10c>)
 8002362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002364:	4a1a      	ldr	r2, [pc, #104]	@ (80023d0 <HAL_UART_MspInit+0x10c>)
 8002366:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800236a:	6413      	str	r3, [r2, #64]	@ 0x40
 800236c:	4b18      	ldr	r3, [pc, #96]	@ (80023d0 <HAL_UART_MspInit+0x10c>)
 800236e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002378:	2300      	movs	r3, #0
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	4b14      	ldr	r3, [pc, #80]	@ (80023d0 <HAL_UART_MspInit+0x10c>)
 800237e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002380:	4a13      	ldr	r2, [pc, #76]	@ (80023d0 <HAL_UART_MspInit+0x10c>)
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	6313      	str	r3, [r2, #48]	@ 0x30
 8002388:	4b11      	ldr	r3, [pc, #68]	@ (80023d0 <HAL_UART_MspInit+0x10c>)
 800238a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002394:	230c      	movs	r3, #12
 8002396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002398:	2302      	movs	r3, #2
 800239a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a0:	2303      	movs	r3, #3
 80023a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023a4:	2307      	movs	r3, #7
 80023a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a8:	f107 031c 	add.w	r3, r7, #28
 80023ac:	4619      	mov	r1, r3
 80023ae:	4809      	ldr	r0, [pc, #36]	@ (80023d4 <HAL_UART_MspInit+0x110>)
 80023b0:	f001 f8a2 	bl	80034f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023b4:	2200      	movs	r2, #0
 80023b6:	2100      	movs	r1, #0
 80023b8:	2026      	movs	r0, #38	@ 0x26
 80023ba:	f000 ffd4 	bl	8003366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023be:	2026      	movs	r0, #38	@ 0x26
 80023c0:	f000 ffed 	bl	800339e <HAL_NVIC_EnableIRQ>
}
 80023c4:	bf00      	nop
 80023c6:	3730      	adds	r7, #48	@ 0x30
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40011000 	.word	0x40011000
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40020000 	.word	0x40020000
 80023d8:	40004400 	.word	0x40004400

080023dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023e0:	bf00      	nop
 80023e2:	e7fd      	b.n	80023e0 <NMI_Handler+0x4>

080023e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023e8:	bf00      	nop
 80023ea:	e7fd      	b.n	80023e8 <HardFault_Handler+0x4>

080023ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f0:	bf00      	nop
 80023f2:	e7fd      	b.n	80023f0 <MemManage_Handler+0x4>

080023f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <BusFault_Handler+0x4>

080023fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002400:	bf00      	nop
 8002402:	e7fd      	b.n	8002400 <UsageFault_Handler+0x4>

08002404 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002432:	f000 f975 	bl	8002720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002440:	4802      	ldr	r0, [pc, #8]	@ (800244c <ADC_IRQHandler+0x10>)
 8002442:	f000 fb52 	bl	8002aea <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20000208 	.word	0x20000208

08002450 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002454:	4802      	ldr	r0, [pc, #8]	@ (8002460 <USART1_IRQHandler+0x10>)
 8002456:	f002 fc27 	bl	8004ca8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	200002a4 	.word	0x200002a4

08002464 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002468:	4802      	ldr	r0, [pc, #8]	@ (8002474 <USART2_IRQHandler+0x10>)
 800246a:	f002 fc1d 	bl	8004ca8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	200002ec 	.word	0x200002ec

08002478 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return 1;
 800247c:	2301      	movs	r3, #1
}
 800247e:	4618      	mov	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <_kill>:

int _kill(int pid, int sig)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002492:	f004 f95f 	bl	8006754 <__errno>
 8002496:	4603      	mov	r3, r0
 8002498:	2216      	movs	r2, #22
 800249a:	601a      	str	r2, [r3, #0]
  return -1;
 800249c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <_exit>:

void _exit (int status)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024b0:	f04f 31ff 	mov.w	r1, #4294967295
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff ffe7 	bl	8002488 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024ba:	bf00      	nop
 80024bc:	e7fd      	b.n	80024ba <_exit+0x12>

080024be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
 80024ce:	e00a      	b.n	80024e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024d0:	f3af 8000 	nop.w
 80024d4:	4601      	mov	r1, r0
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	60ba      	str	r2, [r7, #8]
 80024dc:	b2ca      	uxtb	r2, r1
 80024de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	3301      	adds	r3, #1
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	dbf0      	blt.n	80024d0 <_read+0x12>
  }

  return len;
 80024ee:	687b      	ldr	r3, [r7, #4]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	e009      	b.n	800251e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	60ba      	str	r2, [r7, #8]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	3301      	adds	r3, #1
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	429a      	cmp	r2, r3
 8002524:	dbf1      	blt.n	800250a <_write+0x12>
  }
  return len;
 8002526:	687b      	ldr	r3, [r7, #4]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <_close>:

int _close(int file)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002538:	f04f 33ff 	mov.w	r3, #4294967295
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002558:	605a      	str	r2, [r3, #4]
  return 0;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <_isatty>:

int _isatty(int file)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002570:	2301      	movs	r3, #1
}
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800257e:	b480      	push	{r7}
 8002580:	b085      	sub	sp, #20
 8002582:	af00      	add	r7, sp, #0
 8002584:	60f8      	str	r0, [r7, #12]
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025a0:	4a14      	ldr	r2, [pc, #80]	@ (80025f4 <_sbrk+0x5c>)
 80025a2:	4b15      	ldr	r3, [pc, #84]	@ (80025f8 <_sbrk+0x60>)
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025ac:	4b13      	ldr	r3, [pc, #76]	@ (80025fc <_sbrk+0x64>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d102      	bne.n	80025ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025b4:	4b11      	ldr	r3, [pc, #68]	@ (80025fc <_sbrk+0x64>)
 80025b6:	4a12      	ldr	r2, [pc, #72]	@ (8002600 <_sbrk+0x68>)
 80025b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ba:	4b10      	ldr	r3, [pc, #64]	@ (80025fc <_sbrk+0x64>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4413      	add	r3, r2
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d207      	bcs.n	80025d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025c8:	f004 f8c4 	bl	8006754 <__errno>
 80025cc:	4603      	mov	r3, r0
 80025ce:	220c      	movs	r2, #12
 80025d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295
 80025d6:	e009      	b.n	80025ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025d8:	4b08      	ldr	r3, [pc, #32]	@ (80025fc <_sbrk+0x64>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025de:	4b07      	ldr	r3, [pc, #28]	@ (80025fc <_sbrk+0x64>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4413      	add	r3, r2
 80025e6:	4a05      	ldr	r2, [pc, #20]	@ (80025fc <_sbrk+0x64>)
 80025e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ea:	68fb      	ldr	r3, [r7, #12]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20020000 	.word	0x20020000
 80025f8:	00000400 	.word	0x00000400
 80025fc:	20000744 	.word	0x20000744
 8002600:	20000898 	.word	0x20000898

08002604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002608:	4b06      	ldr	r3, [pc, #24]	@ (8002624 <SystemInit+0x20>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800260e:	4a05      	ldr	r2, [pc, #20]	@ (8002624 <SystemInit+0x20>)
 8002610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

    ldr   sp, =_estack     /* set stack pointer */
 8002628:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002660 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800262c:	f7ff ffea 	bl	8002604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002630:	480c      	ldr	r0, [pc, #48]	@ (8002664 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002632:	490d      	ldr	r1, [pc, #52]	@ (8002668 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002634:	4a0d      	ldr	r2, [pc, #52]	@ (800266c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002638:	e002      	b.n	8002640 <LoopCopyDataInit>

0800263a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800263a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800263c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800263e:	3304      	adds	r3, #4

08002640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002644:	d3f9      	bcc.n	800263a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002646:	4a0a      	ldr	r2, [pc, #40]	@ (8002670 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002648:	4c0a      	ldr	r4, [pc, #40]	@ (8002674 <LoopFillZerobss+0x22>)
  movs r3, #0
 800264a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800264c:	e001      	b.n	8002652 <LoopFillZerobss>

0800264e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800264e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002650:	3204      	adds	r2, #4

08002652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002654:	d3fb      	bcc.n	800264e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002656:	f004 f883 	bl	8006760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800265a:	f7fe fd8d 	bl	8001178 <main>
  bx  lr    
 800265e:	4770      	bx	lr
    ldr   sp, =_estack     /* set stack pointer */
 8002660:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002668:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800266c:	0800a830 	.word	0x0800a830
  ldr r2, =_sbss
 8002670:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002674:	20000898 	.word	0x20000898

08002678 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002678:	e7fe      	b.n	8002678 <CAN1_RX0_IRQHandler>
	...

0800267c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002680:	4b0e      	ldr	r3, [pc, #56]	@ (80026bc <HAL_Init+0x40>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0d      	ldr	r2, [pc, #52]	@ (80026bc <HAL_Init+0x40>)
 8002686:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800268a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800268c:	4b0b      	ldr	r3, [pc, #44]	@ (80026bc <HAL_Init+0x40>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a0a      	ldr	r2, [pc, #40]	@ (80026bc <HAL_Init+0x40>)
 8002692:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002696:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002698:	4b08      	ldr	r3, [pc, #32]	@ (80026bc <HAL_Init+0x40>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a07      	ldr	r2, [pc, #28]	@ (80026bc <HAL_Init+0x40>)
 800269e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026a4:	2003      	movs	r0, #3
 80026a6:	f000 fe53 	bl	8003350 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026aa:	2000      	movs	r0, #0
 80026ac:	f000 f808 	bl	80026c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026b0:	f7ff fd4c 	bl	800214c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40023c00 	.word	0x40023c00

080026c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026c8:	4b12      	ldr	r3, [pc, #72]	@ (8002714 <HAL_InitTick+0x54>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4b12      	ldr	r3, [pc, #72]	@ (8002718 <HAL_InitTick+0x58>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	4619      	mov	r1, r3
 80026d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026da:	fbb2 f3f3 	udiv	r3, r2, r3
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 fe6b 	bl	80033ba <HAL_SYSTICK_Config>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e00e      	b.n	800270c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b0f      	cmp	r3, #15
 80026f2:	d80a      	bhi.n	800270a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026f4:	2200      	movs	r2, #0
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	f04f 30ff 	mov.w	r0, #4294967295
 80026fc:	f000 fe33 	bl	8003366 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002700:	4a06      	ldr	r2, [pc, #24]	@ (800271c <HAL_InitTick+0x5c>)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	e000      	b.n	800270c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
}
 800270c:	4618      	mov	r0, r3
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20000000 	.word	0x20000000
 8002718:	20000008 	.word	0x20000008
 800271c:	20000004 	.word	0x20000004

08002720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002724:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <HAL_IncTick+0x20>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	461a      	mov	r2, r3
 800272a:	4b06      	ldr	r3, [pc, #24]	@ (8002744 <HAL_IncTick+0x24>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4413      	add	r3, r2
 8002730:	4a04      	ldr	r2, [pc, #16]	@ (8002744 <HAL_IncTick+0x24>)
 8002732:	6013      	str	r3, [r2, #0]
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000008 	.word	0x20000008
 8002744:	20000748 	.word	0x20000748

08002748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return uwTick;
 800274c:	4b03      	ldr	r3, [pc, #12]	@ (800275c <HAL_GetTick+0x14>)
 800274e:	681b      	ldr	r3, [r3, #0]
}
 8002750:	4618      	mov	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	20000748 	.word	0x20000748

08002760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002768:	f7ff ffee 	bl	8002748 <HAL_GetTick>
 800276c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002778:	d005      	beq.n	8002786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800277a:	4b0a      	ldr	r3, [pc, #40]	@ (80027a4 <HAL_Delay+0x44>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4413      	add	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002786:	bf00      	nop
 8002788:	f7ff ffde 	bl	8002748 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	429a      	cmp	r2, r3
 8002796:	d8f7      	bhi.n	8002788 <HAL_Delay+0x28>
  {
  }
}
 8002798:	bf00      	nop
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000008 	.word	0x20000008

080027a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e033      	b.n	8002826 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d109      	bne.n	80027da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff fce8 	bl	800219c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d118      	bne.n	8002818 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ea:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80027ee:	f023 0302 	bic.w	r3, r3, #2
 80027f2:	f043 0202 	orr.w	r2, r3, #2
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 fbd2 	bl	8002fa4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280a:	f023 0303 	bic.w	r3, r3, #3
 800280e:	f043 0201 	orr.w	r2, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	641a      	str	r2, [r3, #64]	@ 0x40
 8002816:	e001      	b.n	800281c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002824:	7bfb      	ldrb	r3, [r7, #15]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002842:	2b01      	cmp	r3, #1
 8002844:	d101      	bne.n	800284a <HAL_ADC_Start+0x1a>
 8002846:	2302      	movs	r3, #2
 8002848:	e0b2      	b.n	80029b0 <HAL_ADC_Start+0x180>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b01      	cmp	r3, #1
 800285e:	d018      	beq.n	8002892 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002870:	4b52      	ldr	r3, [pc, #328]	@ (80029bc <HAL_ADC_Start+0x18c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a52      	ldr	r2, [pc, #328]	@ (80029c0 <HAL_ADC_Start+0x190>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	0c9a      	lsrs	r2, r3, #18
 800287c:	4613      	mov	r3, r2
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	4413      	add	r3, r2
 8002882:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002884:	e002      	b.n	800288c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	3b01      	subs	r3, #1
 800288a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f9      	bne.n	8002886 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b01      	cmp	r3, #1
 800289e:	d17a      	bne.n	8002996 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80028a8:	f023 0301 	bic.w	r3, r3, #1
 80028ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d007      	beq.n	80028d2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80028ca:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028de:	d106      	bne.n	80028ee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e4:	f023 0206 	bic.w	r2, r3, #6
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	645a      	str	r2, [r3, #68]	@ 0x44
 80028ec:	e002      	b.n	80028f4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028fc:	4b31      	ldr	r3, [pc, #196]	@ (80029c4 <HAL_ADC_Start+0x194>)
 80028fe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002908:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f003 031f 	and.w	r3, r3, #31
 8002912:	2b00      	cmp	r3, #0
 8002914:	d12a      	bne.n	800296c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a2b      	ldr	r2, [pc, #172]	@ (80029c8 <HAL_ADC_Start+0x198>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d015      	beq.n	800294c <HAL_ADC_Start+0x11c>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a29      	ldr	r2, [pc, #164]	@ (80029cc <HAL_ADC_Start+0x19c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d105      	bne.n	8002936 <HAL_ADC_Start+0x106>
 800292a:	4b26      	ldr	r3, [pc, #152]	@ (80029c4 <HAL_ADC_Start+0x194>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f003 031f 	and.w	r3, r3, #31
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a25      	ldr	r2, [pc, #148]	@ (80029d0 <HAL_ADC_Start+0x1a0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d136      	bne.n	80029ae <HAL_ADC_Start+0x17e>
 8002940:	4b20      	ldr	r3, [pc, #128]	@ (80029c4 <HAL_ADC_Start+0x194>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 0310 	and.w	r3, r3, #16
 8002948:	2b00      	cmp	r3, #0
 800294a:	d130      	bne.n	80029ae <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d129      	bne.n	80029ae <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002968:	609a      	str	r2, [r3, #8]
 800296a:	e020      	b.n	80029ae <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a15      	ldr	r2, [pc, #84]	@ (80029c8 <HAL_ADC_Start+0x198>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d11b      	bne.n	80029ae <HAL_ADC_Start+0x17e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d114      	bne.n	80029ae <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	e00b      	b.n	80029ae <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	f043 0210 	orr.w	r2, r3, #16
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a6:	f043 0201 	orr.w	r2, r3, #1
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	20000000 	.word	0x20000000
 80029c0:	431bde83 	.word	0x431bde83
 80029c4:	40012300 	.word	0x40012300
 80029c8:	40012000 	.word	0x40012000
 80029cc:	40012100 	.word	0x40012100
 80029d0:	40012200 	.word	0x40012200

080029d4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029f0:	d113      	bne.n	8002a1a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80029fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a00:	d10b      	bne.n	8002a1a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a06:	f043 0220 	orr.w	r2, r3, #32
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e063      	b.n	8002ae2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a1a:	f7ff fe95 	bl	8002748 <HAL_GetTick>
 8002a1e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a20:	e021      	b.n	8002a66 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a28:	d01d      	beq.n	8002a66 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d007      	beq.n	8002a40 <HAL_ADC_PollForConversion+0x6c>
 8002a30:	f7ff fe8a 	bl	8002748 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d212      	bcs.n	8002a66 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d00b      	beq.n	8002a66 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a52:	f043 0204 	orr.w	r2, r3, #4
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e03d      	b.n	8002ae2 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d1d6      	bne.n	8002a22 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f06f 0212 	mvn.w	r2, #18
 8002a7c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a82:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d123      	bne.n	8002ae0 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d11f      	bne.n	8002ae0 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d006      	beq.n	8002abc <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d111      	bne.n	8002ae0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002acc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d105      	bne.n	8002ae0 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad8:	f043 0201 	orr.w	r2, r3, #1
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b086      	sub	sp, #24
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f003 0320 	and.w	r3, r3, #32
 8002b18:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d049      	beq.n	8002bb4 <HAL_ADC_IRQHandler+0xca>
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d046      	beq.n	8002bb4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2a:	f003 0310 	and.w	r3, r3, #16
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d105      	bne.n	8002b3e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b36:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d12b      	bne.n	8002ba4 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d127      	bne.n	8002ba4 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d006      	beq.n	8002b70 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d119      	bne.n	8002ba4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0220 	bic.w	r2, r2, #32
 8002b7e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d105      	bne.n	8002ba4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9c:	f043 0201 	orr.w	r2, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f8bd 	bl	8002d24 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f06f 0212 	mvn.w	r2, #18
 8002bb2:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bc2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d057      	beq.n	8002c7a <HAL_ADC_IRQHandler+0x190>
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d054      	beq.n	8002c7a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd4:	f003 0310 	and.w	r3, r3, #16
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d105      	bne.n	8002be8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d139      	bne.n	8002c6a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bfc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d006      	beq.n	8002c12 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d12b      	bne.n	8002c6a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d124      	bne.n	8002c6a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d11d      	bne.n	8002c6a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d119      	bne.n	8002c6a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c44:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d105      	bne.n	8002c6a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c62:	f043 0201 	orr.w	r2, r3, #1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fa96 	bl	800319c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 020c 	mvn.w	r2, #12
 8002c78:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c88:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d017      	beq.n	8002cc0 <HAL_ADC_IRQHandler+0x1d6>
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d014      	beq.n	8002cc0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d10d      	bne.n	8002cc0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f841 	bl	8002d38 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f06f 0201 	mvn.w	r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002cce:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d015      	beq.n	8002d02 <HAL_ADC_IRQHandler+0x218>
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d012      	beq.n	8002d02 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce0:	f043 0202 	orr.w	r2, r3, #2
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0220 	mvn.w	r2, #32
 8002cf0:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f82a 	bl	8002d4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f06f 0220 	mvn.w	r2, #32
 8002d00:	601a      	str	r2, [r3, #0]
  }
}
 8002d02:	bf00      	nop
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d101      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x1c>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e105      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x228>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b09      	cmp	r3, #9
 8002d8a:	d925      	bls.n	8002dd8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68d9      	ldr	r1, [r3, #12]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	4413      	add	r3, r2
 8002da0:	3b1e      	subs	r3, #30
 8002da2:	2207      	movs	r2, #7
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43da      	mvns	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	400a      	ands	r2, r1
 8002db0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68d9      	ldr	r1, [r3, #12]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	4403      	add	r3, r0
 8002dca:	3b1e      	subs	r3, #30
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	60da      	str	r2, [r3, #12]
 8002dd6:	e022      	b.n	8002e1e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6919      	ldr	r1, [r3, #16]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	4613      	mov	r3, r2
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	4413      	add	r3, r2
 8002dec:	2207      	movs	r2, #7
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	43da      	mvns	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	400a      	ands	r2, r1
 8002dfa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6919      	ldr	r1, [r3, #16]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	4603      	mov	r3, r0
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	4403      	add	r3, r0
 8002e14:	409a      	lsls	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b06      	cmp	r3, #6
 8002e24:	d824      	bhi.n	8002e70 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	3b05      	subs	r3, #5
 8002e38:	221f      	movs	r2, #31
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43da      	mvns	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	400a      	ands	r2, r1
 8002e46:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	4618      	mov	r0, r3
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	3b05      	subs	r3, #5
 8002e62:	fa00 f203 	lsl.w	r2, r0, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e6e:	e04c      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b0c      	cmp	r3, #12
 8002e76:	d824      	bhi.n	8002ec2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	3b23      	subs	r3, #35	@ 0x23
 8002e8a:	221f      	movs	r2, #31
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43da      	mvns	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	400a      	ands	r2, r1
 8002e98:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3b23      	subs	r3, #35	@ 0x23
 8002eb4:	fa00 f203 	lsl.w	r2, r0, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ec0:	e023      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	3b41      	subs	r3, #65	@ 0x41
 8002ed4:	221f      	movs	r2, #31
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43da      	mvns	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	400a      	ands	r2, r1
 8002ee2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	3b41      	subs	r3, #65	@ 0x41
 8002efe:	fa00 f203 	lsl.w	r2, r0, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f0a:	4b22      	ldr	r3, [pc, #136]	@ (8002f94 <HAL_ADC_ConfigChannel+0x234>)
 8002f0c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a21      	ldr	r2, [pc, #132]	@ (8002f98 <HAL_ADC_ConfigChannel+0x238>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d109      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x1cc>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b12      	cmp	r3, #18
 8002f1e:	d105      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a19      	ldr	r2, [pc, #100]	@ (8002f98 <HAL_ADC_ConfigChannel+0x238>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d123      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x21e>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b10      	cmp	r3, #16
 8002f3c:	d003      	beq.n	8002f46 <HAL_ADC_ConfigChannel+0x1e6>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b11      	cmp	r3, #17
 8002f44:	d11b      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b10      	cmp	r3, #16
 8002f58:	d111      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f5a:	4b10      	ldr	r3, [pc, #64]	@ (8002f9c <HAL_ADC_ConfigChannel+0x23c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a10      	ldr	r2, [pc, #64]	@ (8002fa0 <HAL_ADC_ConfigChannel+0x240>)
 8002f60:	fba2 2303 	umull	r2, r3, r2, r3
 8002f64:	0c9a      	lsrs	r2, r3, #18
 8002f66:	4613      	mov	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002f70:	e002      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	3b01      	subs	r3, #1
 8002f76:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f9      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	40012300 	.word	0x40012300
 8002f98:	40012000 	.word	0x40012000
 8002f9c:	20000000 	.word	0x20000000
 8002fa0:	431bde83 	.word	0x431bde83

08002fa4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fac:	4b79      	ldr	r3, [pc, #484]	@ (8003194 <ADC_Init+0x1f0>)
 8002fae:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6859      	ldr	r1, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	021a      	lsls	r2, r3, #8
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002ffc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6859      	ldr	r1, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800301e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6899      	ldr	r1, [r3, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003036:	4a58      	ldr	r2, [pc, #352]	@ (8003198 <ADC_Init+0x1f4>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d022      	beq.n	8003082 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800304a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6899      	ldr	r1, [r3, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800306c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6899      	ldr	r1, [r3, #8]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	e00f      	b.n	80030a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003090:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80030a0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0202 	bic.w	r2, r2, #2
 80030b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6899      	ldr	r1, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	7e1b      	ldrb	r3, [r3, #24]
 80030bc:	005a      	lsls	r2, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01b      	beq.n	8003108 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030de:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80030ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6859      	ldr	r1, [r3, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fa:	3b01      	subs	r3, #1
 80030fc:	035a      	lsls	r2, r3, #13
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	605a      	str	r2, [r3, #4]
 8003106:	e007      	b.n	8003118 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003116:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003126:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	3b01      	subs	r3, #1
 8003134:	051a      	lsls	r2, r3, #20
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800314c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6899      	ldr	r1, [r3, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800315a:	025a      	lsls	r2, r3, #9
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003172:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6899      	ldr	r1, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	029a      	lsls	r2, r3, #10
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	609a      	str	r2, [r3, #8]
}
 8003188:	bf00      	nop
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	40012300 	.word	0x40012300
 8003198:	0f000001 	.word	0x0f000001

0800319c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031c0:	4b0c      	ldr	r3, [pc, #48]	@ (80031f4 <__NVIC_SetPriorityGrouping+0x44>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031cc:	4013      	ands	r3, r2
 80031ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031e2:	4a04      	ldr	r2, [pc, #16]	@ (80031f4 <__NVIC_SetPriorityGrouping+0x44>)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	60d3      	str	r3, [r2, #12]
}
 80031e8:	bf00      	nop
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	e000ed00 	.word	0xe000ed00

080031f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031fc:	4b04      	ldr	r3, [pc, #16]	@ (8003210 <__NVIC_GetPriorityGrouping+0x18>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	0a1b      	lsrs	r3, r3, #8
 8003202:	f003 0307 	and.w	r3, r3, #7
}
 8003206:	4618      	mov	r0, r3
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	e000ed00 	.word	0xe000ed00

08003214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	4603      	mov	r3, r0
 800321c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800321e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003222:	2b00      	cmp	r3, #0
 8003224:	db0b      	blt.n	800323e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003226:	79fb      	ldrb	r3, [r7, #7]
 8003228:	f003 021f 	and.w	r2, r3, #31
 800322c:	4907      	ldr	r1, [pc, #28]	@ (800324c <__NVIC_EnableIRQ+0x38>)
 800322e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	2001      	movs	r0, #1
 8003236:	fa00 f202 	lsl.w	r2, r0, r2
 800323a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	e000e100 	.word	0xe000e100

08003250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	6039      	str	r1, [r7, #0]
 800325a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800325c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003260:	2b00      	cmp	r3, #0
 8003262:	db0a      	blt.n	800327a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	b2da      	uxtb	r2, r3
 8003268:	490c      	ldr	r1, [pc, #48]	@ (800329c <__NVIC_SetPriority+0x4c>)
 800326a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326e:	0112      	lsls	r2, r2, #4
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	440b      	add	r3, r1
 8003274:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003278:	e00a      	b.n	8003290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	b2da      	uxtb	r2, r3
 800327e:	4908      	ldr	r1, [pc, #32]	@ (80032a0 <__NVIC_SetPriority+0x50>)
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	3b04      	subs	r3, #4
 8003288:	0112      	lsls	r2, r2, #4
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	440b      	add	r3, r1
 800328e:	761a      	strb	r2, [r3, #24]
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	e000e100 	.word	0xe000e100
 80032a0:	e000ed00 	.word	0xe000ed00

080032a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b089      	sub	sp, #36	@ 0x24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f1c3 0307 	rsb	r3, r3, #7
 80032be:	2b04      	cmp	r3, #4
 80032c0:	bf28      	it	cs
 80032c2:	2304      	movcs	r3, #4
 80032c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	3304      	adds	r3, #4
 80032ca:	2b06      	cmp	r3, #6
 80032cc:	d902      	bls.n	80032d4 <NVIC_EncodePriority+0x30>
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	3b03      	subs	r3, #3
 80032d2:	e000      	b.n	80032d6 <NVIC_EncodePriority+0x32>
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d8:	f04f 32ff 	mov.w	r2, #4294967295
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43da      	mvns	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	401a      	ands	r2, r3
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032ec:	f04f 31ff 	mov.w	r1, #4294967295
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	fa01 f303 	lsl.w	r3, r1, r3
 80032f6:	43d9      	mvns	r1, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032fc:	4313      	orrs	r3, r2
         );
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3724      	adds	r7, #36	@ 0x24
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
	...

0800330c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3b01      	subs	r3, #1
 8003318:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800331c:	d301      	bcc.n	8003322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800331e:	2301      	movs	r3, #1
 8003320:	e00f      	b.n	8003342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003322:	4a0a      	ldr	r2, [pc, #40]	@ (800334c <SysTick_Config+0x40>)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3b01      	subs	r3, #1
 8003328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800332a:	210f      	movs	r1, #15
 800332c:	f04f 30ff 	mov.w	r0, #4294967295
 8003330:	f7ff ff8e 	bl	8003250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003334:	4b05      	ldr	r3, [pc, #20]	@ (800334c <SysTick_Config+0x40>)
 8003336:	2200      	movs	r2, #0
 8003338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800333a:	4b04      	ldr	r3, [pc, #16]	@ (800334c <SysTick_Config+0x40>)
 800333c:	2207      	movs	r2, #7
 800333e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	e000e010 	.word	0xe000e010

08003350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7ff ff29 	bl	80031b0 <__NVIC_SetPriorityGrouping>
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003366:	b580      	push	{r7, lr}
 8003368:	b086      	sub	sp, #24
 800336a:	af00      	add	r7, sp, #0
 800336c:	4603      	mov	r3, r0
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	607a      	str	r2, [r7, #4]
 8003372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003378:	f7ff ff3e 	bl	80031f8 <__NVIC_GetPriorityGrouping>
 800337c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	6978      	ldr	r0, [r7, #20]
 8003384:	f7ff ff8e 	bl	80032a4 <NVIC_EncodePriority>
 8003388:	4602      	mov	r2, r0
 800338a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800338e:	4611      	mov	r1, r2
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff ff5d 	bl	8003250 <__NVIC_SetPriority>
}
 8003396:	bf00      	nop
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b082      	sub	sp, #8
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	4603      	mov	r3, r0
 80033a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff ff31 	bl	8003214 <__NVIC_EnableIRQ>
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff ffa2 	bl	800330c <SysTick_Config>
 80033c8:	4603      	mov	r3, r0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80033e0:	f7ff f9b2 	bl	8002748 <HAL_GetTick>
 80033e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d008      	beq.n	8003404 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2280      	movs	r2, #128	@ 0x80
 80033f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e052      	b.n	80034aa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0216 	bic.w	r2, r2, #22
 8003412:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695a      	ldr	r2, [r3, #20]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003422:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003428:	2b00      	cmp	r3, #0
 800342a:	d103      	bne.n	8003434 <HAL_DMA_Abort+0x62>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003430:	2b00      	cmp	r3, #0
 8003432:	d007      	beq.n	8003444 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0208 	bic.w	r2, r2, #8
 8003442:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0201 	bic.w	r2, r2, #1
 8003452:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003454:	e013      	b.n	800347e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003456:	f7ff f977 	bl	8002748 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b05      	cmp	r3, #5
 8003462:	d90c      	bls.n	800347e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2220      	movs	r2, #32
 8003468:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2203      	movs	r2, #3
 800346e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e015      	b.n	80034aa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1e4      	bne.n	8003456 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003490:	223f      	movs	r2, #63	@ 0x3f
 8003492:	409a      	lsls	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d004      	beq.n	80034d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2280      	movs	r2, #128	@ 0x80
 80034ca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e00c      	b.n	80034ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2205      	movs	r2, #5
 80034d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0201 	bic.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
	...

080034f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b089      	sub	sp, #36	@ 0x24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003506:	2300      	movs	r3, #0
 8003508:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800350a:	2300      	movs	r3, #0
 800350c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
 8003512:	e16b      	b.n	80037ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003514:	2201      	movs	r2, #1
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	4013      	ands	r3, r2
 8003526:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	429a      	cmp	r2, r3
 800352e:	f040 815a 	bne.w	80037e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	2b01      	cmp	r3, #1
 800353c:	d005      	beq.n	800354a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003546:	2b02      	cmp	r3, #2
 8003548:	d130      	bne.n	80035ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	2203      	movs	r2, #3
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43db      	mvns	r3, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4013      	ands	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4313      	orrs	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003580:	2201      	movs	r2, #1
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	43db      	mvns	r3, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4013      	ands	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	f003 0201 	and.w	r2, r3, #1
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 0303 	and.w	r3, r3, #3
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d017      	beq.n	80035e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	2203      	movs	r2, #3
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4013      	ands	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4313      	orrs	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f003 0303 	and.w	r3, r3, #3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d123      	bne.n	800363c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	08da      	lsrs	r2, r3, #3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3208      	adds	r2, #8
 80035fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003600:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	220f      	movs	r2, #15
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	43db      	mvns	r3, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4013      	ands	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4313      	orrs	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	08da      	lsrs	r2, r3, #3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3208      	adds	r2, #8
 8003636:	69b9      	ldr	r1, [r7, #24]
 8003638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	2203      	movs	r2, #3
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	43db      	mvns	r3, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4013      	ands	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 0203 	and.w	r2, r3, #3
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4313      	orrs	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80b4 	beq.w	80037e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	4b60      	ldr	r3, [pc, #384]	@ (8003804 <HAL_GPIO_Init+0x30c>)
 8003684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003686:	4a5f      	ldr	r2, [pc, #380]	@ (8003804 <HAL_GPIO_Init+0x30c>)
 8003688:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800368c:	6453      	str	r3, [r2, #68]	@ 0x44
 800368e:	4b5d      	ldr	r3, [pc, #372]	@ (8003804 <HAL_GPIO_Init+0x30c>)
 8003690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003692:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800369a:	4a5b      	ldr	r2, [pc, #364]	@ (8003808 <HAL_GPIO_Init+0x310>)
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	089b      	lsrs	r3, r3, #2
 80036a0:	3302      	adds	r3, #2
 80036a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	220f      	movs	r2, #15
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	43db      	mvns	r3, r3
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4013      	ands	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a52      	ldr	r2, [pc, #328]	@ (800380c <HAL_GPIO_Init+0x314>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d02b      	beq.n	800371e <HAL_GPIO_Init+0x226>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a51      	ldr	r2, [pc, #324]	@ (8003810 <HAL_GPIO_Init+0x318>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d025      	beq.n	800371a <HAL_GPIO_Init+0x222>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a50      	ldr	r2, [pc, #320]	@ (8003814 <HAL_GPIO_Init+0x31c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d01f      	beq.n	8003716 <HAL_GPIO_Init+0x21e>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a4f      	ldr	r2, [pc, #316]	@ (8003818 <HAL_GPIO_Init+0x320>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d019      	beq.n	8003712 <HAL_GPIO_Init+0x21a>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a4e      	ldr	r2, [pc, #312]	@ (800381c <HAL_GPIO_Init+0x324>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d013      	beq.n	800370e <HAL_GPIO_Init+0x216>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a4d      	ldr	r2, [pc, #308]	@ (8003820 <HAL_GPIO_Init+0x328>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00d      	beq.n	800370a <HAL_GPIO_Init+0x212>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a4c      	ldr	r2, [pc, #304]	@ (8003824 <HAL_GPIO_Init+0x32c>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d007      	beq.n	8003706 <HAL_GPIO_Init+0x20e>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a4b      	ldr	r2, [pc, #300]	@ (8003828 <HAL_GPIO_Init+0x330>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d101      	bne.n	8003702 <HAL_GPIO_Init+0x20a>
 80036fe:	2307      	movs	r3, #7
 8003700:	e00e      	b.n	8003720 <HAL_GPIO_Init+0x228>
 8003702:	2308      	movs	r3, #8
 8003704:	e00c      	b.n	8003720 <HAL_GPIO_Init+0x228>
 8003706:	2306      	movs	r3, #6
 8003708:	e00a      	b.n	8003720 <HAL_GPIO_Init+0x228>
 800370a:	2305      	movs	r3, #5
 800370c:	e008      	b.n	8003720 <HAL_GPIO_Init+0x228>
 800370e:	2304      	movs	r3, #4
 8003710:	e006      	b.n	8003720 <HAL_GPIO_Init+0x228>
 8003712:	2303      	movs	r3, #3
 8003714:	e004      	b.n	8003720 <HAL_GPIO_Init+0x228>
 8003716:	2302      	movs	r3, #2
 8003718:	e002      	b.n	8003720 <HAL_GPIO_Init+0x228>
 800371a:	2301      	movs	r3, #1
 800371c:	e000      	b.n	8003720 <HAL_GPIO_Init+0x228>
 800371e:	2300      	movs	r3, #0
 8003720:	69fa      	ldr	r2, [r7, #28]
 8003722:	f002 0203 	and.w	r2, r2, #3
 8003726:	0092      	lsls	r2, r2, #2
 8003728:	4093      	lsls	r3, r2
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4313      	orrs	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003730:	4935      	ldr	r1, [pc, #212]	@ (8003808 <HAL_GPIO_Init+0x310>)
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	089b      	lsrs	r3, r3, #2
 8003736:	3302      	adds	r3, #2
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800373e:	4b3b      	ldr	r3, [pc, #236]	@ (800382c <HAL_GPIO_Init+0x334>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	43db      	mvns	r3, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4013      	ands	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	4313      	orrs	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003762:	4a32      	ldr	r2, [pc, #200]	@ (800382c <HAL_GPIO_Init+0x334>)
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003768:	4b30      	ldr	r3, [pc, #192]	@ (800382c <HAL_GPIO_Init+0x334>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	43db      	mvns	r3, r3
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4013      	ands	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	4313      	orrs	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800378c:	4a27      	ldr	r2, [pc, #156]	@ (800382c <HAL_GPIO_Init+0x334>)
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003792:	4b26      	ldr	r3, [pc, #152]	@ (800382c <HAL_GPIO_Init+0x334>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	43db      	mvns	r3, r3
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4013      	ands	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037b6:	4a1d      	ldr	r2, [pc, #116]	@ (800382c <HAL_GPIO_Init+0x334>)
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037bc:	4b1b      	ldr	r3, [pc, #108]	@ (800382c <HAL_GPIO_Init+0x334>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	43db      	mvns	r3, r3
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4013      	ands	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	4313      	orrs	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037e0:	4a12      	ldr	r2, [pc, #72]	@ (800382c <HAL_GPIO_Init+0x334>)
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	3301      	adds	r3, #1
 80037ea:	61fb      	str	r3, [r7, #28]
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	2b0f      	cmp	r3, #15
 80037f0:	f67f ae90 	bls.w	8003514 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037f4:	bf00      	nop
 80037f6:	bf00      	nop
 80037f8:	3724      	adds	r7, #36	@ 0x24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	40023800 	.word	0x40023800
 8003808:	40013800 	.word	0x40013800
 800380c:	40020000 	.word	0x40020000
 8003810:	40020400 	.word	0x40020400
 8003814:	40020800 	.word	0x40020800
 8003818:	40020c00 	.word	0x40020c00
 800381c:	40021000 	.word	0x40021000
 8003820:	40021400 	.word	0x40021400
 8003824:	40021800 	.word	0x40021800
 8003828:	40021c00 	.word	0x40021c00
 800382c:	40013c00 	.word	0x40013c00

08003830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	807b      	strh	r3, [r7, #2]
 800383c:	4613      	mov	r3, r2
 800383e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003840:	787b      	ldrb	r3, [r7, #1]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003846:	887a      	ldrh	r2, [r7, #2]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800384c:	e003      	b.n	8003856 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800384e:	887b      	ldrh	r3, [r7, #2]
 8003850:	041a      	lsls	r2, r3, #16
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	619a      	str	r2, [r3, #24]
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
	...

08003864 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e12b      	b.n	8003ace <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d106      	bne.n	8003890 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fe fcd2 	bl	8002234 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2224      	movs	r2, #36	@ 0x24
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0201 	bic.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038c8:	f001 f8ea 	bl	8004aa0 <HAL_RCC_GetPCLK1Freq>
 80038cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	4a81      	ldr	r2, [pc, #516]	@ (8003ad8 <HAL_I2C_Init+0x274>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d807      	bhi.n	80038e8 <HAL_I2C_Init+0x84>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4a80      	ldr	r2, [pc, #512]	@ (8003adc <HAL_I2C_Init+0x278>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	bf94      	ite	ls
 80038e0:	2301      	movls	r3, #1
 80038e2:	2300      	movhi	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	e006      	b.n	80038f6 <HAL_I2C_Init+0x92>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4a7d      	ldr	r2, [pc, #500]	@ (8003ae0 <HAL_I2C_Init+0x27c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	bf94      	ite	ls
 80038f0:	2301      	movls	r3, #1
 80038f2:	2300      	movhi	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e0e7      	b.n	8003ace <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4a78      	ldr	r2, [pc, #480]	@ (8003ae4 <HAL_I2C_Init+0x280>)
 8003902:	fba2 2303 	umull	r2, r3, r2, r3
 8003906:	0c9b      	lsrs	r3, r3, #18
 8003908:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	430a      	orrs	r2, r1
 800391c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	4a6a      	ldr	r2, [pc, #424]	@ (8003ad8 <HAL_I2C_Init+0x274>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d802      	bhi.n	8003938 <HAL_I2C_Init+0xd4>
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	3301      	adds	r3, #1
 8003936:	e009      	b.n	800394c <HAL_I2C_Init+0xe8>
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800393e:	fb02 f303 	mul.w	r3, r2, r3
 8003942:	4a69      	ldr	r2, [pc, #420]	@ (8003ae8 <HAL_I2C_Init+0x284>)
 8003944:	fba2 2303 	umull	r2, r3, r2, r3
 8003948:	099b      	lsrs	r3, r3, #6
 800394a:	3301      	adds	r3, #1
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6812      	ldr	r2, [r2, #0]
 8003950:	430b      	orrs	r3, r1
 8003952:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800395e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	495c      	ldr	r1, [pc, #368]	@ (8003ad8 <HAL_I2C_Init+0x274>)
 8003968:	428b      	cmp	r3, r1
 800396a:	d819      	bhi.n	80039a0 <HAL_I2C_Init+0x13c>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	1e59      	subs	r1, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	fbb1 f3f3 	udiv	r3, r1, r3
 800397a:	1c59      	adds	r1, r3, #1
 800397c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003980:	400b      	ands	r3, r1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <HAL_I2C_Init+0x138>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	1e59      	subs	r1, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	fbb1 f3f3 	udiv	r3, r1, r3
 8003994:	3301      	adds	r3, #1
 8003996:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800399a:	e051      	b.n	8003a40 <HAL_I2C_Init+0x1dc>
 800399c:	2304      	movs	r3, #4
 800399e:	e04f      	b.n	8003a40 <HAL_I2C_Init+0x1dc>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d111      	bne.n	80039cc <HAL_I2C_Init+0x168>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	1e58      	subs	r0, r3, #1
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6859      	ldr	r1, [r3, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	440b      	add	r3, r1
 80039b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ba:	3301      	adds	r3, #1
 80039bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bf0c      	ite	eq
 80039c4:	2301      	moveq	r3, #1
 80039c6:	2300      	movne	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	e012      	b.n	80039f2 <HAL_I2C_Init+0x18e>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	1e58      	subs	r0, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6859      	ldr	r1, [r3, #4]
 80039d4:	460b      	mov	r3, r1
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	0099      	lsls	r1, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	fbb0 f3f3 	udiv	r3, r0, r3
 80039e2:	3301      	adds	r3, #1
 80039e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	bf0c      	ite	eq
 80039ec:	2301      	moveq	r3, #1
 80039ee:	2300      	movne	r3, #0
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <HAL_I2C_Init+0x196>
 80039f6:	2301      	movs	r3, #1
 80039f8:	e022      	b.n	8003a40 <HAL_I2C_Init+0x1dc>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10e      	bne.n	8003a20 <HAL_I2C_Init+0x1bc>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	1e58      	subs	r0, r3, #1
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6859      	ldr	r1, [r3, #4]
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	440b      	add	r3, r1
 8003a10:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a14:	3301      	adds	r3, #1
 8003a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a1e:	e00f      	b.n	8003a40 <HAL_I2C_Init+0x1dc>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	1e58      	subs	r0, r3, #1
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6859      	ldr	r1, [r3, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	0099      	lsls	r1, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a36:	3301      	adds	r3, #1
 8003a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	6809      	ldr	r1, [r1, #0]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69da      	ldr	r2, [r3, #28]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6911      	ldr	r1, [r2, #16]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	68d2      	ldr	r2, [r2, #12]
 8003a7a:	4311      	orrs	r1, r2
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6812      	ldr	r2, [r2, #0]
 8003a80:	430b      	orrs	r3, r1
 8003a82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	695a      	ldr	r2, [r3, #20]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0201 	orr.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	000186a0 	.word	0x000186a0
 8003adc:	001e847f 	.word	0x001e847f
 8003ae0:	003d08ff 	.word	0x003d08ff
 8003ae4:	431bde83 	.word	0x431bde83
 8003ae8:	10624dd3 	.word	0x10624dd3

08003aec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b088      	sub	sp, #32
 8003af0:	af02      	add	r7, sp, #8
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	4608      	mov	r0, r1
 8003af6:	4611      	mov	r1, r2
 8003af8:	461a      	mov	r2, r3
 8003afa:	4603      	mov	r3, r0
 8003afc:	817b      	strh	r3, [r7, #10]
 8003afe:	460b      	mov	r3, r1
 8003b00:	813b      	strh	r3, [r7, #8]
 8003b02:	4613      	mov	r3, r2
 8003b04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b06:	f7fe fe1f 	bl	8002748 <HAL_GetTick>
 8003b0a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b20      	cmp	r3, #32
 8003b16:	f040 80d9 	bne.w	8003ccc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	2319      	movs	r3, #25
 8003b20:	2201      	movs	r2, #1
 8003b22:	496d      	ldr	r1, [pc, #436]	@ (8003cd8 <HAL_I2C_Mem_Write+0x1ec>)
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 f971 	bl	8003e0c <I2C_WaitOnFlagUntilTimeout>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b30:	2302      	movs	r3, #2
 8003b32:	e0cc      	b.n	8003cce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <HAL_I2C_Mem_Write+0x56>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e0c5      	b.n	8003cce <HAL_I2C_Mem_Write+0x1e2>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d007      	beq.n	8003b68 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0201 	orr.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2221      	movs	r2, #33	@ 0x21
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2240      	movs	r2, #64	@ 0x40
 8003b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a3a      	ldr	r2, [r7, #32]
 8003b92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003b98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4a4d      	ldr	r2, [pc, #308]	@ (8003cdc <HAL_I2C_Mem_Write+0x1f0>)
 8003ba8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003baa:	88f8      	ldrh	r0, [r7, #6]
 8003bac:	893a      	ldrh	r2, [r7, #8]
 8003bae:	8979      	ldrh	r1, [r7, #10]
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	9301      	str	r3, [sp, #4]
 8003bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	4603      	mov	r3, r0
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 f890 	bl	8003ce0 <I2C_RequestMemoryWrite>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d052      	beq.n	8003c6c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e081      	b.n	8003cce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 fa36 	bl	8004040 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00d      	beq.n	8003bf6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	d107      	bne.n	8003bf2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bf0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e06b      	b.n	8003cce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfa:	781a      	ldrb	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c06:	1c5a      	adds	r2, r3, #1
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d11b      	bne.n	8003c6c <HAL_I2C_Mem_Write+0x180>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d017      	beq.n	8003c6c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c40:	781a      	ldrb	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4c:	1c5a      	adds	r2, r3, #1
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1aa      	bne.n	8003bca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 fa29 	bl	80040d0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00d      	beq.n	8003ca0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d107      	bne.n	8003c9c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c9a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e016      	b.n	8003cce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	e000      	b.n	8003cce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ccc:	2302      	movs	r3, #2
  }
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3718      	adds	r7, #24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	00100002 	.word	0x00100002
 8003cdc:	ffff0000 	.word	0xffff0000

08003ce0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b088      	sub	sp, #32
 8003ce4:	af02      	add	r7, sp, #8
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	4608      	mov	r0, r1
 8003cea:	4611      	mov	r1, r2
 8003cec:	461a      	mov	r2, r3
 8003cee:	4603      	mov	r3, r0
 8003cf0:	817b      	strh	r3, [r7, #10]
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	813b      	strh	r3, [r7, #8]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 f878 	bl	8003e0c <I2C_WaitOnFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00d      	beq.n	8003d3e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d30:	d103      	bne.n	8003d3a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d38:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e05f      	b.n	8003dfe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d3e:	897b      	ldrh	r3, [r7, #10]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d50:	6a3a      	ldr	r2, [r7, #32]
 8003d52:	492d      	ldr	r1, [pc, #180]	@ (8003e08 <I2C_RequestMemoryWrite+0x128>)
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 f8d3 	bl	8003f00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e04c      	b.n	8003dfe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d7c:	6a39      	ldr	r1, [r7, #32]
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 f95e 	bl	8004040 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00d      	beq.n	8003da6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d107      	bne.n	8003da2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003da0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e02b      	b.n	8003dfe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003da6:	88fb      	ldrh	r3, [r7, #6]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d105      	bne.n	8003db8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dac:	893b      	ldrh	r3, [r7, #8]
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	611a      	str	r2, [r3, #16]
 8003db6:	e021      	b.n	8003dfc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003db8:	893b      	ldrh	r3, [r7, #8]
 8003dba:	0a1b      	lsrs	r3, r3, #8
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dc8:	6a39      	ldr	r1, [r7, #32]
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 f938 	bl	8004040 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00d      	beq.n	8003df2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d107      	bne.n	8003dee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e005      	b.n	8003dfe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003df2:	893b      	ldrh	r3, [r7, #8]
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	00010002 	.word	0x00010002

08003e0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	603b      	str	r3, [r7, #0]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e1c:	e048      	b.n	8003eb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e24:	d044      	beq.n	8003eb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e26:	f7fe fc8f 	bl	8002748 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d302      	bcc.n	8003e3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d139      	bne.n	8003eb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	0c1b      	lsrs	r3, r3, #16
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d10d      	bne.n	8003e62 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	43da      	mvns	r2, r3
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	4013      	ands	r3, r2
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	bf0c      	ite	eq
 8003e58:	2301      	moveq	r3, #1
 8003e5a:	2300      	movne	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	461a      	mov	r2, r3
 8003e60:	e00c      	b.n	8003e7c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	43da      	mvns	r2, r3
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	bf0c      	ite	eq
 8003e74:	2301      	moveq	r3, #1
 8003e76:	2300      	movne	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	79fb      	ldrb	r3, [r7, #7]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d116      	bne.n	8003eb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9c:	f043 0220 	orr.w	r2, r3, #32
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e023      	b.n	8003ef8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	0c1b      	lsrs	r3, r3, #16
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d10d      	bne.n	8003ed6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	43da      	mvns	r2, r3
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	bf0c      	ite	eq
 8003ecc:	2301      	moveq	r3, #1
 8003ece:	2300      	movne	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	e00c      	b.n	8003ef0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	43da      	mvns	r2, r3
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	bf0c      	ite	eq
 8003ee8:	2301      	moveq	r3, #1
 8003eea:	2300      	movne	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	461a      	mov	r2, r3
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d093      	beq.n	8003e1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
 8003f0c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f0e:	e071      	b.n	8003ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f1e:	d123      	bne.n	8003f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f2e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f54:	f043 0204 	orr.w	r2, r3, #4
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e067      	b.n	8004038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6e:	d041      	beq.n	8003ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f70:	f7fe fbea 	bl	8002748 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d302      	bcc.n	8003f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d136      	bne.n	8003ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	0c1b      	lsrs	r3, r3, #16
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d10c      	bne.n	8003faa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	43da      	mvns	r2, r3
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	bf14      	ite	ne
 8003fa2:	2301      	movne	r3, #1
 8003fa4:	2300      	moveq	r3, #0
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	e00b      	b.n	8003fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	43da      	mvns	r2, r3
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	bf14      	ite	ne
 8003fbc:	2301      	movne	r3, #1
 8003fbe:	2300      	moveq	r3, #0
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d016      	beq.n	8003ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe0:	f043 0220 	orr.w	r2, r3, #32
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e021      	b.n	8004038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	0c1b      	lsrs	r3, r3, #16
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d10c      	bne.n	8004018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	43da      	mvns	r2, r3
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	4013      	ands	r3, r2
 800400a:	b29b      	uxth	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	bf14      	ite	ne
 8004010:	2301      	movne	r3, #1
 8004012:	2300      	moveq	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	e00b      	b.n	8004030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	43da      	mvns	r2, r3
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4013      	ands	r3, r2
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	bf14      	ite	ne
 800402a:	2301      	movne	r3, #1
 800402c:	2300      	moveq	r3, #0
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	f47f af6d 	bne.w	8003f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800404c:	e034      	b.n	80040b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 f886 	bl	8004160 <I2C_IsAcknowledgeFailed>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e034      	b.n	80040c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004064:	d028      	beq.n	80040b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004066:	f7fe fb6f 	bl	8002748 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	429a      	cmp	r2, r3
 8004074:	d302      	bcc.n	800407c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d11d      	bne.n	80040b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004086:	2b80      	cmp	r3, #128	@ 0x80
 8004088:	d016      	beq.n	80040b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a4:	f043 0220 	orr.w	r2, r3, #32
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e007      	b.n	80040c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c2:	2b80      	cmp	r3, #128	@ 0x80
 80040c4:	d1c3      	bne.n	800404e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040dc:	e034      	b.n	8004148 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 f83e 	bl	8004160 <I2C_IsAcknowledgeFailed>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e034      	b.n	8004158 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f4:	d028      	beq.n	8004148 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040f6:	f7fe fb27 	bl	8002748 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	429a      	cmp	r2, r3
 8004104:	d302      	bcc.n	800410c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d11d      	bne.n	8004148 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f003 0304 	and.w	r3, r3, #4
 8004116:	2b04      	cmp	r3, #4
 8004118:	d016      	beq.n	8004148 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2220      	movs	r2, #32
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004134:	f043 0220 	orr.w	r2, r3, #32
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e007      	b.n	8004158 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	f003 0304 	and.w	r3, r3, #4
 8004152:	2b04      	cmp	r3, #4
 8004154:	d1c3      	bne.n	80040de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004176:	d11b      	bne.n	80041b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004180:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419c:	f043 0204 	orr.w	r2, r3, #4
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
	...

080041c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e267      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d075      	beq.n	80042ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041de:	4b88      	ldr	r3, [pc, #544]	@ (8004400 <HAL_RCC_OscConfig+0x240>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d00c      	beq.n	8004204 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ea:	4b85      	ldr	r3, [pc, #532]	@ (8004400 <HAL_RCC_OscConfig+0x240>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	d112      	bne.n	800421c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041f6:	4b82      	ldr	r3, [pc, #520]	@ (8004400 <HAL_RCC_OscConfig+0x240>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004202:	d10b      	bne.n	800421c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004204:	4b7e      	ldr	r3, [pc, #504]	@ (8004400 <HAL_RCC_OscConfig+0x240>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d05b      	beq.n	80042c8 <HAL_RCC_OscConfig+0x108>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d157      	bne.n	80042c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e242      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004224:	d106      	bne.n	8004234 <HAL_RCC_OscConfig+0x74>
 8004226:	4b76      	ldr	r3, [pc, #472]	@ (8004400 <HAL_RCC_OscConfig+0x240>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a75      	ldr	r2, [pc, #468]	@ (8004400 <HAL_RCC_OscConfig+0x240>)
 800422c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	e01d      	b.n	8004270 <HAL_RCC_OscConfig+0xb0>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800423c:	d10c      	bne.n	8004258 <HAL_RCC_OscConfig+0x98>
 800423e:	4b70      	ldr	r3, [pc, #448]	@ (8004400 <HAL_RCC_OscConfig+0x240>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a6f      	ldr	r2, [pc, #444]	@ (8004400 <HAL_RCC_OscConfig+0x240>)
 8004244:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	4b6d      	ldr	r3, [pc, #436]	@ (8004400 <HAL_RCC_OscConfig+0x240>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a6c      	ldr	r2, [pc, #432]	@ (8004400 <HAL_RCC_OscConfig+0x240>)
 8004250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	e00b      	b.n	8004270 <HAL_RCC_OscConfig+0xb0>
 8004258:	4b69      	ldr	r3, [pc, #420]	@ (8004400 <HAL_RCC_OscConfig+0x240>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a68      	ldr	r2, [pc, #416]	@ (8004400 <HAL_RCC_OscConfig+0x240>)
 800425e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	4b66      	ldr	r3, [pc, #408]	@ (8004400 <HAL_RCC_OscConfig+0x240>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a65      	ldr	r2, [pc, #404]	@ (8004400 <HAL_RCC_OscConfig+0x240>)
 800426a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800426e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d013      	beq.n	80042a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004278:	f7fe fa66 	bl	8002748 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004280:	f7fe fa62 	bl	8002748 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b64      	cmp	r3, #100	@ 0x64
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e207      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004292:	4b5b      	ldr	r3, [pc, #364]	@ (8004400 <HAL_RCC_OscConfig+0x240>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0xc0>
 800429e:	e014      	b.n	80042ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a0:	f7fe fa52 	bl	8002748 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042a8:	f7fe fa4e 	bl	8002748 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b64      	cmp	r3, #100	@ 0x64
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e1f3      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ba:	4b51      	ldr	r3, [pc, #324]	@ (8004400 <HAL_RCC_OscConfig+0x240>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0xe8>
 80042c6:	e000      	b.n	80042ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d063      	beq.n	800439e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042d6:	4b4a      	ldr	r3, [pc, #296]	@ (8004400 <HAL_RCC_OscConfig+0x240>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00b      	beq.n	80042fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042e2:	4b47      	ldr	r3, [pc, #284]	@ (8004400 <HAL_RCC_OscConfig+0x240>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d11c      	bne.n	8004328 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ee:	4b44      	ldr	r3, [pc, #272]	@ (8004400 <HAL_RCC_OscConfig+0x240>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d116      	bne.n	8004328 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042fa:	4b41      	ldr	r3, [pc, #260]	@ (8004400 <HAL_RCC_OscConfig+0x240>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d005      	beq.n	8004312 <HAL_RCC_OscConfig+0x152>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d001      	beq.n	8004312 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e1c7      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004312:	4b3b      	ldr	r3, [pc, #236]	@ (8004400 <HAL_RCC_OscConfig+0x240>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	4937      	ldr	r1, [pc, #220]	@ (8004400 <HAL_RCC_OscConfig+0x240>)
 8004322:	4313      	orrs	r3, r2
 8004324:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004326:	e03a      	b.n	800439e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d020      	beq.n	8004372 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004330:	4b34      	ldr	r3, [pc, #208]	@ (8004404 <HAL_RCC_OscConfig+0x244>)
 8004332:	2201      	movs	r2, #1
 8004334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004336:	f7fe fa07 	bl	8002748 <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800433e:	f7fe fa03 	bl	8002748 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e1a8      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004350:	4b2b      	ldr	r3, [pc, #172]	@ (8004400 <HAL_RCC_OscConfig+0x240>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0f0      	beq.n	800433e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435c:	4b28      	ldr	r3, [pc, #160]	@ (8004400 <HAL_RCC_OscConfig+0x240>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	4925      	ldr	r1, [pc, #148]	@ (8004400 <HAL_RCC_OscConfig+0x240>)
 800436c:	4313      	orrs	r3, r2
 800436e:	600b      	str	r3, [r1, #0]
 8004370:	e015      	b.n	800439e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004372:	4b24      	ldr	r3, [pc, #144]	@ (8004404 <HAL_RCC_OscConfig+0x244>)
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004378:	f7fe f9e6 	bl	8002748 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004380:	f7fe f9e2 	bl	8002748 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e187      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004392:	4b1b      	ldr	r3, [pc, #108]	@ (8004400 <HAL_RCC_OscConfig+0x240>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d036      	beq.n	8004418 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d016      	beq.n	80043e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043b2:	4b15      	ldr	r3, [pc, #84]	@ (8004408 <HAL_RCC_OscConfig+0x248>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b8:	f7fe f9c6 	bl	8002748 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043c0:	f7fe f9c2 	bl	8002748 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e167      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004400 <HAL_RCC_OscConfig+0x240>)
 80043d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0x200>
 80043de:	e01b      	b.n	8004418 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043e0:	4b09      	ldr	r3, [pc, #36]	@ (8004408 <HAL_RCC_OscConfig+0x248>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e6:	f7fe f9af 	bl	8002748 <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ec:	e00e      	b.n	800440c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ee:	f7fe f9ab 	bl	8002748 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d907      	bls.n	800440c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e150      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
 8004400:	40023800 	.word	0x40023800
 8004404:	42470000 	.word	0x42470000
 8004408:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800440c:	4b88      	ldr	r3, [pc, #544]	@ (8004630 <HAL_RCC_OscConfig+0x470>)
 800440e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1ea      	bne.n	80043ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 8097 	beq.w	8004554 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004426:	2300      	movs	r3, #0
 8004428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800442a:	4b81      	ldr	r3, [pc, #516]	@ (8004630 <HAL_RCC_OscConfig+0x470>)
 800442c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10f      	bne.n	8004456 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004436:	2300      	movs	r3, #0
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	4b7d      	ldr	r3, [pc, #500]	@ (8004630 <HAL_RCC_OscConfig+0x470>)
 800443c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443e:	4a7c      	ldr	r2, [pc, #496]	@ (8004630 <HAL_RCC_OscConfig+0x470>)
 8004440:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004444:	6413      	str	r3, [r2, #64]	@ 0x40
 8004446:	4b7a      	ldr	r3, [pc, #488]	@ (8004630 <HAL_RCC_OscConfig+0x470>)
 8004448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800444e:	60bb      	str	r3, [r7, #8]
 8004450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004452:	2301      	movs	r3, #1
 8004454:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004456:	4b77      	ldr	r3, [pc, #476]	@ (8004634 <HAL_RCC_OscConfig+0x474>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800445e:	2b00      	cmp	r3, #0
 8004460:	d118      	bne.n	8004494 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004462:	4b74      	ldr	r3, [pc, #464]	@ (8004634 <HAL_RCC_OscConfig+0x474>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a73      	ldr	r2, [pc, #460]	@ (8004634 <HAL_RCC_OscConfig+0x474>)
 8004468:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800446c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800446e:	f7fe f96b 	bl	8002748 <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004474:	e008      	b.n	8004488 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004476:	f7fe f967 	bl	8002748 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e10c      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004488:	4b6a      	ldr	r3, [pc, #424]	@ (8004634 <HAL_RCC_OscConfig+0x474>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0f0      	beq.n	8004476 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d106      	bne.n	80044aa <HAL_RCC_OscConfig+0x2ea>
 800449c:	4b64      	ldr	r3, [pc, #400]	@ (8004630 <HAL_RCC_OscConfig+0x470>)
 800449e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a0:	4a63      	ldr	r2, [pc, #396]	@ (8004630 <HAL_RCC_OscConfig+0x470>)
 80044a2:	f043 0301 	orr.w	r3, r3, #1
 80044a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80044a8:	e01c      	b.n	80044e4 <HAL_RCC_OscConfig+0x324>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2b05      	cmp	r3, #5
 80044b0:	d10c      	bne.n	80044cc <HAL_RCC_OscConfig+0x30c>
 80044b2:	4b5f      	ldr	r3, [pc, #380]	@ (8004630 <HAL_RCC_OscConfig+0x470>)
 80044b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b6:	4a5e      	ldr	r2, [pc, #376]	@ (8004630 <HAL_RCC_OscConfig+0x470>)
 80044b8:	f043 0304 	orr.w	r3, r3, #4
 80044bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80044be:	4b5c      	ldr	r3, [pc, #368]	@ (8004630 <HAL_RCC_OscConfig+0x470>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044c2:	4a5b      	ldr	r2, [pc, #364]	@ (8004630 <HAL_RCC_OscConfig+0x470>)
 80044c4:	f043 0301 	orr.w	r3, r3, #1
 80044c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80044ca:	e00b      	b.n	80044e4 <HAL_RCC_OscConfig+0x324>
 80044cc:	4b58      	ldr	r3, [pc, #352]	@ (8004630 <HAL_RCC_OscConfig+0x470>)
 80044ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044d0:	4a57      	ldr	r2, [pc, #348]	@ (8004630 <HAL_RCC_OscConfig+0x470>)
 80044d2:	f023 0301 	bic.w	r3, r3, #1
 80044d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80044d8:	4b55      	ldr	r3, [pc, #340]	@ (8004630 <HAL_RCC_OscConfig+0x470>)
 80044da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044dc:	4a54      	ldr	r2, [pc, #336]	@ (8004630 <HAL_RCC_OscConfig+0x470>)
 80044de:	f023 0304 	bic.w	r3, r3, #4
 80044e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d015      	beq.n	8004518 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ec:	f7fe f92c 	bl	8002748 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f2:	e00a      	b.n	800450a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044f4:	f7fe f928 	bl	8002748 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004502:	4293      	cmp	r3, r2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e0cb      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450a:	4b49      	ldr	r3, [pc, #292]	@ (8004630 <HAL_RCC_OscConfig+0x470>)
 800450c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0ee      	beq.n	80044f4 <HAL_RCC_OscConfig+0x334>
 8004516:	e014      	b.n	8004542 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004518:	f7fe f916 	bl	8002748 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800451e:	e00a      	b.n	8004536 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004520:	f7fe f912 	bl	8002748 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800452e:	4293      	cmp	r3, r2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e0b5      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004536:	4b3e      	ldr	r3, [pc, #248]	@ (8004630 <HAL_RCC_OscConfig+0x470>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1ee      	bne.n	8004520 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004542:	7dfb      	ldrb	r3, [r7, #23]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d105      	bne.n	8004554 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004548:	4b39      	ldr	r3, [pc, #228]	@ (8004630 <HAL_RCC_OscConfig+0x470>)
 800454a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454c:	4a38      	ldr	r2, [pc, #224]	@ (8004630 <HAL_RCC_OscConfig+0x470>)
 800454e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004552:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 80a1 	beq.w	80046a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800455e:	4b34      	ldr	r3, [pc, #208]	@ (8004630 <HAL_RCC_OscConfig+0x470>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 030c 	and.w	r3, r3, #12
 8004566:	2b08      	cmp	r3, #8
 8004568:	d05c      	beq.n	8004624 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d141      	bne.n	80045f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004572:	4b31      	ldr	r3, [pc, #196]	@ (8004638 <HAL_RCC_OscConfig+0x478>)
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004578:	f7fe f8e6 	bl	8002748 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004580:	f7fe f8e2 	bl	8002748 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e087      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004592:	4b27      	ldr	r3, [pc, #156]	@ (8004630 <HAL_RCC_OscConfig+0x470>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f0      	bne.n	8004580 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69da      	ldr	r2, [r3, #28]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ac:	019b      	lsls	r3, r3, #6
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b4:	085b      	lsrs	r3, r3, #1
 80045b6:	3b01      	subs	r3, #1
 80045b8:	041b      	lsls	r3, r3, #16
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c0:	061b      	lsls	r3, r3, #24
 80045c2:	491b      	ldr	r1, [pc, #108]	@ (8004630 <HAL_RCC_OscConfig+0x470>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004638 <HAL_RCC_OscConfig+0x478>)
 80045ca:	2201      	movs	r2, #1
 80045cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ce:	f7fe f8bb 	bl	8002748 <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045d6:	f7fe f8b7 	bl	8002748 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e05c      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e8:	4b11      	ldr	r3, [pc, #68]	@ (8004630 <HAL_RCC_OscConfig+0x470>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0f0      	beq.n	80045d6 <HAL_RCC_OscConfig+0x416>
 80045f4:	e054      	b.n	80046a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f6:	4b10      	ldr	r3, [pc, #64]	@ (8004638 <HAL_RCC_OscConfig+0x478>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fc:	f7fe f8a4 	bl	8002748 <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004604:	f7fe f8a0 	bl	8002748 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e045      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004616:	4b06      	ldr	r3, [pc, #24]	@ (8004630 <HAL_RCC_OscConfig+0x470>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1f0      	bne.n	8004604 <HAL_RCC_OscConfig+0x444>
 8004622:	e03d      	b.n	80046a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d107      	bne.n	800463c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e038      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
 8004630:	40023800 	.word	0x40023800
 8004634:	40007000 	.word	0x40007000
 8004638:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800463c:	4b1b      	ldr	r3, [pc, #108]	@ (80046ac <HAL_RCC_OscConfig+0x4ec>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d028      	beq.n	800469c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004654:	429a      	cmp	r2, r3
 8004656:	d121      	bne.n	800469c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004662:	429a      	cmp	r2, r3
 8004664:	d11a      	bne.n	800469c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800466c:	4013      	ands	r3, r2
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004672:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004674:	4293      	cmp	r3, r2
 8004676:	d111      	bne.n	800469c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004682:	085b      	lsrs	r3, r3, #1
 8004684:	3b01      	subs	r3, #1
 8004686:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004688:	429a      	cmp	r2, r3
 800468a:	d107      	bne.n	800469c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004696:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004698:	429a      	cmp	r2, r3
 800469a:	d001      	beq.n	80046a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e000      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40023800 	.word	0x40023800

080046b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e0cc      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046c4:	4b68      	ldr	r3, [pc, #416]	@ (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0307 	and.w	r3, r3, #7
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d90c      	bls.n	80046ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d2:	4b65      	ldr	r3, [pc, #404]	@ (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	b2d2      	uxtb	r2, r2
 80046d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046da:	4b63      	ldr	r3, [pc, #396]	@ (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d001      	beq.n	80046ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e0b8      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d020      	beq.n	800473a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	d005      	beq.n	8004710 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004704:	4b59      	ldr	r3, [pc, #356]	@ (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	4a58      	ldr	r2, [pc, #352]	@ (800486c <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800470e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0308 	and.w	r3, r3, #8
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800471c:	4b53      	ldr	r3, [pc, #332]	@ (800486c <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	4a52      	ldr	r2, [pc, #328]	@ (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004726:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004728:	4b50      	ldr	r3, [pc, #320]	@ (800486c <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	494d      	ldr	r1, [pc, #308]	@ (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	4313      	orrs	r3, r2
 8004738:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d044      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d107      	bne.n	800475e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800474e:	4b47      	ldr	r3, [pc, #284]	@ (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d119      	bne.n	800478e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e07f      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	2b02      	cmp	r3, #2
 8004764:	d003      	beq.n	800476e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800476a:	2b03      	cmp	r3, #3
 800476c:	d107      	bne.n	800477e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800476e:	4b3f      	ldr	r3, [pc, #252]	@ (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d109      	bne.n	800478e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e06f      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800477e:	4b3b      	ldr	r3, [pc, #236]	@ (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e067      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800478e:	4b37      	ldr	r3, [pc, #220]	@ (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f023 0203 	bic.w	r2, r3, #3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	4934      	ldr	r1, [pc, #208]	@ (800486c <HAL_RCC_ClockConfig+0x1bc>)
 800479c:	4313      	orrs	r3, r2
 800479e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047a0:	f7fd ffd2 	bl	8002748 <HAL_GetTick>
 80047a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a6:	e00a      	b.n	80047be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a8:	f7fd ffce 	bl	8002748 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e04f      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047be:	4b2b      	ldr	r3, [pc, #172]	@ (800486c <HAL_RCC_ClockConfig+0x1bc>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 020c 	and.w	r2, r3, #12
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d1eb      	bne.n	80047a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047d0:	4b25      	ldr	r3, [pc, #148]	@ (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d20c      	bcs.n	80047f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047de:	4b22      	ldr	r3, [pc, #136]	@ (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	b2d2      	uxtb	r2, r2
 80047e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047e6:	4b20      	ldr	r3, [pc, #128]	@ (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0307 	and.w	r3, r3, #7
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d001      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e032      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	d008      	beq.n	8004816 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004804:	4b19      	ldr	r3, [pc, #100]	@ (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	4916      	ldr	r1, [pc, #88]	@ (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	4313      	orrs	r3, r2
 8004814:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b00      	cmp	r3, #0
 8004820:	d009      	beq.n	8004836 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004822:	4b12      	ldr	r3, [pc, #72]	@ (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	490e      	ldr	r1, [pc, #56]	@ (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	4313      	orrs	r3, r2
 8004834:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004836:	f000 f821 	bl	800487c <HAL_RCC_GetSysClockFreq>
 800483a:	4602      	mov	r2, r0
 800483c:	4b0b      	ldr	r3, [pc, #44]	@ (800486c <HAL_RCC_ClockConfig+0x1bc>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	091b      	lsrs	r3, r3, #4
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	490a      	ldr	r1, [pc, #40]	@ (8004870 <HAL_RCC_ClockConfig+0x1c0>)
 8004848:	5ccb      	ldrb	r3, [r1, r3]
 800484a:	fa22 f303 	lsr.w	r3, r2, r3
 800484e:	4a09      	ldr	r2, [pc, #36]	@ (8004874 <HAL_RCC_ClockConfig+0x1c4>)
 8004850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004852:	4b09      	ldr	r3, [pc, #36]	@ (8004878 <HAL_RCC_ClockConfig+0x1c8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	f7fd ff32 	bl	80026c0 <HAL_InitTick>

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40023c00 	.word	0x40023c00
 800486c:	40023800 	.word	0x40023800
 8004870:	0800a464 	.word	0x0800a464
 8004874:	20000000 	.word	0x20000000
 8004878:	20000004 	.word	0x20000004

0800487c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800487c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004880:	b094      	sub	sp, #80	@ 0x50
 8004882:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	647b      	str	r3, [r7, #68]	@ 0x44
 8004888:	2300      	movs	r3, #0
 800488a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800488c:	2300      	movs	r3, #0
 800488e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004894:	4b79      	ldr	r3, [pc, #484]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f003 030c 	and.w	r3, r3, #12
 800489c:	2b08      	cmp	r3, #8
 800489e:	d00d      	beq.n	80048bc <HAL_RCC_GetSysClockFreq+0x40>
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	f200 80e1 	bhi.w	8004a68 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <HAL_RCC_GetSysClockFreq+0x34>
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d003      	beq.n	80048b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80048ae:	e0db      	b.n	8004a68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048b0:	4b73      	ldr	r3, [pc, #460]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x204>)
 80048b2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80048b4:	e0db      	b.n	8004a6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048b6:	4b73      	ldr	r3, [pc, #460]	@ (8004a84 <HAL_RCC_GetSysClockFreq+0x208>)
 80048b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048ba:	e0d8      	b.n	8004a6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048bc:	4b6f      	ldr	r3, [pc, #444]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x200>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048c6:	4b6d      	ldr	r3, [pc, #436]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x200>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d063      	beq.n	800499a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048d2:	4b6a      	ldr	r3, [pc, #424]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x200>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	099b      	lsrs	r3, r3, #6
 80048d8:	2200      	movs	r2, #0
 80048da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80048de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80048e6:	2300      	movs	r3, #0
 80048e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80048ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80048ee:	4622      	mov	r2, r4
 80048f0:	462b      	mov	r3, r5
 80048f2:	f04f 0000 	mov.w	r0, #0
 80048f6:	f04f 0100 	mov.w	r1, #0
 80048fa:	0159      	lsls	r1, r3, #5
 80048fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004900:	0150      	lsls	r0, r2, #5
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	4621      	mov	r1, r4
 8004908:	1a51      	subs	r1, r2, r1
 800490a:	6139      	str	r1, [r7, #16]
 800490c:	4629      	mov	r1, r5
 800490e:	eb63 0301 	sbc.w	r3, r3, r1
 8004912:	617b      	str	r3, [r7, #20]
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004920:	4659      	mov	r1, fp
 8004922:	018b      	lsls	r3, r1, #6
 8004924:	4651      	mov	r1, sl
 8004926:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800492a:	4651      	mov	r1, sl
 800492c:	018a      	lsls	r2, r1, #6
 800492e:	4651      	mov	r1, sl
 8004930:	ebb2 0801 	subs.w	r8, r2, r1
 8004934:	4659      	mov	r1, fp
 8004936:	eb63 0901 	sbc.w	r9, r3, r1
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004946:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800494a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800494e:	4690      	mov	r8, r2
 8004950:	4699      	mov	r9, r3
 8004952:	4623      	mov	r3, r4
 8004954:	eb18 0303 	adds.w	r3, r8, r3
 8004958:	60bb      	str	r3, [r7, #8]
 800495a:	462b      	mov	r3, r5
 800495c:	eb49 0303 	adc.w	r3, r9, r3
 8004960:	60fb      	str	r3, [r7, #12]
 8004962:	f04f 0200 	mov.w	r2, #0
 8004966:	f04f 0300 	mov.w	r3, #0
 800496a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800496e:	4629      	mov	r1, r5
 8004970:	024b      	lsls	r3, r1, #9
 8004972:	4621      	mov	r1, r4
 8004974:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004978:	4621      	mov	r1, r4
 800497a:	024a      	lsls	r2, r1, #9
 800497c:	4610      	mov	r0, r2
 800497e:	4619      	mov	r1, r3
 8004980:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004982:	2200      	movs	r2, #0
 8004984:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004986:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004988:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800498c:	f7fc f95c 	bl	8000c48 <__aeabi_uldivmod>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4613      	mov	r3, r2
 8004996:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004998:	e058      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800499a:	4b38      	ldr	r3, [pc, #224]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x200>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	099b      	lsrs	r3, r3, #6
 80049a0:	2200      	movs	r2, #0
 80049a2:	4618      	mov	r0, r3
 80049a4:	4611      	mov	r1, r2
 80049a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049aa:	623b      	str	r3, [r7, #32]
 80049ac:	2300      	movs	r3, #0
 80049ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80049b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049b4:	4642      	mov	r2, r8
 80049b6:	464b      	mov	r3, r9
 80049b8:	f04f 0000 	mov.w	r0, #0
 80049bc:	f04f 0100 	mov.w	r1, #0
 80049c0:	0159      	lsls	r1, r3, #5
 80049c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049c6:	0150      	lsls	r0, r2, #5
 80049c8:	4602      	mov	r2, r0
 80049ca:	460b      	mov	r3, r1
 80049cc:	4641      	mov	r1, r8
 80049ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80049d2:	4649      	mov	r1, r9
 80049d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80049d8:	f04f 0200 	mov.w	r2, #0
 80049dc:	f04f 0300 	mov.w	r3, #0
 80049e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049ec:	ebb2 040a 	subs.w	r4, r2, sl
 80049f0:	eb63 050b 	sbc.w	r5, r3, fp
 80049f4:	f04f 0200 	mov.w	r2, #0
 80049f8:	f04f 0300 	mov.w	r3, #0
 80049fc:	00eb      	lsls	r3, r5, #3
 80049fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a02:	00e2      	lsls	r2, r4, #3
 8004a04:	4614      	mov	r4, r2
 8004a06:	461d      	mov	r5, r3
 8004a08:	4643      	mov	r3, r8
 8004a0a:	18e3      	adds	r3, r4, r3
 8004a0c:	603b      	str	r3, [r7, #0]
 8004a0e:	464b      	mov	r3, r9
 8004a10:	eb45 0303 	adc.w	r3, r5, r3
 8004a14:	607b      	str	r3, [r7, #4]
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	f04f 0300 	mov.w	r3, #0
 8004a1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a22:	4629      	mov	r1, r5
 8004a24:	028b      	lsls	r3, r1, #10
 8004a26:	4621      	mov	r1, r4
 8004a28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	028a      	lsls	r2, r1, #10
 8004a30:	4610      	mov	r0, r2
 8004a32:	4619      	mov	r1, r3
 8004a34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a36:	2200      	movs	r2, #0
 8004a38:	61bb      	str	r3, [r7, #24]
 8004a3a:	61fa      	str	r2, [r7, #28]
 8004a3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a40:	f7fc f902 	bl	8000c48 <__aeabi_uldivmod>
 8004a44:	4602      	mov	r2, r0
 8004a46:	460b      	mov	r3, r1
 8004a48:	4613      	mov	r3, r2
 8004a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	0c1b      	lsrs	r3, r3, #16
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	3301      	adds	r3, #1
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004a5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a66:	e002      	b.n	8004a6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a68:	4b05      	ldr	r3, [pc, #20]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3750      	adds	r7, #80	@ 0x50
 8004a74:	46bd      	mov	sp, r7
 8004a76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	00f42400 	.word	0x00f42400
 8004a84:	007a1200 	.word	0x007a1200

08004a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a8c:	4b03      	ldr	r3, [pc, #12]	@ (8004a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	20000000 	.word	0x20000000

08004aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004aa4:	f7ff fff0 	bl	8004a88 <HAL_RCC_GetHCLKFreq>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	4b05      	ldr	r3, [pc, #20]	@ (8004ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	0a9b      	lsrs	r3, r3, #10
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	4903      	ldr	r1, [pc, #12]	@ (8004ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ab6:	5ccb      	ldrb	r3, [r1, r3]
 8004ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	0800a474 	.word	0x0800a474

08004ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004acc:	f7ff ffdc 	bl	8004a88 <HAL_RCC_GetHCLKFreq>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	4b05      	ldr	r3, [pc, #20]	@ (8004ae8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	0b5b      	lsrs	r3, r3, #13
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	4903      	ldr	r1, [pc, #12]	@ (8004aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ade:	5ccb      	ldrb	r3, [r1, r3]
 8004ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	0800a474 	.word	0x0800a474

08004af0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e042      	b.n	8004b88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d106      	bne.n	8004b1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7fd fbd4 	bl	80022c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2224      	movs	r2, #36	@ 0x24
 8004b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 fd69 	bl	800560c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	691a      	ldr	r2, [r3, #16]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695a      	ldr	r2, [r3, #20]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08a      	sub	sp, #40	@ 0x28
 8004b94:	af02      	add	r7, sp, #8
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b20      	cmp	r3, #32
 8004bae:	d175      	bne.n	8004c9c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d002      	beq.n	8004bbc <HAL_UART_Transmit+0x2c>
 8004bb6:	88fb      	ldrh	r3, [r7, #6]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e06e      	b.n	8004c9e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2221      	movs	r2, #33	@ 0x21
 8004bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bce:	f7fd fdbb 	bl	8002748 <HAL_GetTick>
 8004bd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	88fa      	ldrh	r2, [r7, #6]
 8004bd8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	88fa      	ldrh	r2, [r7, #6]
 8004bde:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004be8:	d108      	bne.n	8004bfc <HAL_UART_Transmit+0x6c>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d104      	bne.n	8004bfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	61bb      	str	r3, [r7, #24]
 8004bfa:	e003      	b.n	8004c04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c00:	2300      	movs	r3, #0
 8004c02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c04:	e02e      	b.n	8004c64 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2180      	movs	r1, #128	@ 0x80
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 fb05 	bl	8005220 <UART_WaitOnFlagUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e03a      	b.n	8004c9e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10b      	bne.n	8004c46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	461a      	mov	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	3302      	adds	r3, #2
 8004c42:	61bb      	str	r3, [r7, #24]
 8004c44:	e007      	b.n	8004c56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	781a      	ldrb	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	3301      	adds	r3, #1
 8004c54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1cb      	bne.n	8004c06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2200      	movs	r2, #0
 8004c76:	2140      	movs	r1, #64	@ 0x40
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 fad1 	bl	8005220 <UART_WaitOnFlagUntilTimeout>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d005      	beq.n	8004c90 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e006      	b.n	8004c9e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	e000      	b.n	8004c9e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c9c:	2302      	movs	r3, #2
  }
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3720      	adds	r7, #32
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
	...

08004ca8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b0ba      	sub	sp, #232	@ 0xe8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004ce6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10f      	bne.n	8004d0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cf2:	f003 0320 	and.w	r3, r3, #32
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d009      	beq.n	8004d0e <HAL_UART_IRQHandler+0x66>
 8004cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cfe:	f003 0320 	and.w	r3, r3, #32
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fbc2 	bl	8005490 <UART_Receive_IT>
      return;
 8004d0c:	e25b      	b.n	80051c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 80de 	beq.w	8004ed4 <HAL_UART_IRQHandler+0x22c>
 8004d18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d106      	bne.n	8004d32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d28:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 80d1 	beq.w	8004ed4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00b      	beq.n	8004d56 <HAL_UART_IRQHandler+0xae>
 8004d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d005      	beq.n	8004d56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4e:	f043 0201 	orr.w	r2, r3, #1
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d5a:	f003 0304 	and.w	r3, r3, #4
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00b      	beq.n	8004d7a <HAL_UART_IRQHandler+0xd2>
 8004d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d005      	beq.n	8004d7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d72:	f043 0202 	orr.w	r2, r3, #2
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00b      	beq.n	8004d9e <HAL_UART_IRQHandler+0xf6>
 8004d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d005      	beq.n	8004d9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d96:	f043 0204 	orr.w	r2, r3, #4
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004da2:	f003 0308 	and.w	r3, r3, #8
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d011      	beq.n	8004dce <HAL_UART_IRQHandler+0x126>
 8004daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dae:	f003 0320 	and.w	r3, r3, #32
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d105      	bne.n	8004dc2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004db6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d005      	beq.n	8004dce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dc6:	f043 0208 	orr.w	r2, r3, #8
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 81f2 	beq.w	80051bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ddc:	f003 0320 	and.w	r3, r3, #32
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d008      	beq.n	8004df6 <HAL_UART_IRQHandler+0x14e>
 8004de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004de8:	f003 0320 	and.w	r3, r3, #32
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d002      	beq.n	8004df6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 fb4d 	bl	8005490 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e00:	2b40      	cmp	r3, #64	@ 0x40
 8004e02:	bf0c      	ite	eq
 8004e04:	2301      	moveq	r3, #1
 8004e06:	2300      	movne	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d103      	bne.n	8004e22 <HAL_UART_IRQHandler+0x17a>
 8004e1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d04f      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fa55 	bl	80052d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e32:	2b40      	cmp	r3, #64	@ 0x40
 8004e34:	d141      	bne.n	8004eba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	3314      	adds	r3, #20
 8004e3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e44:	e853 3f00 	ldrex	r3, [r3]
 8004e48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004e4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	3314      	adds	r3, #20
 8004e5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004e62:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004e66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004e6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004e72:	e841 2300 	strex	r3, r2, [r1]
 8004e76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1d9      	bne.n	8004e36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d013      	beq.n	8004eb2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e8e:	4a7e      	ldr	r2, [pc, #504]	@ (8005088 <HAL_UART_IRQHandler+0x3e0>)
 8004e90:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fe fb0b 	bl	80034b2 <HAL_DMA_Abort_IT>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d016      	beq.n	8004ed0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004eac:	4610      	mov	r0, r2
 8004eae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb0:	e00e      	b.n	8004ed0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f99e 	bl	80051f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb8:	e00a      	b.n	8004ed0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f99a 	bl	80051f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec0:	e006      	b.n	8004ed0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f996 	bl	80051f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004ece:	e175      	b.n	80051bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ed0:	bf00      	nop
    return;
 8004ed2:	e173      	b.n	80051bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	f040 814f 	bne.w	800517c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ee2:	f003 0310 	and.w	r3, r3, #16
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f000 8148 	beq.w	800517c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ef0:	f003 0310 	and.w	r3, r3, #16
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 8141 	beq.w	800517c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004efa:	2300      	movs	r3, #0
 8004efc:	60bb      	str	r3, [r7, #8]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	60bb      	str	r3, [r7, #8]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	60bb      	str	r3, [r7, #8]
 8004f0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f1a:	2b40      	cmp	r3, #64	@ 0x40
 8004f1c:	f040 80b6 	bne.w	800508c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 8145 	beq.w	80051c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	f080 813e 	bcs.w	80051c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f4a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f56:	f000 8088 	beq.w	800506a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	330c      	adds	r3, #12
 8004f60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f68:	e853 3f00 	ldrex	r3, [r3]
 8004f6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004f70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	330c      	adds	r3, #12
 8004f82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004f86:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f92:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f96:	e841 2300 	strex	r3, r2, [r1]
 8004f9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1d9      	bne.n	8004f5a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3314      	adds	r3, #20
 8004fac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fb0:	e853 3f00 	ldrex	r3, [r3]
 8004fb4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004fb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004fb8:	f023 0301 	bic.w	r3, r3, #1
 8004fbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	3314      	adds	r3, #20
 8004fc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004fca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004fce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004fd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004fd6:	e841 2300 	strex	r3, r2, [r1]
 8004fda:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004fdc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1e1      	bne.n	8004fa6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3314      	adds	r3, #20
 8004fe8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fec:	e853 3f00 	ldrex	r3, [r3]
 8004ff0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004ff2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ff4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ff8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	3314      	adds	r3, #20
 8005002:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005006:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005008:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800500c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800500e:	e841 2300 	strex	r3, r2, [r1]
 8005012:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005014:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1e3      	bne.n	8004fe2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2220      	movs	r2, #32
 800501e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	330c      	adds	r3, #12
 800502e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005030:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005032:	e853 3f00 	ldrex	r3, [r3]
 8005036:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005038:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800503a:	f023 0310 	bic.w	r3, r3, #16
 800503e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	330c      	adds	r3, #12
 8005048:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800504c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800504e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005050:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005052:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005054:	e841 2300 	strex	r3, r2, [r1]
 8005058:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800505a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1e3      	bne.n	8005028 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005064:	4618      	mov	r0, r3
 8005066:	f7fe f9b4 	bl	80033d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2202      	movs	r2, #2
 800506e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005078:	b29b      	uxth	r3, r3
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	b29b      	uxth	r3, r3
 800507e:	4619      	mov	r1, r3
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 f8c1 	bl	8005208 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005086:	e09b      	b.n	80051c0 <HAL_UART_IRQHandler+0x518>
 8005088:	08005399 	.word	0x08005399
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005094:	b29b      	uxth	r3, r3
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 808e 	beq.w	80051c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80050a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 8089 	beq.w	80051c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	330c      	adds	r3, #12
 80050b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050bc:	e853 3f00 	ldrex	r3, [r3]
 80050c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	330c      	adds	r3, #12
 80050d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80050d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80050d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050de:	e841 2300 	strex	r3, r2, [r1]
 80050e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1e3      	bne.n	80050b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3314      	adds	r3, #20
 80050f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f4:	e853 3f00 	ldrex	r3, [r3]
 80050f8:	623b      	str	r3, [r7, #32]
   return(result);
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	f023 0301 	bic.w	r3, r3, #1
 8005100:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	3314      	adds	r3, #20
 800510a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800510e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005110:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005112:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005116:	e841 2300 	strex	r3, r2, [r1]
 800511a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800511c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1e3      	bne.n	80050ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2220      	movs	r2, #32
 8005126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	330c      	adds	r3, #12
 8005136:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	e853 3f00 	ldrex	r3, [r3]
 800513e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 0310 	bic.w	r3, r3, #16
 8005146:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	330c      	adds	r3, #12
 8005150:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005154:	61fa      	str	r2, [r7, #28]
 8005156:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005158:	69b9      	ldr	r1, [r7, #24]
 800515a:	69fa      	ldr	r2, [r7, #28]
 800515c:	e841 2300 	strex	r3, r2, [r1]
 8005160:	617b      	str	r3, [r7, #20]
   return(result);
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1e3      	bne.n	8005130 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2202      	movs	r2, #2
 800516c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800516e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005172:	4619      	mov	r1, r3
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f847 	bl	8005208 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800517a:	e023      	b.n	80051c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800517c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005184:	2b00      	cmp	r3, #0
 8005186:	d009      	beq.n	800519c <HAL_UART_IRQHandler+0x4f4>
 8005188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800518c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005190:	2b00      	cmp	r3, #0
 8005192:	d003      	beq.n	800519c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f913 	bl	80053c0 <UART_Transmit_IT>
    return;
 800519a:	e014      	b.n	80051c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800519c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00e      	beq.n	80051c6 <HAL_UART_IRQHandler+0x51e>
 80051a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d008      	beq.n	80051c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f953 	bl	8005460 <UART_EndTransmit_IT>
    return;
 80051ba:	e004      	b.n	80051c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80051bc:	bf00      	nop
 80051be:	e002      	b.n	80051c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80051c0:	bf00      	nop
 80051c2:	e000      	b.n	80051c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80051c4:	bf00      	nop
  }
}
 80051c6:	37e8      	adds	r7, #232	@ 0xe8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	460b      	mov	r3, r1
 8005212:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	603b      	str	r3, [r7, #0]
 800522c:	4613      	mov	r3, r2
 800522e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005230:	e03b      	b.n	80052aa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005238:	d037      	beq.n	80052aa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800523a:	f7fd fa85 	bl	8002748 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	6a3a      	ldr	r2, [r7, #32]
 8005246:	429a      	cmp	r2, r3
 8005248:	d302      	bcc.n	8005250 <UART_WaitOnFlagUntilTimeout+0x30>
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e03a      	b.n	80052ca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	f003 0304 	and.w	r3, r3, #4
 800525e:	2b00      	cmp	r3, #0
 8005260:	d023      	beq.n	80052aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2b80      	cmp	r3, #128	@ 0x80
 8005266:	d020      	beq.n	80052aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2b40      	cmp	r3, #64	@ 0x40
 800526c:	d01d      	beq.n	80052aa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0308 	and.w	r3, r3, #8
 8005278:	2b08      	cmp	r3, #8
 800527a:	d116      	bne.n	80052aa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800527c:	2300      	movs	r3, #0
 800527e:	617b      	str	r3, [r7, #20]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f000 f81d 	bl	80052d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2208      	movs	r2, #8
 800529c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e00f      	b.n	80052ca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	4013      	ands	r3, r2
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	bf0c      	ite	eq
 80052ba:	2301      	moveq	r3, #1
 80052bc:	2300      	movne	r3, #0
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	461a      	mov	r2, r3
 80052c2:	79fb      	ldrb	r3, [r7, #7]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d0b4      	beq.n	8005232 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3718      	adds	r7, #24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b095      	sub	sp, #84	@ 0x54
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	330c      	adds	r3, #12
 80052e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e4:	e853 3f00 	ldrex	r3, [r3]
 80052e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	330c      	adds	r3, #12
 80052f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80052fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005300:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005302:	e841 2300 	strex	r3, r2, [r1]
 8005306:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1e5      	bne.n	80052da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	3314      	adds	r3, #20
 8005314:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	e853 3f00 	ldrex	r3, [r3]
 800531c:	61fb      	str	r3, [r7, #28]
   return(result);
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	f023 0301 	bic.w	r3, r3, #1
 8005324:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3314      	adds	r3, #20
 800532c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800532e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005330:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005332:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005334:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005336:	e841 2300 	strex	r3, r2, [r1]
 800533a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800533c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1e5      	bne.n	800530e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005346:	2b01      	cmp	r3, #1
 8005348:	d119      	bne.n	800537e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	330c      	adds	r3, #12
 8005350:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	e853 3f00 	ldrex	r3, [r3]
 8005358:	60bb      	str	r3, [r7, #8]
   return(result);
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f023 0310 	bic.w	r3, r3, #16
 8005360:	647b      	str	r3, [r7, #68]	@ 0x44
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	330c      	adds	r3, #12
 8005368:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800536a:	61ba      	str	r2, [r7, #24]
 800536c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536e:	6979      	ldr	r1, [r7, #20]
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	e841 2300 	strex	r3, r2, [r1]
 8005376:	613b      	str	r3, [r7, #16]
   return(result);
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1e5      	bne.n	800534a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2220      	movs	r2, #32
 8005382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800538c:	bf00      	nop
 800538e:	3754      	adds	r7, #84	@ 0x54
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f7ff ff1e 	bl	80051f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053b8:	bf00      	nop
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b21      	cmp	r3, #33	@ 0x21
 80053d2:	d13e      	bne.n	8005452 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053dc:	d114      	bne.n	8005408 <UART_Transmit_IT+0x48>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d110      	bne.n	8005408 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	461a      	mov	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053fa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	1c9a      	adds	r2, r3, #2
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	621a      	str	r2, [r3, #32]
 8005406:	e008      	b.n	800541a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	1c59      	adds	r1, r3, #1
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	6211      	str	r1, [r2, #32]
 8005412:	781a      	ldrb	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800541e:	b29b      	uxth	r3, r3
 8005420:	3b01      	subs	r3, #1
 8005422:	b29b      	uxth	r3, r3
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	4619      	mov	r1, r3
 8005428:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10f      	bne.n	800544e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800543c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68da      	ldr	r2, [r3, #12]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800544c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800544e:	2300      	movs	r3, #0
 8005450:	e000      	b.n	8005454 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005452:	2302      	movs	r3, #2
  }
}
 8005454:	4618      	mov	r0, r3
 8005456:	3714      	adds	r7, #20
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68da      	ldr	r2, [r3, #12]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005476:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2220      	movs	r2, #32
 800547c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7ff fea3 	bl	80051cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08c      	sub	sp, #48	@ 0x30
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b22      	cmp	r3, #34	@ 0x22
 80054a2:	f040 80ae 	bne.w	8005602 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054ae:	d117      	bne.n	80054e0 <UART_Receive_IT+0x50>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d113      	bne.n	80054e0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80054b8:	2300      	movs	r3, #0
 80054ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d8:	1c9a      	adds	r2, r3, #2
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80054de:	e026      	b.n	800552e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80054e6:	2300      	movs	r3, #0
 80054e8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054f2:	d007      	beq.n	8005504 <UART_Receive_IT+0x74>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10a      	bne.n	8005512 <UART_Receive_IT+0x82>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d106      	bne.n	8005512 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	b2da      	uxtb	r2, r3
 800550c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800550e:	701a      	strb	r2, [r3, #0]
 8005510:	e008      	b.n	8005524 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	b2db      	uxtb	r3, r3
 800551a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800551e:	b2da      	uxtb	r2, r3
 8005520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005522:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005532:	b29b      	uxth	r3, r3
 8005534:	3b01      	subs	r3, #1
 8005536:	b29b      	uxth	r3, r3
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	4619      	mov	r1, r3
 800553c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800553e:	2b00      	cmp	r3, #0
 8005540:	d15d      	bne.n	80055fe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68da      	ldr	r2, [r3, #12]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0220 	bic.w	r2, r2, #32
 8005550:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68da      	ldr	r2, [r3, #12]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005560:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	695a      	ldr	r2, [r3, #20]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 0201 	bic.w	r2, r2, #1
 8005570:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2220      	movs	r2, #32
 8005576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005584:	2b01      	cmp	r3, #1
 8005586:	d135      	bne.n	80055f4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	330c      	adds	r3, #12
 8005594:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	e853 3f00 	ldrex	r3, [r3]
 800559c:	613b      	str	r3, [r7, #16]
   return(result);
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	f023 0310 	bic.w	r3, r3, #16
 80055a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	330c      	adds	r3, #12
 80055ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ae:	623a      	str	r2, [r7, #32]
 80055b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b2:	69f9      	ldr	r1, [r7, #28]
 80055b4:	6a3a      	ldr	r2, [r7, #32]
 80055b6:	e841 2300 	strex	r3, r2, [r1]
 80055ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1e5      	bne.n	800558e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0310 	and.w	r3, r3, #16
 80055cc:	2b10      	cmp	r3, #16
 80055ce:	d10a      	bne.n	80055e6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055d0:	2300      	movs	r3, #0
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80055ea:	4619      	mov	r1, r3
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7ff fe0b 	bl	8005208 <HAL_UARTEx_RxEventCallback>
 80055f2:	e002      	b.n	80055fa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7ff fdf3 	bl	80051e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80055fa:	2300      	movs	r3, #0
 80055fc:	e002      	b.n	8005604 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80055fe:	2300      	movs	r3, #0
 8005600:	e000      	b.n	8005604 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005602:	2302      	movs	r3, #2
  }
}
 8005604:	4618      	mov	r0, r3
 8005606:	3730      	adds	r7, #48	@ 0x30
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800560c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005610:	b0c0      	sub	sp, #256	@ 0x100
 8005612:	af00      	add	r7, sp, #0
 8005614:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005628:	68d9      	ldr	r1, [r3, #12]
 800562a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	ea40 0301 	orr.w	r3, r0, r1
 8005634:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	431a      	orrs	r2, r3
 8005644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	431a      	orrs	r2, r3
 800564c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	4313      	orrs	r3, r2
 8005654:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005664:	f021 010c 	bic.w	r1, r1, #12
 8005668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005672:	430b      	orrs	r3, r1
 8005674:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005686:	6999      	ldr	r1, [r3, #24]
 8005688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	ea40 0301 	orr.w	r3, r0, r1
 8005692:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	4b8f      	ldr	r3, [pc, #572]	@ (80058d8 <UART_SetConfig+0x2cc>)
 800569c:	429a      	cmp	r2, r3
 800569e:	d005      	beq.n	80056ac <UART_SetConfig+0xa0>
 80056a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	4b8d      	ldr	r3, [pc, #564]	@ (80058dc <UART_SetConfig+0x2d0>)
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d104      	bne.n	80056b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056ac:	f7ff fa0c 	bl	8004ac8 <HAL_RCC_GetPCLK2Freq>
 80056b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80056b4:	e003      	b.n	80056be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056b6:	f7ff f9f3 	bl	8004aa0 <HAL_RCC_GetPCLK1Freq>
 80056ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c2:	69db      	ldr	r3, [r3, #28]
 80056c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056c8:	f040 810c 	bne.w	80058e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056d0:	2200      	movs	r2, #0
 80056d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80056d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80056da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80056de:	4622      	mov	r2, r4
 80056e0:	462b      	mov	r3, r5
 80056e2:	1891      	adds	r1, r2, r2
 80056e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80056e6:	415b      	adcs	r3, r3
 80056e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80056ee:	4621      	mov	r1, r4
 80056f0:	eb12 0801 	adds.w	r8, r2, r1
 80056f4:	4629      	mov	r1, r5
 80056f6:	eb43 0901 	adc.w	r9, r3, r1
 80056fa:	f04f 0200 	mov.w	r2, #0
 80056fe:	f04f 0300 	mov.w	r3, #0
 8005702:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005706:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800570a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800570e:	4690      	mov	r8, r2
 8005710:	4699      	mov	r9, r3
 8005712:	4623      	mov	r3, r4
 8005714:	eb18 0303 	adds.w	r3, r8, r3
 8005718:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800571c:	462b      	mov	r3, r5
 800571e:	eb49 0303 	adc.w	r3, r9, r3
 8005722:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005732:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005736:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800573a:	460b      	mov	r3, r1
 800573c:	18db      	adds	r3, r3, r3
 800573e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005740:	4613      	mov	r3, r2
 8005742:	eb42 0303 	adc.w	r3, r2, r3
 8005746:	657b      	str	r3, [r7, #84]	@ 0x54
 8005748:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800574c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005750:	f7fb fa7a 	bl	8000c48 <__aeabi_uldivmod>
 8005754:	4602      	mov	r2, r0
 8005756:	460b      	mov	r3, r1
 8005758:	4b61      	ldr	r3, [pc, #388]	@ (80058e0 <UART_SetConfig+0x2d4>)
 800575a:	fba3 2302 	umull	r2, r3, r3, r2
 800575e:	095b      	lsrs	r3, r3, #5
 8005760:	011c      	lsls	r4, r3, #4
 8005762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005766:	2200      	movs	r2, #0
 8005768:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800576c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005770:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005774:	4642      	mov	r2, r8
 8005776:	464b      	mov	r3, r9
 8005778:	1891      	adds	r1, r2, r2
 800577a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800577c:	415b      	adcs	r3, r3
 800577e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005780:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005784:	4641      	mov	r1, r8
 8005786:	eb12 0a01 	adds.w	sl, r2, r1
 800578a:	4649      	mov	r1, r9
 800578c:	eb43 0b01 	adc.w	fp, r3, r1
 8005790:	f04f 0200 	mov.w	r2, #0
 8005794:	f04f 0300 	mov.w	r3, #0
 8005798:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800579c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057a4:	4692      	mov	sl, r2
 80057a6:	469b      	mov	fp, r3
 80057a8:	4643      	mov	r3, r8
 80057aa:	eb1a 0303 	adds.w	r3, sl, r3
 80057ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057b2:	464b      	mov	r3, r9
 80057b4:	eb4b 0303 	adc.w	r3, fp, r3
 80057b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80057bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80057cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80057d0:	460b      	mov	r3, r1
 80057d2:	18db      	adds	r3, r3, r3
 80057d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80057d6:	4613      	mov	r3, r2
 80057d8:	eb42 0303 	adc.w	r3, r2, r3
 80057dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80057de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80057e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80057e6:	f7fb fa2f 	bl	8000c48 <__aeabi_uldivmod>
 80057ea:	4602      	mov	r2, r0
 80057ec:	460b      	mov	r3, r1
 80057ee:	4611      	mov	r1, r2
 80057f0:	4b3b      	ldr	r3, [pc, #236]	@ (80058e0 <UART_SetConfig+0x2d4>)
 80057f2:	fba3 2301 	umull	r2, r3, r3, r1
 80057f6:	095b      	lsrs	r3, r3, #5
 80057f8:	2264      	movs	r2, #100	@ 0x64
 80057fa:	fb02 f303 	mul.w	r3, r2, r3
 80057fe:	1acb      	subs	r3, r1, r3
 8005800:	00db      	lsls	r3, r3, #3
 8005802:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005806:	4b36      	ldr	r3, [pc, #216]	@ (80058e0 <UART_SetConfig+0x2d4>)
 8005808:	fba3 2302 	umull	r2, r3, r3, r2
 800580c:	095b      	lsrs	r3, r3, #5
 800580e:	005b      	lsls	r3, r3, #1
 8005810:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005814:	441c      	add	r4, r3
 8005816:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800581a:	2200      	movs	r2, #0
 800581c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005820:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005824:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005828:	4642      	mov	r2, r8
 800582a:	464b      	mov	r3, r9
 800582c:	1891      	adds	r1, r2, r2
 800582e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005830:	415b      	adcs	r3, r3
 8005832:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005834:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005838:	4641      	mov	r1, r8
 800583a:	1851      	adds	r1, r2, r1
 800583c:	6339      	str	r1, [r7, #48]	@ 0x30
 800583e:	4649      	mov	r1, r9
 8005840:	414b      	adcs	r3, r1
 8005842:	637b      	str	r3, [r7, #52]	@ 0x34
 8005844:	f04f 0200 	mov.w	r2, #0
 8005848:	f04f 0300 	mov.w	r3, #0
 800584c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005850:	4659      	mov	r1, fp
 8005852:	00cb      	lsls	r3, r1, #3
 8005854:	4651      	mov	r1, sl
 8005856:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800585a:	4651      	mov	r1, sl
 800585c:	00ca      	lsls	r2, r1, #3
 800585e:	4610      	mov	r0, r2
 8005860:	4619      	mov	r1, r3
 8005862:	4603      	mov	r3, r0
 8005864:	4642      	mov	r2, r8
 8005866:	189b      	adds	r3, r3, r2
 8005868:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800586c:	464b      	mov	r3, r9
 800586e:	460a      	mov	r2, r1
 8005870:	eb42 0303 	adc.w	r3, r2, r3
 8005874:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005884:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005888:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800588c:	460b      	mov	r3, r1
 800588e:	18db      	adds	r3, r3, r3
 8005890:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005892:	4613      	mov	r3, r2
 8005894:	eb42 0303 	adc.w	r3, r2, r3
 8005898:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800589a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800589e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80058a2:	f7fb f9d1 	bl	8000c48 <__aeabi_uldivmod>
 80058a6:	4602      	mov	r2, r0
 80058a8:	460b      	mov	r3, r1
 80058aa:	4b0d      	ldr	r3, [pc, #52]	@ (80058e0 <UART_SetConfig+0x2d4>)
 80058ac:	fba3 1302 	umull	r1, r3, r3, r2
 80058b0:	095b      	lsrs	r3, r3, #5
 80058b2:	2164      	movs	r1, #100	@ 0x64
 80058b4:	fb01 f303 	mul.w	r3, r1, r3
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	00db      	lsls	r3, r3, #3
 80058bc:	3332      	adds	r3, #50	@ 0x32
 80058be:	4a08      	ldr	r2, [pc, #32]	@ (80058e0 <UART_SetConfig+0x2d4>)
 80058c0:	fba2 2303 	umull	r2, r3, r2, r3
 80058c4:	095b      	lsrs	r3, r3, #5
 80058c6:	f003 0207 	and.w	r2, r3, #7
 80058ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4422      	add	r2, r4
 80058d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058d4:	e106      	b.n	8005ae4 <UART_SetConfig+0x4d8>
 80058d6:	bf00      	nop
 80058d8:	40011000 	.word	0x40011000
 80058dc:	40011400 	.word	0x40011400
 80058e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058e8:	2200      	movs	r2, #0
 80058ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80058ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80058f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80058f6:	4642      	mov	r2, r8
 80058f8:	464b      	mov	r3, r9
 80058fa:	1891      	adds	r1, r2, r2
 80058fc:	6239      	str	r1, [r7, #32]
 80058fe:	415b      	adcs	r3, r3
 8005900:	627b      	str	r3, [r7, #36]	@ 0x24
 8005902:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005906:	4641      	mov	r1, r8
 8005908:	1854      	adds	r4, r2, r1
 800590a:	4649      	mov	r1, r9
 800590c:	eb43 0501 	adc.w	r5, r3, r1
 8005910:	f04f 0200 	mov.w	r2, #0
 8005914:	f04f 0300 	mov.w	r3, #0
 8005918:	00eb      	lsls	r3, r5, #3
 800591a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800591e:	00e2      	lsls	r2, r4, #3
 8005920:	4614      	mov	r4, r2
 8005922:	461d      	mov	r5, r3
 8005924:	4643      	mov	r3, r8
 8005926:	18e3      	adds	r3, r4, r3
 8005928:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800592c:	464b      	mov	r3, r9
 800592e:	eb45 0303 	adc.w	r3, r5, r3
 8005932:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005942:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005946:	f04f 0200 	mov.w	r2, #0
 800594a:	f04f 0300 	mov.w	r3, #0
 800594e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005952:	4629      	mov	r1, r5
 8005954:	008b      	lsls	r3, r1, #2
 8005956:	4621      	mov	r1, r4
 8005958:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800595c:	4621      	mov	r1, r4
 800595e:	008a      	lsls	r2, r1, #2
 8005960:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005964:	f7fb f970 	bl	8000c48 <__aeabi_uldivmod>
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	4b60      	ldr	r3, [pc, #384]	@ (8005af0 <UART_SetConfig+0x4e4>)
 800596e:	fba3 2302 	umull	r2, r3, r3, r2
 8005972:	095b      	lsrs	r3, r3, #5
 8005974:	011c      	lsls	r4, r3, #4
 8005976:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800597a:	2200      	movs	r2, #0
 800597c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005980:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005984:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005988:	4642      	mov	r2, r8
 800598a:	464b      	mov	r3, r9
 800598c:	1891      	adds	r1, r2, r2
 800598e:	61b9      	str	r1, [r7, #24]
 8005990:	415b      	adcs	r3, r3
 8005992:	61fb      	str	r3, [r7, #28]
 8005994:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005998:	4641      	mov	r1, r8
 800599a:	1851      	adds	r1, r2, r1
 800599c:	6139      	str	r1, [r7, #16]
 800599e:	4649      	mov	r1, r9
 80059a0:	414b      	adcs	r3, r1
 80059a2:	617b      	str	r3, [r7, #20]
 80059a4:	f04f 0200 	mov.w	r2, #0
 80059a8:	f04f 0300 	mov.w	r3, #0
 80059ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059b0:	4659      	mov	r1, fp
 80059b2:	00cb      	lsls	r3, r1, #3
 80059b4:	4651      	mov	r1, sl
 80059b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059ba:	4651      	mov	r1, sl
 80059bc:	00ca      	lsls	r2, r1, #3
 80059be:	4610      	mov	r0, r2
 80059c0:	4619      	mov	r1, r3
 80059c2:	4603      	mov	r3, r0
 80059c4:	4642      	mov	r2, r8
 80059c6:	189b      	adds	r3, r3, r2
 80059c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80059cc:	464b      	mov	r3, r9
 80059ce:	460a      	mov	r2, r1
 80059d0:	eb42 0303 	adc.w	r3, r2, r3
 80059d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80059e4:	f04f 0200 	mov.w	r2, #0
 80059e8:	f04f 0300 	mov.w	r3, #0
 80059ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80059f0:	4649      	mov	r1, r9
 80059f2:	008b      	lsls	r3, r1, #2
 80059f4:	4641      	mov	r1, r8
 80059f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059fa:	4641      	mov	r1, r8
 80059fc:	008a      	lsls	r2, r1, #2
 80059fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005a02:	f7fb f921 	bl	8000c48 <__aeabi_uldivmod>
 8005a06:	4602      	mov	r2, r0
 8005a08:	460b      	mov	r3, r1
 8005a0a:	4611      	mov	r1, r2
 8005a0c:	4b38      	ldr	r3, [pc, #224]	@ (8005af0 <UART_SetConfig+0x4e4>)
 8005a0e:	fba3 2301 	umull	r2, r3, r3, r1
 8005a12:	095b      	lsrs	r3, r3, #5
 8005a14:	2264      	movs	r2, #100	@ 0x64
 8005a16:	fb02 f303 	mul.w	r3, r2, r3
 8005a1a:	1acb      	subs	r3, r1, r3
 8005a1c:	011b      	lsls	r3, r3, #4
 8005a1e:	3332      	adds	r3, #50	@ 0x32
 8005a20:	4a33      	ldr	r2, [pc, #204]	@ (8005af0 <UART_SetConfig+0x4e4>)
 8005a22:	fba2 2303 	umull	r2, r3, r2, r3
 8005a26:	095b      	lsrs	r3, r3, #5
 8005a28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a2c:	441c      	add	r4, r3
 8005a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a32:	2200      	movs	r2, #0
 8005a34:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a36:	677a      	str	r2, [r7, #116]	@ 0x74
 8005a38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005a3c:	4642      	mov	r2, r8
 8005a3e:	464b      	mov	r3, r9
 8005a40:	1891      	adds	r1, r2, r2
 8005a42:	60b9      	str	r1, [r7, #8]
 8005a44:	415b      	adcs	r3, r3
 8005a46:	60fb      	str	r3, [r7, #12]
 8005a48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a4c:	4641      	mov	r1, r8
 8005a4e:	1851      	adds	r1, r2, r1
 8005a50:	6039      	str	r1, [r7, #0]
 8005a52:	4649      	mov	r1, r9
 8005a54:	414b      	adcs	r3, r1
 8005a56:	607b      	str	r3, [r7, #4]
 8005a58:	f04f 0200 	mov.w	r2, #0
 8005a5c:	f04f 0300 	mov.w	r3, #0
 8005a60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a64:	4659      	mov	r1, fp
 8005a66:	00cb      	lsls	r3, r1, #3
 8005a68:	4651      	mov	r1, sl
 8005a6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a6e:	4651      	mov	r1, sl
 8005a70:	00ca      	lsls	r2, r1, #3
 8005a72:	4610      	mov	r0, r2
 8005a74:	4619      	mov	r1, r3
 8005a76:	4603      	mov	r3, r0
 8005a78:	4642      	mov	r2, r8
 8005a7a:	189b      	adds	r3, r3, r2
 8005a7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a7e:	464b      	mov	r3, r9
 8005a80:	460a      	mov	r2, r1
 8005a82:	eb42 0303 	adc.w	r3, r2, r3
 8005a86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a92:	667a      	str	r2, [r7, #100]	@ 0x64
 8005a94:	f04f 0200 	mov.w	r2, #0
 8005a98:	f04f 0300 	mov.w	r3, #0
 8005a9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005aa0:	4649      	mov	r1, r9
 8005aa2:	008b      	lsls	r3, r1, #2
 8005aa4:	4641      	mov	r1, r8
 8005aa6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005aaa:	4641      	mov	r1, r8
 8005aac:	008a      	lsls	r2, r1, #2
 8005aae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005ab2:	f7fb f8c9 	bl	8000c48 <__aeabi_uldivmod>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4b0d      	ldr	r3, [pc, #52]	@ (8005af0 <UART_SetConfig+0x4e4>)
 8005abc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ac0:	095b      	lsrs	r3, r3, #5
 8005ac2:	2164      	movs	r1, #100	@ 0x64
 8005ac4:	fb01 f303 	mul.w	r3, r1, r3
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	011b      	lsls	r3, r3, #4
 8005acc:	3332      	adds	r3, #50	@ 0x32
 8005ace:	4a08      	ldr	r2, [pc, #32]	@ (8005af0 <UART_SetConfig+0x4e4>)
 8005ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad4:	095b      	lsrs	r3, r3, #5
 8005ad6:	f003 020f 	and.w	r2, r3, #15
 8005ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4422      	add	r2, r4
 8005ae2:	609a      	str	r2, [r3, #8]
}
 8005ae4:	bf00      	nop
 8005ae6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005aea:	46bd      	mov	sp, r7
 8005aec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005af0:	51eb851f 	.word	0x51eb851f

08005af4 <__cvt>:
 8005af4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005af8:	ec57 6b10 	vmov	r6, r7, d0
 8005afc:	2f00      	cmp	r7, #0
 8005afe:	460c      	mov	r4, r1
 8005b00:	4619      	mov	r1, r3
 8005b02:	463b      	mov	r3, r7
 8005b04:	bfbb      	ittet	lt
 8005b06:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005b0a:	461f      	movlt	r7, r3
 8005b0c:	2300      	movge	r3, #0
 8005b0e:	232d      	movlt	r3, #45	@ 0x2d
 8005b10:	700b      	strb	r3, [r1, #0]
 8005b12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b14:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005b18:	4691      	mov	r9, r2
 8005b1a:	f023 0820 	bic.w	r8, r3, #32
 8005b1e:	bfbc      	itt	lt
 8005b20:	4632      	movlt	r2, r6
 8005b22:	4616      	movlt	r6, r2
 8005b24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005b28:	d005      	beq.n	8005b36 <__cvt+0x42>
 8005b2a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005b2e:	d100      	bne.n	8005b32 <__cvt+0x3e>
 8005b30:	3401      	adds	r4, #1
 8005b32:	2102      	movs	r1, #2
 8005b34:	e000      	b.n	8005b38 <__cvt+0x44>
 8005b36:	2103      	movs	r1, #3
 8005b38:	ab03      	add	r3, sp, #12
 8005b3a:	9301      	str	r3, [sp, #4]
 8005b3c:	ab02      	add	r3, sp, #8
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	ec47 6b10 	vmov	d0, r6, r7
 8005b44:	4653      	mov	r3, sl
 8005b46:	4622      	mov	r2, r4
 8005b48:	f000 feca 	bl	80068e0 <_dtoa_r>
 8005b4c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005b50:	4605      	mov	r5, r0
 8005b52:	d119      	bne.n	8005b88 <__cvt+0x94>
 8005b54:	f019 0f01 	tst.w	r9, #1
 8005b58:	d00e      	beq.n	8005b78 <__cvt+0x84>
 8005b5a:	eb00 0904 	add.w	r9, r0, r4
 8005b5e:	2200      	movs	r2, #0
 8005b60:	2300      	movs	r3, #0
 8005b62:	4630      	mov	r0, r6
 8005b64:	4639      	mov	r1, r7
 8005b66:	f7fa ffaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b6a:	b108      	cbz	r0, 8005b70 <__cvt+0x7c>
 8005b6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b70:	2230      	movs	r2, #48	@ 0x30
 8005b72:	9b03      	ldr	r3, [sp, #12]
 8005b74:	454b      	cmp	r3, r9
 8005b76:	d31e      	bcc.n	8005bb6 <__cvt+0xc2>
 8005b78:	9b03      	ldr	r3, [sp, #12]
 8005b7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005b7c:	1b5b      	subs	r3, r3, r5
 8005b7e:	4628      	mov	r0, r5
 8005b80:	6013      	str	r3, [r2, #0]
 8005b82:	b004      	add	sp, #16
 8005b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005b8c:	eb00 0904 	add.w	r9, r0, r4
 8005b90:	d1e5      	bne.n	8005b5e <__cvt+0x6a>
 8005b92:	7803      	ldrb	r3, [r0, #0]
 8005b94:	2b30      	cmp	r3, #48	@ 0x30
 8005b96:	d10a      	bne.n	8005bae <__cvt+0xba>
 8005b98:	2200      	movs	r2, #0
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	4630      	mov	r0, r6
 8005b9e:	4639      	mov	r1, r7
 8005ba0:	f7fa ff92 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ba4:	b918      	cbnz	r0, 8005bae <__cvt+0xba>
 8005ba6:	f1c4 0401 	rsb	r4, r4, #1
 8005baa:	f8ca 4000 	str.w	r4, [sl]
 8005bae:	f8da 3000 	ldr.w	r3, [sl]
 8005bb2:	4499      	add	r9, r3
 8005bb4:	e7d3      	b.n	8005b5e <__cvt+0x6a>
 8005bb6:	1c59      	adds	r1, r3, #1
 8005bb8:	9103      	str	r1, [sp, #12]
 8005bba:	701a      	strb	r2, [r3, #0]
 8005bbc:	e7d9      	b.n	8005b72 <__cvt+0x7e>

08005bbe <__exponent>:
 8005bbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bc0:	2900      	cmp	r1, #0
 8005bc2:	bfba      	itte	lt
 8005bc4:	4249      	neglt	r1, r1
 8005bc6:	232d      	movlt	r3, #45	@ 0x2d
 8005bc8:	232b      	movge	r3, #43	@ 0x2b
 8005bca:	2909      	cmp	r1, #9
 8005bcc:	7002      	strb	r2, [r0, #0]
 8005bce:	7043      	strb	r3, [r0, #1]
 8005bd0:	dd29      	ble.n	8005c26 <__exponent+0x68>
 8005bd2:	f10d 0307 	add.w	r3, sp, #7
 8005bd6:	461d      	mov	r5, r3
 8005bd8:	270a      	movs	r7, #10
 8005bda:	461a      	mov	r2, r3
 8005bdc:	fbb1 f6f7 	udiv	r6, r1, r7
 8005be0:	fb07 1416 	mls	r4, r7, r6, r1
 8005be4:	3430      	adds	r4, #48	@ 0x30
 8005be6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005bea:	460c      	mov	r4, r1
 8005bec:	2c63      	cmp	r4, #99	@ 0x63
 8005bee:	f103 33ff 	add.w	r3, r3, #4294967295
 8005bf2:	4631      	mov	r1, r6
 8005bf4:	dcf1      	bgt.n	8005bda <__exponent+0x1c>
 8005bf6:	3130      	adds	r1, #48	@ 0x30
 8005bf8:	1e94      	subs	r4, r2, #2
 8005bfa:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005bfe:	1c41      	adds	r1, r0, #1
 8005c00:	4623      	mov	r3, r4
 8005c02:	42ab      	cmp	r3, r5
 8005c04:	d30a      	bcc.n	8005c1c <__exponent+0x5e>
 8005c06:	f10d 0309 	add.w	r3, sp, #9
 8005c0a:	1a9b      	subs	r3, r3, r2
 8005c0c:	42ac      	cmp	r4, r5
 8005c0e:	bf88      	it	hi
 8005c10:	2300      	movhi	r3, #0
 8005c12:	3302      	adds	r3, #2
 8005c14:	4403      	add	r3, r0
 8005c16:	1a18      	subs	r0, r3, r0
 8005c18:	b003      	add	sp, #12
 8005c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c1c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005c20:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005c24:	e7ed      	b.n	8005c02 <__exponent+0x44>
 8005c26:	2330      	movs	r3, #48	@ 0x30
 8005c28:	3130      	adds	r1, #48	@ 0x30
 8005c2a:	7083      	strb	r3, [r0, #2]
 8005c2c:	70c1      	strb	r1, [r0, #3]
 8005c2e:	1d03      	adds	r3, r0, #4
 8005c30:	e7f1      	b.n	8005c16 <__exponent+0x58>
	...

08005c34 <_printf_float>:
 8005c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c38:	b08d      	sub	sp, #52	@ 0x34
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005c40:	4616      	mov	r6, r2
 8005c42:	461f      	mov	r7, r3
 8005c44:	4605      	mov	r5, r0
 8005c46:	f000 fd3b 	bl	80066c0 <_localeconv_r>
 8005c4a:	6803      	ldr	r3, [r0, #0]
 8005c4c:	9304      	str	r3, [sp, #16]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fa fb0e 	bl	8000270 <strlen>
 8005c54:	2300      	movs	r3, #0
 8005c56:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c58:	f8d8 3000 	ldr.w	r3, [r8]
 8005c5c:	9005      	str	r0, [sp, #20]
 8005c5e:	3307      	adds	r3, #7
 8005c60:	f023 0307 	bic.w	r3, r3, #7
 8005c64:	f103 0208 	add.w	r2, r3, #8
 8005c68:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005c6c:	f8d4 b000 	ldr.w	fp, [r4]
 8005c70:	f8c8 2000 	str.w	r2, [r8]
 8005c74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c78:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005c7c:	9307      	str	r3, [sp, #28]
 8005c7e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c82:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005c86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c8a:	4b9c      	ldr	r3, [pc, #624]	@ (8005efc <_printf_float+0x2c8>)
 8005c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c90:	f7fa ff4c 	bl	8000b2c <__aeabi_dcmpun>
 8005c94:	bb70      	cbnz	r0, 8005cf4 <_printf_float+0xc0>
 8005c96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c9a:	4b98      	ldr	r3, [pc, #608]	@ (8005efc <_printf_float+0x2c8>)
 8005c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca0:	f7fa ff26 	bl	8000af0 <__aeabi_dcmple>
 8005ca4:	bb30      	cbnz	r0, 8005cf4 <_printf_float+0xc0>
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	2300      	movs	r3, #0
 8005caa:	4640      	mov	r0, r8
 8005cac:	4649      	mov	r1, r9
 8005cae:	f7fa ff15 	bl	8000adc <__aeabi_dcmplt>
 8005cb2:	b110      	cbz	r0, 8005cba <_printf_float+0x86>
 8005cb4:	232d      	movs	r3, #45	@ 0x2d
 8005cb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cba:	4a91      	ldr	r2, [pc, #580]	@ (8005f00 <_printf_float+0x2cc>)
 8005cbc:	4b91      	ldr	r3, [pc, #580]	@ (8005f04 <_printf_float+0x2d0>)
 8005cbe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005cc2:	bf94      	ite	ls
 8005cc4:	4690      	movls	r8, r2
 8005cc6:	4698      	movhi	r8, r3
 8005cc8:	2303      	movs	r3, #3
 8005cca:	6123      	str	r3, [r4, #16]
 8005ccc:	f02b 0304 	bic.w	r3, fp, #4
 8005cd0:	6023      	str	r3, [r4, #0]
 8005cd2:	f04f 0900 	mov.w	r9, #0
 8005cd6:	9700      	str	r7, [sp, #0]
 8005cd8:	4633      	mov	r3, r6
 8005cda:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005cdc:	4621      	mov	r1, r4
 8005cde:	4628      	mov	r0, r5
 8005ce0:	f000 f9d2 	bl	8006088 <_printf_common>
 8005ce4:	3001      	adds	r0, #1
 8005ce6:	f040 808d 	bne.w	8005e04 <_printf_float+0x1d0>
 8005cea:	f04f 30ff 	mov.w	r0, #4294967295
 8005cee:	b00d      	add	sp, #52	@ 0x34
 8005cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cf4:	4642      	mov	r2, r8
 8005cf6:	464b      	mov	r3, r9
 8005cf8:	4640      	mov	r0, r8
 8005cfa:	4649      	mov	r1, r9
 8005cfc:	f7fa ff16 	bl	8000b2c <__aeabi_dcmpun>
 8005d00:	b140      	cbz	r0, 8005d14 <_printf_float+0xe0>
 8005d02:	464b      	mov	r3, r9
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	bfbc      	itt	lt
 8005d08:	232d      	movlt	r3, #45	@ 0x2d
 8005d0a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005d0e:	4a7e      	ldr	r2, [pc, #504]	@ (8005f08 <_printf_float+0x2d4>)
 8005d10:	4b7e      	ldr	r3, [pc, #504]	@ (8005f0c <_printf_float+0x2d8>)
 8005d12:	e7d4      	b.n	8005cbe <_printf_float+0x8a>
 8005d14:	6863      	ldr	r3, [r4, #4]
 8005d16:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005d1a:	9206      	str	r2, [sp, #24]
 8005d1c:	1c5a      	adds	r2, r3, #1
 8005d1e:	d13b      	bne.n	8005d98 <_printf_float+0x164>
 8005d20:	2306      	movs	r3, #6
 8005d22:	6063      	str	r3, [r4, #4]
 8005d24:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005d28:	2300      	movs	r3, #0
 8005d2a:	6022      	str	r2, [r4, #0]
 8005d2c:	9303      	str	r3, [sp, #12]
 8005d2e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005d30:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005d34:	ab09      	add	r3, sp, #36	@ 0x24
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	6861      	ldr	r1, [r4, #4]
 8005d3a:	ec49 8b10 	vmov	d0, r8, r9
 8005d3e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005d42:	4628      	mov	r0, r5
 8005d44:	f7ff fed6 	bl	8005af4 <__cvt>
 8005d48:	9b06      	ldr	r3, [sp, #24]
 8005d4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005d4c:	2b47      	cmp	r3, #71	@ 0x47
 8005d4e:	4680      	mov	r8, r0
 8005d50:	d129      	bne.n	8005da6 <_printf_float+0x172>
 8005d52:	1cc8      	adds	r0, r1, #3
 8005d54:	db02      	blt.n	8005d5c <_printf_float+0x128>
 8005d56:	6863      	ldr	r3, [r4, #4]
 8005d58:	4299      	cmp	r1, r3
 8005d5a:	dd41      	ble.n	8005de0 <_printf_float+0x1ac>
 8005d5c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005d60:	fa5f fa8a 	uxtb.w	sl, sl
 8005d64:	3901      	subs	r1, #1
 8005d66:	4652      	mov	r2, sl
 8005d68:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005d6c:	9109      	str	r1, [sp, #36]	@ 0x24
 8005d6e:	f7ff ff26 	bl	8005bbe <__exponent>
 8005d72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005d74:	1813      	adds	r3, r2, r0
 8005d76:	2a01      	cmp	r2, #1
 8005d78:	4681      	mov	r9, r0
 8005d7a:	6123      	str	r3, [r4, #16]
 8005d7c:	dc02      	bgt.n	8005d84 <_printf_float+0x150>
 8005d7e:	6822      	ldr	r2, [r4, #0]
 8005d80:	07d2      	lsls	r2, r2, #31
 8005d82:	d501      	bpl.n	8005d88 <_printf_float+0x154>
 8005d84:	3301      	adds	r3, #1
 8005d86:	6123      	str	r3, [r4, #16]
 8005d88:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d0a2      	beq.n	8005cd6 <_printf_float+0xa2>
 8005d90:	232d      	movs	r3, #45	@ 0x2d
 8005d92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d96:	e79e      	b.n	8005cd6 <_printf_float+0xa2>
 8005d98:	9a06      	ldr	r2, [sp, #24]
 8005d9a:	2a47      	cmp	r2, #71	@ 0x47
 8005d9c:	d1c2      	bne.n	8005d24 <_printf_float+0xf0>
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1c0      	bne.n	8005d24 <_printf_float+0xf0>
 8005da2:	2301      	movs	r3, #1
 8005da4:	e7bd      	b.n	8005d22 <_printf_float+0xee>
 8005da6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005daa:	d9db      	bls.n	8005d64 <_printf_float+0x130>
 8005dac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005db0:	d118      	bne.n	8005de4 <_printf_float+0x1b0>
 8005db2:	2900      	cmp	r1, #0
 8005db4:	6863      	ldr	r3, [r4, #4]
 8005db6:	dd0b      	ble.n	8005dd0 <_printf_float+0x19c>
 8005db8:	6121      	str	r1, [r4, #16]
 8005dba:	b913      	cbnz	r3, 8005dc2 <_printf_float+0x18e>
 8005dbc:	6822      	ldr	r2, [r4, #0]
 8005dbe:	07d0      	lsls	r0, r2, #31
 8005dc0:	d502      	bpl.n	8005dc8 <_printf_float+0x194>
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	440b      	add	r3, r1
 8005dc6:	6123      	str	r3, [r4, #16]
 8005dc8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005dca:	f04f 0900 	mov.w	r9, #0
 8005dce:	e7db      	b.n	8005d88 <_printf_float+0x154>
 8005dd0:	b913      	cbnz	r3, 8005dd8 <_printf_float+0x1a4>
 8005dd2:	6822      	ldr	r2, [r4, #0]
 8005dd4:	07d2      	lsls	r2, r2, #31
 8005dd6:	d501      	bpl.n	8005ddc <_printf_float+0x1a8>
 8005dd8:	3302      	adds	r3, #2
 8005dda:	e7f4      	b.n	8005dc6 <_printf_float+0x192>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e7f2      	b.n	8005dc6 <_printf_float+0x192>
 8005de0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005de4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005de6:	4299      	cmp	r1, r3
 8005de8:	db05      	blt.n	8005df6 <_printf_float+0x1c2>
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	6121      	str	r1, [r4, #16]
 8005dee:	07d8      	lsls	r0, r3, #31
 8005df0:	d5ea      	bpl.n	8005dc8 <_printf_float+0x194>
 8005df2:	1c4b      	adds	r3, r1, #1
 8005df4:	e7e7      	b.n	8005dc6 <_printf_float+0x192>
 8005df6:	2900      	cmp	r1, #0
 8005df8:	bfd4      	ite	le
 8005dfa:	f1c1 0202 	rsble	r2, r1, #2
 8005dfe:	2201      	movgt	r2, #1
 8005e00:	4413      	add	r3, r2
 8005e02:	e7e0      	b.n	8005dc6 <_printf_float+0x192>
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	055a      	lsls	r2, r3, #21
 8005e08:	d407      	bmi.n	8005e1a <_printf_float+0x1e6>
 8005e0a:	6923      	ldr	r3, [r4, #16]
 8005e0c:	4642      	mov	r2, r8
 8005e0e:	4631      	mov	r1, r6
 8005e10:	4628      	mov	r0, r5
 8005e12:	47b8      	blx	r7
 8005e14:	3001      	adds	r0, #1
 8005e16:	d12b      	bne.n	8005e70 <_printf_float+0x23c>
 8005e18:	e767      	b.n	8005cea <_printf_float+0xb6>
 8005e1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e1e:	f240 80dd 	bls.w	8005fdc <_printf_float+0x3a8>
 8005e22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005e26:	2200      	movs	r2, #0
 8005e28:	2300      	movs	r3, #0
 8005e2a:	f7fa fe4d 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	d033      	beq.n	8005e9a <_printf_float+0x266>
 8005e32:	4a37      	ldr	r2, [pc, #220]	@ (8005f10 <_printf_float+0x2dc>)
 8005e34:	2301      	movs	r3, #1
 8005e36:	4631      	mov	r1, r6
 8005e38:	4628      	mov	r0, r5
 8005e3a:	47b8      	blx	r7
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	f43f af54 	beq.w	8005cea <_printf_float+0xb6>
 8005e42:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005e46:	4543      	cmp	r3, r8
 8005e48:	db02      	blt.n	8005e50 <_printf_float+0x21c>
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	07d8      	lsls	r0, r3, #31
 8005e4e:	d50f      	bpl.n	8005e70 <_printf_float+0x23c>
 8005e50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e54:	4631      	mov	r1, r6
 8005e56:	4628      	mov	r0, r5
 8005e58:	47b8      	blx	r7
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	f43f af45 	beq.w	8005cea <_printf_float+0xb6>
 8005e60:	f04f 0900 	mov.w	r9, #0
 8005e64:	f108 38ff 	add.w	r8, r8, #4294967295
 8005e68:	f104 0a1a 	add.w	sl, r4, #26
 8005e6c:	45c8      	cmp	r8, r9
 8005e6e:	dc09      	bgt.n	8005e84 <_printf_float+0x250>
 8005e70:	6823      	ldr	r3, [r4, #0]
 8005e72:	079b      	lsls	r3, r3, #30
 8005e74:	f100 8103 	bmi.w	800607e <_printf_float+0x44a>
 8005e78:	68e0      	ldr	r0, [r4, #12]
 8005e7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e7c:	4298      	cmp	r0, r3
 8005e7e:	bfb8      	it	lt
 8005e80:	4618      	movlt	r0, r3
 8005e82:	e734      	b.n	8005cee <_printf_float+0xba>
 8005e84:	2301      	movs	r3, #1
 8005e86:	4652      	mov	r2, sl
 8005e88:	4631      	mov	r1, r6
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	47b8      	blx	r7
 8005e8e:	3001      	adds	r0, #1
 8005e90:	f43f af2b 	beq.w	8005cea <_printf_float+0xb6>
 8005e94:	f109 0901 	add.w	r9, r9, #1
 8005e98:	e7e8      	b.n	8005e6c <_printf_float+0x238>
 8005e9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	dc39      	bgt.n	8005f14 <_printf_float+0x2e0>
 8005ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8005f10 <_printf_float+0x2dc>)
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	4631      	mov	r1, r6
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	47b8      	blx	r7
 8005eaa:	3001      	adds	r0, #1
 8005eac:	f43f af1d 	beq.w	8005cea <_printf_float+0xb6>
 8005eb0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005eb4:	ea59 0303 	orrs.w	r3, r9, r3
 8005eb8:	d102      	bne.n	8005ec0 <_printf_float+0x28c>
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	07d9      	lsls	r1, r3, #31
 8005ebe:	d5d7      	bpl.n	8005e70 <_printf_float+0x23c>
 8005ec0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ec4:	4631      	mov	r1, r6
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	47b8      	blx	r7
 8005eca:	3001      	adds	r0, #1
 8005ecc:	f43f af0d 	beq.w	8005cea <_printf_float+0xb6>
 8005ed0:	f04f 0a00 	mov.w	sl, #0
 8005ed4:	f104 0b1a 	add.w	fp, r4, #26
 8005ed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eda:	425b      	negs	r3, r3
 8005edc:	4553      	cmp	r3, sl
 8005ede:	dc01      	bgt.n	8005ee4 <_printf_float+0x2b0>
 8005ee0:	464b      	mov	r3, r9
 8005ee2:	e793      	b.n	8005e0c <_printf_float+0x1d8>
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	465a      	mov	r2, fp
 8005ee8:	4631      	mov	r1, r6
 8005eea:	4628      	mov	r0, r5
 8005eec:	47b8      	blx	r7
 8005eee:	3001      	adds	r0, #1
 8005ef0:	f43f aefb 	beq.w	8005cea <_printf_float+0xb6>
 8005ef4:	f10a 0a01 	add.w	sl, sl, #1
 8005ef8:	e7ee      	b.n	8005ed8 <_printf_float+0x2a4>
 8005efa:	bf00      	nop
 8005efc:	7fefffff 	.word	0x7fefffff
 8005f00:	0800a47c 	.word	0x0800a47c
 8005f04:	0800a480 	.word	0x0800a480
 8005f08:	0800a484 	.word	0x0800a484
 8005f0c:	0800a488 	.word	0x0800a488
 8005f10:	0800a48c 	.word	0x0800a48c
 8005f14:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f16:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005f1a:	4553      	cmp	r3, sl
 8005f1c:	bfa8      	it	ge
 8005f1e:	4653      	movge	r3, sl
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	4699      	mov	r9, r3
 8005f24:	dc36      	bgt.n	8005f94 <_printf_float+0x360>
 8005f26:	f04f 0b00 	mov.w	fp, #0
 8005f2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f2e:	f104 021a 	add.w	r2, r4, #26
 8005f32:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f34:	9306      	str	r3, [sp, #24]
 8005f36:	eba3 0309 	sub.w	r3, r3, r9
 8005f3a:	455b      	cmp	r3, fp
 8005f3c:	dc31      	bgt.n	8005fa2 <_printf_float+0x36e>
 8005f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f40:	459a      	cmp	sl, r3
 8005f42:	dc3a      	bgt.n	8005fba <_printf_float+0x386>
 8005f44:	6823      	ldr	r3, [r4, #0]
 8005f46:	07da      	lsls	r2, r3, #31
 8005f48:	d437      	bmi.n	8005fba <_printf_float+0x386>
 8005f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f4c:	ebaa 0903 	sub.w	r9, sl, r3
 8005f50:	9b06      	ldr	r3, [sp, #24]
 8005f52:	ebaa 0303 	sub.w	r3, sl, r3
 8005f56:	4599      	cmp	r9, r3
 8005f58:	bfa8      	it	ge
 8005f5a:	4699      	movge	r9, r3
 8005f5c:	f1b9 0f00 	cmp.w	r9, #0
 8005f60:	dc33      	bgt.n	8005fca <_printf_float+0x396>
 8005f62:	f04f 0800 	mov.w	r8, #0
 8005f66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f6a:	f104 0b1a 	add.w	fp, r4, #26
 8005f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f70:	ebaa 0303 	sub.w	r3, sl, r3
 8005f74:	eba3 0309 	sub.w	r3, r3, r9
 8005f78:	4543      	cmp	r3, r8
 8005f7a:	f77f af79 	ble.w	8005e70 <_printf_float+0x23c>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	465a      	mov	r2, fp
 8005f82:	4631      	mov	r1, r6
 8005f84:	4628      	mov	r0, r5
 8005f86:	47b8      	blx	r7
 8005f88:	3001      	adds	r0, #1
 8005f8a:	f43f aeae 	beq.w	8005cea <_printf_float+0xb6>
 8005f8e:	f108 0801 	add.w	r8, r8, #1
 8005f92:	e7ec      	b.n	8005f6e <_printf_float+0x33a>
 8005f94:	4642      	mov	r2, r8
 8005f96:	4631      	mov	r1, r6
 8005f98:	4628      	mov	r0, r5
 8005f9a:	47b8      	blx	r7
 8005f9c:	3001      	adds	r0, #1
 8005f9e:	d1c2      	bne.n	8005f26 <_printf_float+0x2f2>
 8005fa0:	e6a3      	b.n	8005cea <_printf_float+0xb6>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	4631      	mov	r1, r6
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	9206      	str	r2, [sp, #24]
 8005faa:	47b8      	blx	r7
 8005fac:	3001      	adds	r0, #1
 8005fae:	f43f ae9c 	beq.w	8005cea <_printf_float+0xb6>
 8005fb2:	9a06      	ldr	r2, [sp, #24]
 8005fb4:	f10b 0b01 	add.w	fp, fp, #1
 8005fb8:	e7bb      	b.n	8005f32 <_printf_float+0x2fe>
 8005fba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fbe:	4631      	mov	r1, r6
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	47b8      	blx	r7
 8005fc4:	3001      	adds	r0, #1
 8005fc6:	d1c0      	bne.n	8005f4a <_printf_float+0x316>
 8005fc8:	e68f      	b.n	8005cea <_printf_float+0xb6>
 8005fca:	9a06      	ldr	r2, [sp, #24]
 8005fcc:	464b      	mov	r3, r9
 8005fce:	4442      	add	r2, r8
 8005fd0:	4631      	mov	r1, r6
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	47b8      	blx	r7
 8005fd6:	3001      	adds	r0, #1
 8005fd8:	d1c3      	bne.n	8005f62 <_printf_float+0x32e>
 8005fda:	e686      	b.n	8005cea <_printf_float+0xb6>
 8005fdc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005fe0:	f1ba 0f01 	cmp.w	sl, #1
 8005fe4:	dc01      	bgt.n	8005fea <_printf_float+0x3b6>
 8005fe6:	07db      	lsls	r3, r3, #31
 8005fe8:	d536      	bpl.n	8006058 <_printf_float+0x424>
 8005fea:	2301      	movs	r3, #1
 8005fec:	4642      	mov	r2, r8
 8005fee:	4631      	mov	r1, r6
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	47b8      	blx	r7
 8005ff4:	3001      	adds	r0, #1
 8005ff6:	f43f ae78 	beq.w	8005cea <_printf_float+0xb6>
 8005ffa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ffe:	4631      	mov	r1, r6
 8006000:	4628      	mov	r0, r5
 8006002:	47b8      	blx	r7
 8006004:	3001      	adds	r0, #1
 8006006:	f43f ae70 	beq.w	8005cea <_printf_float+0xb6>
 800600a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800600e:	2200      	movs	r2, #0
 8006010:	2300      	movs	r3, #0
 8006012:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006016:	f7fa fd57 	bl	8000ac8 <__aeabi_dcmpeq>
 800601a:	b9c0      	cbnz	r0, 800604e <_printf_float+0x41a>
 800601c:	4653      	mov	r3, sl
 800601e:	f108 0201 	add.w	r2, r8, #1
 8006022:	4631      	mov	r1, r6
 8006024:	4628      	mov	r0, r5
 8006026:	47b8      	blx	r7
 8006028:	3001      	adds	r0, #1
 800602a:	d10c      	bne.n	8006046 <_printf_float+0x412>
 800602c:	e65d      	b.n	8005cea <_printf_float+0xb6>
 800602e:	2301      	movs	r3, #1
 8006030:	465a      	mov	r2, fp
 8006032:	4631      	mov	r1, r6
 8006034:	4628      	mov	r0, r5
 8006036:	47b8      	blx	r7
 8006038:	3001      	adds	r0, #1
 800603a:	f43f ae56 	beq.w	8005cea <_printf_float+0xb6>
 800603e:	f108 0801 	add.w	r8, r8, #1
 8006042:	45d0      	cmp	r8, sl
 8006044:	dbf3      	blt.n	800602e <_printf_float+0x3fa>
 8006046:	464b      	mov	r3, r9
 8006048:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800604c:	e6df      	b.n	8005e0e <_printf_float+0x1da>
 800604e:	f04f 0800 	mov.w	r8, #0
 8006052:	f104 0b1a 	add.w	fp, r4, #26
 8006056:	e7f4      	b.n	8006042 <_printf_float+0x40e>
 8006058:	2301      	movs	r3, #1
 800605a:	4642      	mov	r2, r8
 800605c:	e7e1      	b.n	8006022 <_printf_float+0x3ee>
 800605e:	2301      	movs	r3, #1
 8006060:	464a      	mov	r2, r9
 8006062:	4631      	mov	r1, r6
 8006064:	4628      	mov	r0, r5
 8006066:	47b8      	blx	r7
 8006068:	3001      	adds	r0, #1
 800606a:	f43f ae3e 	beq.w	8005cea <_printf_float+0xb6>
 800606e:	f108 0801 	add.w	r8, r8, #1
 8006072:	68e3      	ldr	r3, [r4, #12]
 8006074:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006076:	1a5b      	subs	r3, r3, r1
 8006078:	4543      	cmp	r3, r8
 800607a:	dcf0      	bgt.n	800605e <_printf_float+0x42a>
 800607c:	e6fc      	b.n	8005e78 <_printf_float+0x244>
 800607e:	f04f 0800 	mov.w	r8, #0
 8006082:	f104 0919 	add.w	r9, r4, #25
 8006086:	e7f4      	b.n	8006072 <_printf_float+0x43e>

08006088 <_printf_common>:
 8006088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800608c:	4616      	mov	r6, r2
 800608e:	4698      	mov	r8, r3
 8006090:	688a      	ldr	r2, [r1, #8]
 8006092:	690b      	ldr	r3, [r1, #16]
 8006094:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006098:	4293      	cmp	r3, r2
 800609a:	bfb8      	it	lt
 800609c:	4613      	movlt	r3, r2
 800609e:	6033      	str	r3, [r6, #0]
 80060a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80060a4:	4607      	mov	r7, r0
 80060a6:	460c      	mov	r4, r1
 80060a8:	b10a      	cbz	r2, 80060ae <_printf_common+0x26>
 80060aa:	3301      	adds	r3, #1
 80060ac:	6033      	str	r3, [r6, #0]
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	0699      	lsls	r1, r3, #26
 80060b2:	bf42      	ittt	mi
 80060b4:	6833      	ldrmi	r3, [r6, #0]
 80060b6:	3302      	addmi	r3, #2
 80060b8:	6033      	strmi	r3, [r6, #0]
 80060ba:	6825      	ldr	r5, [r4, #0]
 80060bc:	f015 0506 	ands.w	r5, r5, #6
 80060c0:	d106      	bne.n	80060d0 <_printf_common+0x48>
 80060c2:	f104 0a19 	add.w	sl, r4, #25
 80060c6:	68e3      	ldr	r3, [r4, #12]
 80060c8:	6832      	ldr	r2, [r6, #0]
 80060ca:	1a9b      	subs	r3, r3, r2
 80060cc:	42ab      	cmp	r3, r5
 80060ce:	dc26      	bgt.n	800611e <_printf_common+0x96>
 80060d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80060d4:	6822      	ldr	r2, [r4, #0]
 80060d6:	3b00      	subs	r3, #0
 80060d8:	bf18      	it	ne
 80060da:	2301      	movne	r3, #1
 80060dc:	0692      	lsls	r2, r2, #26
 80060de:	d42b      	bmi.n	8006138 <_printf_common+0xb0>
 80060e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80060e4:	4641      	mov	r1, r8
 80060e6:	4638      	mov	r0, r7
 80060e8:	47c8      	blx	r9
 80060ea:	3001      	adds	r0, #1
 80060ec:	d01e      	beq.n	800612c <_printf_common+0xa4>
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	6922      	ldr	r2, [r4, #16]
 80060f2:	f003 0306 	and.w	r3, r3, #6
 80060f6:	2b04      	cmp	r3, #4
 80060f8:	bf02      	ittt	eq
 80060fa:	68e5      	ldreq	r5, [r4, #12]
 80060fc:	6833      	ldreq	r3, [r6, #0]
 80060fe:	1aed      	subeq	r5, r5, r3
 8006100:	68a3      	ldr	r3, [r4, #8]
 8006102:	bf0c      	ite	eq
 8006104:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006108:	2500      	movne	r5, #0
 800610a:	4293      	cmp	r3, r2
 800610c:	bfc4      	itt	gt
 800610e:	1a9b      	subgt	r3, r3, r2
 8006110:	18ed      	addgt	r5, r5, r3
 8006112:	2600      	movs	r6, #0
 8006114:	341a      	adds	r4, #26
 8006116:	42b5      	cmp	r5, r6
 8006118:	d11a      	bne.n	8006150 <_printf_common+0xc8>
 800611a:	2000      	movs	r0, #0
 800611c:	e008      	b.n	8006130 <_printf_common+0xa8>
 800611e:	2301      	movs	r3, #1
 8006120:	4652      	mov	r2, sl
 8006122:	4641      	mov	r1, r8
 8006124:	4638      	mov	r0, r7
 8006126:	47c8      	blx	r9
 8006128:	3001      	adds	r0, #1
 800612a:	d103      	bne.n	8006134 <_printf_common+0xac>
 800612c:	f04f 30ff 	mov.w	r0, #4294967295
 8006130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006134:	3501      	adds	r5, #1
 8006136:	e7c6      	b.n	80060c6 <_printf_common+0x3e>
 8006138:	18e1      	adds	r1, r4, r3
 800613a:	1c5a      	adds	r2, r3, #1
 800613c:	2030      	movs	r0, #48	@ 0x30
 800613e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006142:	4422      	add	r2, r4
 8006144:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006148:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800614c:	3302      	adds	r3, #2
 800614e:	e7c7      	b.n	80060e0 <_printf_common+0x58>
 8006150:	2301      	movs	r3, #1
 8006152:	4622      	mov	r2, r4
 8006154:	4641      	mov	r1, r8
 8006156:	4638      	mov	r0, r7
 8006158:	47c8      	blx	r9
 800615a:	3001      	adds	r0, #1
 800615c:	d0e6      	beq.n	800612c <_printf_common+0xa4>
 800615e:	3601      	adds	r6, #1
 8006160:	e7d9      	b.n	8006116 <_printf_common+0x8e>
	...

08006164 <_printf_i>:
 8006164:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006168:	7e0f      	ldrb	r7, [r1, #24]
 800616a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800616c:	2f78      	cmp	r7, #120	@ 0x78
 800616e:	4691      	mov	r9, r2
 8006170:	4680      	mov	r8, r0
 8006172:	460c      	mov	r4, r1
 8006174:	469a      	mov	sl, r3
 8006176:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800617a:	d807      	bhi.n	800618c <_printf_i+0x28>
 800617c:	2f62      	cmp	r7, #98	@ 0x62
 800617e:	d80a      	bhi.n	8006196 <_printf_i+0x32>
 8006180:	2f00      	cmp	r7, #0
 8006182:	f000 80d2 	beq.w	800632a <_printf_i+0x1c6>
 8006186:	2f58      	cmp	r7, #88	@ 0x58
 8006188:	f000 80b9 	beq.w	80062fe <_printf_i+0x19a>
 800618c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006190:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006194:	e03a      	b.n	800620c <_printf_i+0xa8>
 8006196:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800619a:	2b15      	cmp	r3, #21
 800619c:	d8f6      	bhi.n	800618c <_printf_i+0x28>
 800619e:	a101      	add	r1, pc, #4	@ (adr r1, 80061a4 <_printf_i+0x40>)
 80061a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061a4:	080061fd 	.word	0x080061fd
 80061a8:	08006211 	.word	0x08006211
 80061ac:	0800618d 	.word	0x0800618d
 80061b0:	0800618d 	.word	0x0800618d
 80061b4:	0800618d 	.word	0x0800618d
 80061b8:	0800618d 	.word	0x0800618d
 80061bc:	08006211 	.word	0x08006211
 80061c0:	0800618d 	.word	0x0800618d
 80061c4:	0800618d 	.word	0x0800618d
 80061c8:	0800618d 	.word	0x0800618d
 80061cc:	0800618d 	.word	0x0800618d
 80061d0:	08006311 	.word	0x08006311
 80061d4:	0800623b 	.word	0x0800623b
 80061d8:	080062cb 	.word	0x080062cb
 80061dc:	0800618d 	.word	0x0800618d
 80061e0:	0800618d 	.word	0x0800618d
 80061e4:	08006333 	.word	0x08006333
 80061e8:	0800618d 	.word	0x0800618d
 80061ec:	0800623b 	.word	0x0800623b
 80061f0:	0800618d 	.word	0x0800618d
 80061f4:	0800618d 	.word	0x0800618d
 80061f8:	080062d3 	.word	0x080062d3
 80061fc:	6833      	ldr	r3, [r6, #0]
 80061fe:	1d1a      	adds	r2, r3, #4
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6032      	str	r2, [r6, #0]
 8006204:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006208:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800620c:	2301      	movs	r3, #1
 800620e:	e09d      	b.n	800634c <_printf_i+0x1e8>
 8006210:	6833      	ldr	r3, [r6, #0]
 8006212:	6820      	ldr	r0, [r4, #0]
 8006214:	1d19      	adds	r1, r3, #4
 8006216:	6031      	str	r1, [r6, #0]
 8006218:	0606      	lsls	r6, r0, #24
 800621a:	d501      	bpl.n	8006220 <_printf_i+0xbc>
 800621c:	681d      	ldr	r5, [r3, #0]
 800621e:	e003      	b.n	8006228 <_printf_i+0xc4>
 8006220:	0645      	lsls	r5, r0, #25
 8006222:	d5fb      	bpl.n	800621c <_printf_i+0xb8>
 8006224:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006228:	2d00      	cmp	r5, #0
 800622a:	da03      	bge.n	8006234 <_printf_i+0xd0>
 800622c:	232d      	movs	r3, #45	@ 0x2d
 800622e:	426d      	negs	r5, r5
 8006230:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006234:	4859      	ldr	r0, [pc, #356]	@ (800639c <_printf_i+0x238>)
 8006236:	230a      	movs	r3, #10
 8006238:	e011      	b.n	800625e <_printf_i+0xfa>
 800623a:	6821      	ldr	r1, [r4, #0]
 800623c:	6833      	ldr	r3, [r6, #0]
 800623e:	0608      	lsls	r0, r1, #24
 8006240:	f853 5b04 	ldr.w	r5, [r3], #4
 8006244:	d402      	bmi.n	800624c <_printf_i+0xe8>
 8006246:	0649      	lsls	r1, r1, #25
 8006248:	bf48      	it	mi
 800624a:	b2ad      	uxthmi	r5, r5
 800624c:	2f6f      	cmp	r7, #111	@ 0x6f
 800624e:	4853      	ldr	r0, [pc, #332]	@ (800639c <_printf_i+0x238>)
 8006250:	6033      	str	r3, [r6, #0]
 8006252:	bf14      	ite	ne
 8006254:	230a      	movne	r3, #10
 8006256:	2308      	moveq	r3, #8
 8006258:	2100      	movs	r1, #0
 800625a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800625e:	6866      	ldr	r6, [r4, #4]
 8006260:	60a6      	str	r6, [r4, #8]
 8006262:	2e00      	cmp	r6, #0
 8006264:	bfa2      	ittt	ge
 8006266:	6821      	ldrge	r1, [r4, #0]
 8006268:	f021 0104 	bicge.w	r1, r1, #4
 800626c:	6021      	strge	r1, [r4, #0]
 800626e:	b90d      	cbnz	r5, 8006274 <_printf_i+0x110>
 8006270:	2e00      	cmp	r6, #0
 8006272:	d04b      	beq.n	800630c <_printf_i+0x1a8>
 8006274:	4616      	mov	r6, r2
 8006276:	fbb5 f1f3 	udiv	r1, r5, r3
 800627a:	fb03 5711 	mls	r7, r3, r1, r5
 800627e:	5dc7      	ldrb	r7, [r0, r7]
 8006280:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006284:	462f      	mov	r7, r5
 8006286:	42bb      	cmp	r3, r7
 8006288:	460d      	mov	r5, r1
 800628a:	d9f4      	bls.n	8006276 <_printf_i+0x112>
 800628c:	2b08      	cmp	r3, #8
 800628e:	d10b      	bne.n	80062a8 <_printf_i+0x144>
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	07df      	lsls	r7, r3, #31
 8006294:	d508      	bpl.n	80062a8 <_printf_i+0x144>
 8006296:	6923      	ldr	r3, [r4, #16]
 8006298:	6861      	ldr	r1, [r4, #4]
 800629a:	4299      	cmp	r1, r3
 800629c:	bfde      	ittt	le
 800629e:	2330      	movle	r3, #48	@ 0x30
 80062a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80062a8:	1b92      	subs	r2, r2, r6
 80062aa:	6122      	str	r2, [r4, #16]
 80062ac:	f8cd a000 	str.w	sl, [sp]
 80062b0:	464b      	mov	r3, r9
 80062b2:	aa03      	add	r2, sp, #12
 80062b4:	4621      	mov	r1, r4
 80062b6:	4640      	mov	r0, r8
 80062b8:	f7ff fee6 	bl	8006088 <_printf_common>
 80062bc:	3001      	adds	r0, #1
 80062be:	d14a      	bne.n	8006356 <_printf_i+0x1f2>
 80062c0:	f04f 30ff 	mov.w	r0, #4294967295
 80062c4:	b004      	add	sp, #16
 80062c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	f043 0320 	orr.w	r3, r3, #32
 80062d0:	6023      	str	r3, [r4, #0]
 80062d2:	4833      	ldr	r0, [pc, #204]	@ (80063a0 <_printf_i+0x23c>)
 80062d4:	2778      	movs	r7, #120	@ 0x78
 80062d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80062da:	6823      	ldr	r3, [r4, #0]
 80062dc:	6831      	ldr	r1, [r6, #0]
 80062de:	061f      	lsls	r7, r3, #24
 80062e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80062e4:	d402      	bmi.n	80062ec <_printf_i+0x188>
 80062e6:	065f      	lsls	r7, r3, #25
 80062e8:	bf48      	it	mi
 80062ea:	b2ad      	uxthmi	r5, r5
 80062ec:	6031      	str	r1, [r6, #0]
 80062ee:	07d9      	lsls	r1, r3, #31
 80062f0:	bf44      	itt	mi
 80062f2:	f043 0320 	orrmi.w	r3, r3, #32
 80062f6:	6023      	strmi	r3, [r4, #0]
 80062f8:	b11d      	cbz	r5, 8006302 <_printf_i+0x19e>
 80062fa:	2310      	movs	r3, #16
 80062fc:	e7ac      	b.n	8006258 <_printf_i+0xf4>
 80062fe:	4827      	ldr	r0, [pc, #156]	@ (800639c <_printf_i+0x238>)
 8006300:	e7e9      	b.n	80062d6 <_printf_i+0x172>
 8006302:	6823      	ldr	r3, [r4, #0]
 8006304:	f023 0320 	bic.w	r3, r3, #32
 8006308:	6023      	str	r3, [r4, #0]
 800630a:	e7f6      	b.n	80062fa <_printf_i+0x196>
 800630c:	4616      	mov	r6, r2
 800630e:	e7bd      	b.n	800628c <_printf_i+0x128>
 8006310:	6833      	ldr	r3, [r6, #0]
 8006312:	6825      	ldr	r5, [r4, #0]
 8006314:	6961      	ldr	r1, [r4, #20]
 8006316:	1d18      	adds	r0, r3, #4
 8006318:	6030      	str	r0, [r6, #0]
 800631a:	062e      	lsls	r6, r5, #24
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	d501      	bpl.n	8006324 <_printf_i+0x1c0>
 8006320:	6019      	str	r1, [r3, #0]
 8006322:	e002      	b.n	800632a <_printf_i+0x1c6>
 8006324:	0668      	lsls	r0, r5, #25
 8006326:	d5fb      	bpl.n	8006320 <_printf_i+0x1bc>
 8006328:	8019      	strh	r1, [r3, #0]
 800632a:	2300      	movs	r3, #0
 800632c:	6123      	str	r3, [r4, #16]
 800632e:	4616      	mov	r6, r2
 8006330:	e7bc      	b.n	80062ac <_printf_i+0x148>
 8006332:	6833      	ldr	r3, [r6, #0]
 8006334:	1d1a      	adds	r2, r3, #4
 8006336:	6032      	str	r2, [r6, #0]
 8006338:	681e      	ldr	r6, [r3, #0]
 800633a:	6862      	ldr	r2, [r4, #4]
 800633c:	2100      	movs	r1, #0
 800633e:	4630      	mov	r0, r6
 8006340:	f7f9 ff46 	bl	80001d0 <memchr>
 8006344:	b108      	cbz	r0, 800634a <_printf_i+0x1e6>
 8006346:	1b80      	subs	r0, r0, r6
 8006348:	6060      	str	r0, [r4, #4]
 800634a:	6863      	ldr	r3, [r4, #4]
 800634c:	6123      	str	r3, [r4, #16]
 800634e:	2300      	movs	r3, #0
 8006350:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006354:	e7aa      	b.n	80062ac <_printf_i+0x148>
 8006356:	6923      	ldr	r3, [r4, #16]
 8006358:	4632      	mov	r2, r6
 800635a:	4649      	mov	r1, r9
 800635c:	4640      	mov	r0, r8
 800635e:	47d0      	blx	sl
 8006360:	3001      	adds	r0, #1
 8006362:	d0ad      	beq.n	80062c0 <_printf_i+0x15c>
 8006364:	6823      	ldr	r3, [r4, #0]
 8006366:	079b      	lsls	r3, r3, #30
 8006368:	d413      	bmi.n	8006392 <_printf_i+0x22e>
 800636a:	68e0      	ldr	r0, [r4, #12]
 800636c:	9b03      	ldr	r3, [sp, #12]
 800636e:	4298      	cmp	r0, r3
 8006370:	bfb8      	it	lt
 8006372:	4618      	movlt	r0, r3
 8006374:	e7a6      	b.n	80062c4 <_printf_i+0x160>
 8006376:	2301      	movs	r3, #1
 8006378:	4632      	mov	r2, r6
 800637a:	4649      	mov	r1, r9
 800637c:	4640      	mov	r0, r8
 800637e:	47d0      	blx	sl
 8006380:	3001      	adds	r0, #1
 8006382:	d09d      	beq.n	80062c0 <_printf_i+0x15c>
 8006384:	3501      	adds	r5, #1
 8006386:	68e3      	ldr	r3, [r4, #12]
 8006388:	9903      	ldr	r1, [sp, #12]
 800638a:	1a5b      	subs	r3, r3, r1
 800638c:	42ab      	cmp	r3, r5
 800638e:	dcf2      	bgt.n	8006376 <_printf_i+0x212>
 8006390:	e7eb      	b.n	800636a <_printf_i+0x206>
 8006392:	2500      	movs	r5, #0
 8006394:	f104 0619 	add.w	r6, r4, #25
 8006398:	e7f5      	b.n	8006386 <_printf_i+0x222>
 800639a:	bf00      	nop
 800639c:	0800a48e 	.word	0x0800a48e
 80063a0:	0800a49f 	.word	0x0800a49f

080063a4 <std>:
 80063a4:	2300      	movs	r3, #0
 80063a6:	b510      	push	{r4, lr}
 80063a8:	4604      	mov	r4, r0
 80063aa:	e9c0 3300 	strd	r3, r3, [r0]
 80063ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063b2:	6083      	str	r3, [r0, #8]
 80063b4:	8181      	strh	r1, [r0, #12]
 80063b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80063b8:	81c2      	strh	r2, [r0, #14]
 80063ba:	6183      	str	r3, [r0, #24]
 80063bc:	4619      	mov	r1, r3
 80063be:	2208      	movs	r2, #8
 80063c0:	305c      	adds	r0, #92	@ 0x5c
 80063c2:	f000 f974 	bl	80066ae <memset>
 80063c6:	4b0d      	ldr	r3, [pc, #52]	@ (80063fc <std+0x58>)
 80063c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80063ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006400 <std+0x5c>)
 80063cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80063ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006404 <std+0x60>)
 80063d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80063d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006408 <std+0x64>)
 80063d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80063d6:	4b0d      	ldr	r3, [pc, #52]	@ (800640c <std+0x68>)
 80063d8:	6224      	str	r4, [r4, #32]
 80063da:	429c      	cmp	r4, r3
 80063dc:	d006      	beq.n	80063ec <std+0x48>
 80063de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80063e2:	4294      	cmp	r4, r2
 80063e4:	d002      	beq.n	80063ec <std+0x48>
 80063e6:	33d0      	adds	r3, #208	@ 0xd0
 80063e8:	429c      	cmp	r4, r3
 80063ea:	d105      	bne.n	80063f8 <std+0x54>
 80063ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80063f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063f4:	f000 b9d8 	b.w	80067a8 <__retarget_lock_init_recursive>
 80063f8:	bd10      	pop	{r4, pc}
 80063fa:	bf00      	nop
 80063fc:	080065f5 	.word	0x080065f5
 8006400:	08006617 	.word	0x08006617
 8006404:	0800664f 	.word	0x0800664f
 8006408:	08006673 	.word	0x08006673
 800640c:	2000074c 	.word	0x2000074c

08006410 <stdio_exit_handler>:
 8006410:	4a02      	ldr	r2, [pc, #8]	@ (800641c <stdio_exit_handler+0xc>)
 8006412:	4903      	ldr	r1, [pc, #12]	@ (8006420 <stdio_exit_handler+0x10>)
 8006414:	4803      	ldr	r0, [pc, #12]	@ (8006424 <stdio_exit_handler+0x14>)
 8006416:	f000 b869 	b.w	80064ec <_fwalk_sglue>
 800641a:	bf00      	nop
 800641c:	2000000c 	.word	0x2000000c
 8006420:	080083a9 	.word	0x080083a9
 8006424:	2000001c 	.word	0x2000001c

08006428 <cleanup_stdio>:
 8006428:	6841      	ldr	r1, [r0, #4]
 800642a:	4b0c      	ldr	r3, [pc, #48]	@ (800645c <cleanup_stdio+0x34>)
 800642c:	4299      	cmp	r1, r3
 800642e:	b510      	push	{r4, lr}
 8006430:	4604      	mov	r4, r0
 8006432:	d001      	beq.n	8006438 <cleanup_stdio+0x10>
 8006434:	f001 ffb8 	bl	80083a8 <_fflush_r>
 8006438:	68a1      	ldr	r1, [r4, #8]
 800643a:	4b09      	ldr	r3, [pc, #36]	@ (8006460 <cleanup_stdio+0x38>)
 800643c:	4299      	cmp	r1, r3
 800643e:	d002      	beq.n	8006446 <cleanup_stdio+0x1e>
 8006440:	4620      	mov	r0, r4
 8006442:	f001 ffb1 	bl	80083a8 <_fflush_r>
 8006446:	68e1      	ldr	r1, [r4, #12]
 8006448:	4b06      	ldr	r3, [pc, #24]	@ (8006464 <cleanup_stdio+0x3c>)
 800644a:	4299      	cmp	r1, r3
 800644c:	d004      	beq.n	8006458 <cleanup_stdio+0x30>
 800644e:	4620      	mov	r0, r4
 8006450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006454:	f001 bfa8 	b.w	80083a8 <_fflush_r>
 8006458:	bd10      	pop	{r4, pc}
 800645a:	bf00      	nop
 800645c:	2000074c 	.word	0x2000074c
 8006460:	200007b4 	.word	0x200007b4
 8006464:	2000081c 	.word	0x2000081c

08006468 <global_stdio_init.part.0>:
 8006468:	b510      	push	{r4, lr}
 800646a:	4b0b      	ldr	r3, [pc, #44]	@ (8006498 <global_stdio_init.part.0+0x30>)
 800646c:	4c0b      	ldr	r4, [pc, #44]	@ (800649c <global_stdio_init.part.0+0x34>)
 800646e:	4a0c      	ldr	r2, [pc, #48]	@ (80064a0 <global_stdio_init.part.0+0x38>)
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	4620      	mov	r0, r4
 8006474:	2200      	movs	r2, #0
 8006476:	2104      	movs	r1, #4
 8006478:	f7ff ff94 	bl	80063a4 <std>
 800647c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006480:	2201      	movs	r2, #1
 8006482:	2109      	movs	r1, #9
 8006484:	f7ff ff8e 	bl	80063a4 <std>
 8006488:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800648c:	2202      	movs	r2, #2
 800648e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006492:	2112      	movs	r1, #18
 8006494:	f7ff bf86 	b.w	80063a4 <std>
 8006498:	20000884 	.word	0x20000884
 800649c:	2000074c 	.word	0x2000074c
 80064a0:	08006411 	.word	0x08006411

080064a4 <__sfp_lock_acquire>:
 80064a4:	4801      	ldr	r0, [pc, #4]	@ (80064ac <__sfp_lock_acquire+0x8>)
 80064a6:	f000 b980 	b.w	80067aa <__retarget_lock_acquire_recursive>
 80064aa:	bf00      	nop
 80064ac:	2000088d 	.word	0x2000088d

080064b0 <__sfp_lock_release>:
 80064b0:	4801      	ldr	r0, [pc, #4]	@ (80064b8 <__sfp_lock_release+0x8>)
 80064b2:	f000 b97b 	b.w	80067ac <__retarget_lock_release_recursive>
 80064b6:	bf00      	nop
 80064b8:	2000088d 	.word	0x2000088d

080064bc <__sinit>:
 80064bc:	b510      	push	{r4, lr}
 80064be:	4604      	mov	r4, r0
 80064c0:	f7ff fff0 	bl	80064a4 <__sfp_lock_acquire>
 80064c4:	6a23      	ldr	r3, [r4, #32]
 80064c6:	b11b      	cbz	r3, 80064d0 <__sinit+0x14>
 80064c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064cc:	f7ff bff0 	b.w	80064b0 <__sfp_lock_release>
 80064d0:	4b04      	ldr	r3, [pc, #16]	@ (80064e4 <__sinit+0x28>)
 80064d2:	6223      	str	r3, [r4, #32]
 80064d4:	4b04      	ldr	r3, [pc, #16]	@ (80064e8 <__sinit+0x2c>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1f5      	bne.n	80064c8 <__sinit+0xc>
 80064dc:	f7ff ffc4 	bl	8006468 <global_stdio_init.part.0>
 80064e0:	e7f2      	b.n	80064c8 <__sinit+0xc>
 80064e2:	bf00      	nop
 80064e4:	08006429 	.word	0x08006429
 80064e8:	20000884 	.word	0x20000884

080064ec <_fwalk_sglue>:
 80064ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064f0:	4607      	mov	r7, r0
 80064f2:	4688      	mov	r8, r1
 80064f4:	4614      	mov	r4, r2
 80064f6:	2600      	movs	r6, #0
 80064f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064fc:	f1b9 0901 	subs.w	r9, r9, #1
 8006500:	d505      	bpl.n	800650e <_fwalk_sglue+0x22>
 8006502:	6824      	ldr	r4, [r4, #0]
 8006504:	2c00      	cmp	r4, #0
 8006506:	d1f7      	bne.n	80064f8 <_fwalk_sglue+0xc>
 8006508:	4630      	mov	r0, r6
 800650a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800650e:	89ab      	ldrh	r3, [r5, #12]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d907      	bls.n	8006524 <_fwalk_sglue+0x38>
 8006514:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006518:	3301      	adds	r3, #1
 800651a:	d003      	beq.n	8006524 <_fwalk_sglue+0x38>
 800651c:	4629      	mov	r1, r5
 800651e:	4638      	mov	r0, r7
 8006520:	47c0      	blx	r8
 8006522:	4306      	orrs	r6, r0
 8006524:	3568      	adds	r5, #104	@ 0x68
 8006526:	e7e9      	b.n	80064fc <_fwalk_sglue+0x10>

08006528 <iprintf>:
 8006528:	b40f      	push	{r0, r1, r2, r3}
 800652a:	b507      	push	{r0, r1, r2, lr}
 800652c:	4906      	ldr	r1, [pc, #24]	@ (8006548 <iprintf+0x20>)
 800652e:	ab04      	add	r3, sp, #16
 8006530:	6808      	ldr	r0, [r1, #0]
 8006532:	f853 2b04 	ldr.w	r2, [r3], #4
 8006536:	6881      	ldr	r1, [r0, #8]
 8006538:	9301      	str	r3, [sp, #4]
 800653a:	f001 fd99 	bl	8008070 <_vfiprintf_r>
 800653e:	b003      	add	sp, #12
 8006540:	f85d eb04 	ldr.w	lr, [sp], #4
 8006544:	b004      	add	sp, #16
 8006546:	4770      	bx	lr
 8006548:	20000018 	.word	0x20000018

0800654c <sniprintf>:
 800654c:	b40c      	push	{r2, r3}
 800654e:	b530      	push	{r4, r5, lr}
 8006550:	4b17      	ldr	r3, [pc, #92]	@ (80065b0 <sniprintf+0x64>)
 8006552:	1e0c      	subs	r4, r1, #0
 8006554:	681d      	ldr	r5, [r3, #0]
 8006556:	b09d      	sub	sp, #116	@ 0x74
 8006558:	da08      	bge.n	800656c <sniprintf+0x20>
 800655a:	238b      	movs	r3, #139	@ 0x8b
 800655c:	602b      	str	r3, [r5, #0]
 800655e:	f04f 30ff 	mov.w	r0, #4294967295
 8006562:	b01d      	add	sp, #116	@ 0x74
 8006564:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006568:	b002      	add	sp, #8
 800656a:	4770      	bx	lr
 800656c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006570:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006574:	bf14      	ite	ne
 8006576:	f104 33ff 	addne.w	r3, r4, #4294967295
 800657a:	4623      	moveq	r3, r4
 800657c:	9304      	str	r3, [sp, #16]
 800657e:	9307      	str	r3, [sp, #28]
 8006580:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006584:	9002      	str	r0, [sp, #8]
 8006586:	9006      	str	r0, [sp, #24]
 8006588:	f8ad 3016 	strh.w	r3, [sp, #22]
 800658c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800658e:	ab21      	add	r3, sp, #132	@ 0x84
 8006590:	a902      	add	r1, sp, #8
 8006592:	4628      	mov	r0, r5
 8006594:	9301      	str	r3, [sp, #4]
 8006596:	f001 fc45 	bl	8007e24 <_svfiprintf_r>
 800659a:	1c43      	adds	r3, r0, #1
 800659c:	bfbc      	itt	lt
 800659e:	238b      	movlt	r3, #139	@ 0x8b
 80065a0:	602b      	strlt	r3, [r5, #0]
 80065a2:	2c00      	cmp	r4, #0
 80065a4:	d0dd      	beq.n	8006562 <sniprintf+0x16>
 80065a6:	9b02      	ldr	r3, [sp, #8]
 80065a8:	2200      	movs	r2, #0
 80065aa:	701a      	strb	r2, [r3, #0]
 80065ac:	e7d9      	b.n	8006562 <sniprintf+0x16>
 80065ae:	bf00      	nop
 80065b0:	20000018 	.word	0x20000018

080065b4 <siprintf>:
 80065b4:	b40e      	push	{r1, r2, r3}
 80065b6:	b500      	push	{lr}
 80065b8:	b09c      	sub	sp, #112	@ 0x70
 80065ba:	ab1d      	add	r3, sp, #116	@ 0x74
 80065bc:	9002      	str	r0, [sp, #8]
 80065be:	9006      	str	r0, [sp, #24]
 80065c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80065c4:	4809      	ldr	r0, [pc, #36]	@ (80065ec <siprintf+0x38>)
 80065c6:	9107      	str	r1, [sp, #28]
 80065c8:	9104      	str	r1, [sp, #16]
 80065ca:	4909      	ldr	r1, [pc, #36]	@ (80065f0 <siprintf+0x3c>)
 80065cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80065d0:	9105      	str	r1, [sp, #20]
 80065d2:	6800      	ldr	r0, [r0, #0]
 80065d4:	9301      	str	r3, [sp, #4]
 80065d6:	a902      	add	r1, sp, #8
 80065d8:	f001 fc24 	bl	8007e24 <_svfiprintf_r>
 80065dc:	9b02      	ldr	r3, [sp, #8]
 80065de:	2200      	movs	r2, #0
 80065e0:	701a      	strb	r2, [r3, #0]
 80065e2:	b01c      	add	sp, #112	@ 0x70
 80065e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80065e8:	b003      	add	sp, #12
 80065ea:	4770      	bx	lr
 80065ec:	20000018 	.word	0x20000018
 80065f0:	ffff0208 	.word	0xffff0208

080065f4 <__sread>:
 80065f4:	b510      	push	{r4, lr}
 80065f6:	460c      	mov	r4, r1
 80065f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065fc:	f000 f886 	bl	800670c <_read_r>
 8006600:	2800      	cmp	r0, #0
 8006602:	bfab      	itete	ge
 8006604:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006606:	89a3      	ldrhlt	r3, [r4, #12]
 8006608:	181b      	addge	r3, r3, r0
 800660a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800660e:	bfac      	ite	ge
 8006610:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006612:	81a3      	strhlt	r3, [r4, #12]
 8006614:	bd10      	pop	{r4, pc}

08006616 <__swrite>:
 8006616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800661a:	461f      	mov	r7, r3
 800661c:	898b      	ldrh	r3, [r1, #12]
 800661e:	05db      	lsls	r3, r3, #23
 8006620:	4605      	mov	r5, r0
 8006622:	460c      	mov	r4, r1
 8006624:	4616      	mov	r6, r2
 8006626:	d505      	bpl.n	8006634 <__swrite+0x1e>
 8006628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800662c:	2302      	movs	r3, #2
 800662e:	2200      	movs	r2, #0
 8006630:	f000 f85a 	bl	80066e8 <_lseek_r>
 8006634:	89a3      	ldrh	r3, [r4, #12]
 8006636:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800663a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800663e:	81a3      	strh	r3, [r4, #12]
 8006640:	4632      	mov	r2, r6
 8006642:	463b      	mov	r3, r7
 8006644:	4628      	mov	r0, r5
 8006646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800664a:	f000 b871 	b.w	8006730 <_write_r>

0800664e <__sseek>:
 800664e:	b510      	push	{r4, lr}
 8006650:	460c      	mov	r4, r1
 8006652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006656:	f000 f847 	bl	80066e8 <_lseek_r>
 800665a:	1c43      	adds	r3, r0, #1
 800665c:	89a3      	ldrh	r3, [r4, #12]
 800665e:	bf15      	itete	ne
 8006660:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006662:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006666:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800666a:	81a3      	strheq	r3, [r4, #12]
 800666c:	bf18      	it	ne
 800666e:	81a3      	strhne	r3, [r4, #12]
 8006670:	bd10      	pop	{r4, pc}

08006672 <__sclose>:
 8006672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006676:	f000 b827 	b.w	80066c8 <_close_r>

0800667a <memmove>:
 800667a:	4288      	cmp	r0, r1
 800667c:	b510      	push	{r4, lr}
 800667e:	eb01 0402 	add.w	r4, r1, r2
 8006682:	d902      	bls.n	800668a <memmove+0x10>
 8006684:	4284      	cmp	r4, r0
 8006686:	4623      	mov	r3, r4
 8006688:	d807      	bhi.n	800669a <memmove+0x20>
 800668a:	1e43      	subs	r3, r0, #1
 800668c:	42a1      	cmp	r1, r4
 800668e:	d008      	beq.n	80066a2 <memmove+0x28>
 8006690:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006694:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006698:	e7f8      	b.n	800668c <memmove+0x12>
 800669a:	4402      	add	r2, r0
 800669c:	4601      	mov	r1, r0
 800669e:	428a      	cmp	r2, r1
 80066a0:	d100      	bne.n	80066a4 <memmove+0x2a>
 80066a2:	bd10      	pop	{r4, pc}
 80066a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066a8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066ac:	e7f7      	b.n	800669e <memmove+0x24>

080066ae <memset>:
 80066ae:	4402      	add	r2, r0
 80066b0:	4603      	mov	r3, r0
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d100      	bne.n	80066b8 <memset+0xa>
 80066b6:	4770      	bx	lr
 80066b8:	f803 1b01 	strb.w	r1, [r3], #1
 80066bc:	e7f9      	b.n	80066b2 <memset+0x4>
	...

080066c0 <_localeconv_r>:
 80066c0:	4800      	ldr	r0, [pc, #0]	@ (80066c4 <_localeconv_r+0x4>)
 80066c2:	4770      	bx	lr
 80066c4:	20000158 	.word	0x20000158

080066c8 <_close_r>:
 80066c8:	b538      	push	{r3, r4, r5, lr}
 80066ca:	4d06      	ldr	r5, [pc, #24]	@ (80066e4 <_close_r+0x1c>)
 80066cc:	2300      	movs	r3, #0
 80066ce:	4604      	mov	r4, r0
 80066d0:	4608      	mov	r0, r1
 80066d2:	602b      	str	r3, [r5, #0]
 80066d4:	f7fb ff2c 	bl	8002530 <_close>
 80066d8:	1c43      	adds	r3, r0, #1
 80066da:	d102      	bne.n	80066e2 <_close_r+0x1a>
 80066dc:	682b      	ldr	r3, [r5, #0]
 80066de:	b103      	cbz	r3, 80066e2 <_close_r+0x1a>
 80066e0:	6023      	str	r3, [r4, #0]
 80066e2:	bd38      	pop	{r3, r4, r5, pc}
 80066e4:	20000888 	.word	0x20000888

080066e8 <_lseek_r>:
 80066e8:	b538      	push	{r3, r4, r5, lr}
 80066ea:	4d07      	ldr	r5, [pc, #28]	@ (8006708 <_lseek_r+0x20>)
 80066ec:	4604      	mov	r4, r0
 80066ee:	4608      	mov	r0, r1
 80066f0:	4611      	mov	r1, r2
 80066f2:	2200      	movs	r2, #0
 80066f4:	602a      	str	r2, [r5, #0]
 80066f6:	461a      	mov	r2, r3
 80066f8:	f7fb ff41 	bl	800257e <_lseek>
 80066fc:	1c43      	adds	r3, r0, #1
 80066fe:	d102      	bne.n	8006706 <_lseek_r+0x1e>
 8006700:	682b      	ldr	r3, [r5, #0]
 8006702:	b103      	cbz	r3, 8006706 <_lseek_r+0x1e>
 8006704:	6023      	str	r3, [r4, #0]
 8006706:	bd38      	pop	{r3, r4, r5, pc}
 8006708:	20000888 	.word	0x20000888

0800670c <_read_r>:
 800670c:	b538      	push	{r3, r4, r5, lr}
 800670e:	4d07      	ldr	r5, [pc, #28]	@ (800672c <_read_r+0x20>)
 8006710:	4604      	mov	r4, r0
 8006712:	4608      	mov	r0, r1
 8006714:	4611      	mov	r1, r2
 8006716:	2200      	movs	r2, #0
 8006718:	602a      	str	r2, [r5, #0]
 800671a:	461a      	mov	r2, r3
 800671c:	f7fb fecf 	bl	80024be <_read>
 8006720:	1c43      	adds	r3, r0, #1
 8006722:	d102      	bne.n	800672a <_read_r+0x1e>
 8006724:	682b      	ldr	r3, [r5, #0]
 8006726:	b103      	cbz	r3, 800672a <_read_r+0x1e>
 8006728:	6023      	str	r3, [r4, #0]
 800672a:	bd38      	pop	{r3, r4, r5, pc}
 800672c:	20000888 	.word	0x20000888

08006730 <_write_r>:
 8006730:	b538      	push	{r3, r4, r5, lr}
 8006732:	4d07      	ldr	r5, [pc, #28]	@ (8006750 <_write_r+0x20>)
 8006734:	4604      	mov	r4, r0
 8006736:	4608      	mov	r0, r1
 8006738:	4611      	mov	r1, r2
 800673a:	2200      	movs	r2, #0
 800673c:	602a      	str	r2, [r5, #0]
 800673e:	461a      	mov	r2, r3
 8006740:	f7fb feda 	bl	80024f8 <_write>
 8006744:	1c43      	adds	r3, r0, #1
 8006746:	d102      	bne.n	800674e <_write_r+0x1e>
 8006748:	682b      	ldr	r3, [r5, #0]
 800674a:	b103      	cbz	r3, 800674e <_write_r+0x1e>
 800674c:	6023      	str	r3, [r4, #0]
 800674e:	bd38      	pop	{r3, r4, r5, pc}
 8006750:	20000888 	.word	0x20000888

08006754 <__errno>:
 8006754:	4b01      	ldr	r3, [pc, #4]	@ (800675c <__errno+0x8>)
 8006756:	6818      	ldr	r0, [r3, #0]
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	20000018 	.word	0x20000018

08006760 <__libc_init_array>:
 8006760:	b570      	push	{r4, r5, r6, lr}
 8006762:	4d0d      	ldr	r5, [pc, #52]	@ (8006798 <__libc_init_array+0x38>)
 8006764:	4c0d      	ldr	r4, [pc, #52]	@ (800679c <__libc_init_array+0x3c>)
 8006766:	1b64      	subs	r4, r4, r5
 8006768:	10a4      	asrs	r4, r4, #2
 800676a:	2600      	movs	r6, #0
 800676c:	42a6      	cmp	r6, r4
 800676e:	d109      	bne.n	8006784 <__libc_init_array+0x24>
 8006770:	4d0b      	ldr	r5, [pc, #44]	@ (80067a0 <__libc_init_array+0x40>)
 8006772:	4c0c      	ldr	r4, [pc, #48]	@ (80067a4 <__libc_init_array+0x44>)
 8006774:	f003 fa8e 	bl	8009c94 <_init>
 8006778:	1b64      	subs	r4, r4, r5
 800677a:	10a4      	asrs	r4, r4, #2
 800677c:	2600      	movs	r6, #0
 800677e:	42a6      	cmp	r6, r4
 8006780:	d105      	bne.n	800678e <__libc_init_array+0x2e>
 8006782:	bd70      	pop	{r4, r5, r6, pc}
 8006784:	f855 3b04 	ldr.w	r3, [r5], #4
 8006788:	4798      	blx	r3
 800678a:	3601      	adds	r6, #1
 800678c:	e7ee      	b.n	800676c <__libc_init_array+0xc>
 800678e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006792:	4798      	blx	r3
 8006794:	3601      	adds	r6, #1
 8006796:	e7f2      	b.n	800677e <__libc_init_array+0x1e>
 8006798:	0800a828 	.word	0x0800a828
 800679c:	0800a828 	.word	0x0800a828
 80067a0:	0800a828 	.word	0x0800a828
 80067a4:	0800a82c 	.word	0x0800a82c

080067a8 <__retarget_lock_init_recursive>:
 80067a8:	4770      	bx	lr

080067aa <__retarget_lock_acquire_recursive>:
 80067aa:	4770      	bx	lr

080067ac <__retarget_lock_release_recursive>:
 80067ac:	4770      	bx	lr

080067ae <memcpy>:
 80067ae:	440a      	add	r2, r1
 80067b0:	4291      	cmp	r1, r2
 80067b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80067b6:	d100      	bne.n	80067ba <memcpy+0xc>
 80067b8:	4770      	bx	lr
 80067ba:	b510      	push	{r4, lr}
 80067bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067c4:	4291      	cmp	r1, r2
 80067c6:	d1f9      	bne.n	80067bc <memcpy+0xe>
 80067c8:	bd10      	pop	{r4, pc}

080067ca <quorem>:
 80067ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ce:	6903      	ldr	r3, [r0, #16]
 80067d0:	690c      	ldr	r4, [r1, #16]
 80067d2:	42a3      	cmp	r3, r4
 80067d4:	4607      	mov	r7, r0
 80067d6:	db7e      	blt.n	80068d6 <quorem+0x10c>
 80067d8:	3c01      	subs	r4, #1
 80067da:	f101 0814 	add.w	r8, r1, #20
 80067de:	00a3      	lsls	r3, r4, #2
 80067e0:	f100 0514 	add.w	r5, r0, #20
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067ea:	9301      	str	r3, [sp, #4]
 80067ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80067f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067f4:	3301      	adds	r3, #1
 80067f6:	429a      	cmp	r2, r3
 80067f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80067fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8006800:	d32e      	bcc.n	8006860 <quorem+0x96>
 8006802:	f04f 0a00 	mov.w	sl, #0
 8006806:	46c4      	mov	ip, r8
 8006808:	46ae      	mov	lr, r5
 800680a:	46d3      	mov	fp, sl
 800680c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006810:	b298      	uxth	r0, r3
 8006812:	fb06 a000 	mla	r0, r6, r0, sl
 8006816:	0c02      	lsrs	r2, r0, #16
 8006818:	0c1b      	lsrs	r3, r3, #16
 800681a:	fb06 2303 	mla	r3, r6, r3, r2
 800681e:	f8de 2000 	ldr.w	r2, [lr]
 8006822:	b280      	uxth	r0, r0
 8006824:	b292      	uxth	r2, r2
 8006826:	1a12      	subs	r2, r2, r0
 8006828:	445a      	add	r2, fp
 800682a:	f8de 0000 	ldr.w	r0, [lr]
 800682e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006832:	b29b      	uxth	r3, r3
 8006834:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006838:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800683c:	b292      	uxth	r2, r2
 800683e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006842:	45e1      	cmp	r9, ip
 8006844:	f84e 2b04 	str.w	r2, [lr], #4
 8006848:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800684c:	d2de      	bcs.n	800680c <quorem+0x42>
 800684e:	9b00      	ldr	r3, [sp, #0]
 8006850:	58eb      	ldr	r3, [r5, r3]
 8006852:	b92b      	cbnz	r3, 8006860 <quorem+0x96>
 8006854:	9b01      	ldr	r3, [sp, #4]
 8006856:	3b04      	subs	r3, #4
 8006858:	429d      	cmp	r5, r3
 800685a:	461a      	mov	r2, r3
 800685c:	d32f      	bcc.n	80068be <quorem+0xf4>
 800685e:	613c      	str	r4, [r7, #16]
 8006860:	4638      	mov	r0, r7
 8006862:	f001 f97b 	bl	8007b5c <__mcmp>
 8006866:	2800      	cmp	r0, #0
 8006868:	db25      	blt.n	80068b6 <quorem+0xec>
 800686a:	4629      	mov	r1, r5
 800686c:	2000      	movs	r0, #0
 800686e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006872:	f8d1 c000 	ldr.w	ip, [r1]
 8006876:	fa1f fe82 	uxth.w	lr, r2
 800687a:	fa1f f38c 	uxth.w	r3, ip
 800687e:	eba3 030e 	sub.w	r3, r3, lr
 8006882:	4403      	add	r3, r0
 8006884:	0c12      	lsrs	r2, r2, #16
 8006886:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800688a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800688e:	b29b      	uxth	r3, r3
 8006890:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006894:	45c1      	cmp	r9, r8
 8006896:	f841 3b04 	str.w	r3, [r1], #4
 800689a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800689e:	d2e6      	bcs.n	800686e <quorem+0xa4>
 80068a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068a8:	b922      	cbnz	r2, 80068b4 <quorem+0xea>
 80068aa:	3b04      	subs	r3, #4
 80068ac:	429d      	cmp	r5, r3
 80068ae:	461a      	mov	r2, r3
 80068b0:	d30b      	bcc.n	80068ca <quorem+0x100>
 80068b2:	613c      	str	r4, [r7, #16]
 80068b4:	3601      	adds	r6, #1
 80068b6:	4630      	mov	r0, r6
 80068b8:	b003      	add	sp, #12
 80068ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068be:	6812      	ldr	r2, [r2, #0]
 80068c0:	3b04      	subs	r3, #4
 80068c2:	2a00      	cmp	r2, #0
 80068c4:	d1cb      	bne.n	800685e <quorem+0x94>
 80068c6:	3c01      	subs	r4, #1
 80068c8:	e7c6      	b.n	8006858 <quorem+0x8e>
 80068ca:	6812      	ldr	r2, [r2, #0]
 80068cc:	3b04      	subs	r3, #4
 80068ce:	2a00      	cmp	r2, #0
 80068d0:	d1ef      	bne.n	80068b2 <quorem+0xe8>
 80068d2:	3c01      	subs	r4, #1
 80068d4:	e7ea      	b.n	80068ac <quorem+0xe2>
 80068d6:	2000      	movs	r0, #0
 80068d8:	e7ee      	b.n	80068b8 <quorem+0xee>
 80068da:	0000      	movs	r0, r0
 80068dc:	0000      	movs	r0, r0
	...

080068e0 <_dtoa_r>:
 80068e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e4:	69c7      	ldr	r7, [r0, #28]
 80068e6:	b099      	sub	sp, #100	@ 0x64
 80068e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80068ec:	ec55 4b10 	vmov	r4, r5, d0
 80068f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80068f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80068f4:	4683      	mov	fp, r0
 80068f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80068f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80068fa:	b97f      	cbnz	r7, 800691c <_dtoa_r+0x3c>
 80068fc:	2010      	movs	r0, #16
 80068fe:	f000 fdfd 	bl	80074fc <malloc>
 8006902:	4602      	mov	r2, r0
 8006904:	f8cb 001c 	str.w	r0, [fp, #28]
 8006908:	b920      	cbnz	r0, 8006914 <_dtoa_r+0x34>
 800690a:	4ba7      	ldr	r3, [pc, #668]	@ (8006ba8 <_dtoa_r+0x2c8>)
 800690c:	21ef      	movs	r1, #239	@ 0xef
 800690e:	48a7      	ldr	r0, [pc, #668]	@ (8006bac <_dtoa_r+0x2cc>)
 8006910:	f001 fe16 	bl	8008540 <__assert_func>
 8006914:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006918:	6007      	str	r7, [r0, #0]
 800691a:	60c7      	str	r7, [r0, #12]
 800691c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006920:	6819      	ldr	r1, [r3, #0]
 8006922:	b159      	cbz	r1, 800693c <_dtoa_r+0x5c>
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	604a      	str	r2, [r1, #4]
 8006928:	2301      	movs	r3, #1
 800692a:	4093      	lsls	r3, r2
 800692c:	608b      	str	r3, [r1, #8]
 800692e:	4658      	mov	r0, fp
 8006930:	f000 feda 	bl	80076e8 <_Bfree>
 8006934:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006938:	2200      	movs	r2, #0
 800693a:	601a      	str	r2, [r3, #0]
 800693c:	1e2b      	subs	r3, r5, #0
 800693e:	bfb9      	ittee	lt
 8006940:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006944:	9303      	strlt	r3, [sp, #12]
 8006946:	2300      	movge	r3, #0
 8006948:	6033      	strge	r3, [r6, #0]
 800694a:	9f03      	ldr	r7, [sp, #12]
 800694c:	4b98      	ldr	r3, [pc, #608]	@ (8006bb0 <_dtoa_r+0x2d0>)
 800694e:	bfbc      	itt	lt
 8006950:	2201      	movlt	r2, #1
 8006952:	6032      	strlt	r2, [r6, #0]
 8006954:	43bb      	bics	r3, r7
 8006956:	d112      	bne.n	800697e <_dtoa_r+0x9e>
 8006958:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800695a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800695e:	6013      	str	r3, [r2, #0]
 8006960:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006964:	4323      	orrs	r3, r4
 8006966:	f000 854d 	beq.w	8007404 <_dtoa_r+0xb24>
 800696a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800696c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006bc4 <_dtoa_r+0x2e4>
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 854f 	beq.w	8007414 <_dtoa_r+0xb34>
 8006976:	f10a 0303 	add.w	r3, sl, #3
 800697a:	f000 bd49 	b.w	8007410 <_dtoa_r+0xb30>
 800697e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006982:	2200      	movs	r2, #0
 8006984:	ec51 0b17 	vmov	r0, r1, d7
 8006988:	2300      	movs	r3, #0
 800698a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800698e:	f7fa f89b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006992:	4680      	mov	r8, r0
 8006994:	b158      	cbz	r0, 80069ae <_dtoa_r+0xce>
 8006996:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006998:	2301      	movs	r3, #1
 800699a:	6013      	str	r3, [r2, #0]
 800699c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800699e:	b113      	cbz	r3, 80069a6 <_dtoa_r+0xc6>
 80069a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80069a2:	4b84      	ldr	r3, [pc, #528]	@ (8006bb4 <_dtoa_r+0x2d4>)
 80069a4:	6013      	str	r3, [r2, #0]
 80069a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006bc8 <_dtoa_r+0x2e8>
 80069aa:	f000 bd33 	b.w	8007414 <_dtoa_r+0xb34>
 80069ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80069b2:	aa16      	add	r2, sp, #88	@ 0x58
 80069b4:	a917      	add	r1, sp, #92	@ 0x5c
 80069b6:	4658      	mov	r0, fp
 80069b8:	f001 f980 	bl	8007cbc <__d2b>
 80069bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80069c0:	4681      	mov	r9, r0
 80069c2:	2e00      	cmp	r6, #0
 80069c4:	d077      	beq.n	8006ab6 <_dtoa_r+0x1d6>
 80069c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80069cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80069d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80069dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80069e0:	4619      	mov	r1, r3
 80069e2:	2200      	movs	r2, #0
 80069e4:	4b74      	ldr	r3, [pc, #464]	@ (8006bb8 <_dtoa_r+0x2d8>)
 80069e6:	f7f9 fc4f 	bl	8000288 <__aeabi_dsub>
 80069ea:	a369      	add	r3, pc, #420	@ (adr r3, 8006b90 <_dtoa_r+0x2b0>)
 80069ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f0:	f7f9 fe02 	bl	80005f8 <__aeabi_dmul>
 80069f4:	a368      	add	r3, pc, #416	@ (adr r3, 8006b98 <_dtoa_r+0x2b8>)
 80069f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fa:	f7f9 fc47 	bl	800028c <__adddf3>
 80069fe:	4604      	mov	r4, r0
 8006a00:	4630      	mov	r0, r6
 8006a02:	460d      	mov	r5, r1
 8006a04:	f7f9 fd8e 	bl	8000524 <__aeabi_i2d>
 8006a08:	a365      	add	r3, pc, #404	@ (adr r3, 8006ba0 <_dtoa_r+0x2c0>)
 8006a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0e:	f7f9 fdf3 	bl	80005f8 <__aeabi_dmul>
 8006a12:	4602      	mov	r2, r0
 8006a14:	460b      	mov	r3, r1
 8006a16:	4620      	mov	r0, r4
 8006a18:	4629      	mov	r1, r5
 8006a1a:	f7f9 fc37 	bl	800028c <__adddf3>
 8006a1e:	4604      	mov	r4, r0
 8006a20:	460d      	mov	r5, r1
 8006a22:	f7fa f899 	bl	8000b58 <__aeabi_d2iz>
 8006a26:	2200      	movs	r2, #0
 8006a28:	4607      	mov	r7, r0
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	4629      	mov	r1, r5
 8006a30:	f7fa f854 	bl	8000adc <__aeabi_dcmplt>
 8006a34:	b140      	cbz	r0, 8006a48 <_dtoa_r+0x168>
 8006a36:	4638      	mov	r0, r7
 8006a38:	f7f9 fd74 	bl	8000524 <__aeabi_i2d>
 8006a3c:	4622      	mov	r2, r4
 8006a3e:	462b      	mov	r3, r5
 8006a40:	f7fa f842 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a44:	b900      	cbnz	r0, 8006a48 <_dtoa_r+0x168>
 8006a46:	3f01      	subs	r7, #1
 8006a48:	2f16      	cmp	r7, #22
 8006a4a:	d851      	bhi.n	8006af0 <_dtoa_r+0x210>
 8006a4c:	4b5b      	ldr	r3, [pc, #364]	@ (8006bbc <_dtoa_r+0x2dc>)
 8006a4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a5a:	f7fa f83f 	bl	8000adc <__aeabi_dcmplt>
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	d048      	beq.n	8006af4 <_dtoa_r+0x214>
 8006a62:	3f01      	subs	r7, #1
 8006a64:	2300      	movs	r3, #0
 8006a66:	9312      	str	r3, [sp, #72]	@ 0x48
 8006a68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006a6a:	1b9b      	subs	r3, r3, r6
 8006a6c:	1e5a      	subs	r2, r3, #1
 8006a6e:	bf44      	itt	mi
 8006a70:	f1c3 0801 	rsbmi	r8, r3, #1
 8006a74:	2300      	movmi	r3, #0
 8006a76:	9208      	str	r2, [sp, #32]
 8006a78:	bf54      	ite	pl
 8006a7a:	f04f 0800 	movpl.w	r8, #0
 8006a7e:	9308      	strmi	r3, [sp, #32]
 8006a80:	2f00      	cmp	r7, #0
 8006a82:	db39      	blt.n	8006af8 <_dtoa_r+0x218>
 8006a84:	9b08      	ldr	r3, [sp, #32]
 8006a86:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006a88:	443b      	add	r3, r7
 8006a8a:	9308      	str	r3, [sp, #32]
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a92:	2b09      	cmp	r3, #9
 8006a94:	d864      	bhi.n	8006b60 <_dtoa_r+0x280>
 8006a96:	2b05      	cmp	r3, #5
 8006a98:	bfc4      	itt	gt
 8006a9a:	3b04      	subgt	r3, #4
 8006a9c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006a9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aa0:	f1a3 0302 	sub.w	r3, r3, #2
 8006aa4:	bfcc      	ite	gt
 8006aa6:	2400      	movgt	r4, #0
 8006aa8:	2401      	movle	r4, #1
 8006aaa:	2b03      	cmp	r3, #3
 8006aac:	d863      	bhi.n	8006b76 <_dtoa_r+0x296>
 8006aae:	e8df f003 	tbb	[pc, r3]
 8006ab2:	372a      	.short	0x372a
 8006ab4:	5535      	.short	0x5535
 8006ab6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006aba:	441e      	add	r6, r3
 8006abc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006ac0:	2b20      	cmp	r3, #32
 8006ac2:	bfc1      	itttt	gt
 8006ac4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006ac8:	409f      	lslgt	r7, r3
 8006aca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006ace:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006ad2:	bfd6      	itet	le
 8006ad4:	f1c3 0320 	rsble	r3, r3, #32
 8006ad8:	ea47 0003 	orrgt.w	r0, r7, r3
 8006adc:	fa04 f003 	lslle.w	r0, r4, r3
 8006ae0:	f7f9 fd10 	bl	8000504 <__aeabi_ui2d>
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006aea:	3e01      	subs	r6, #1
 8006aec:	9214      	str	r2, [sp, #80]	@ 0x50
 8006aee:	e777      	b.n	80069e0 <_dtoa_r+0x100>
 8006af0:	2301      	movs	r3, #1
 8006af2:	e7b8      	b.n	8006a66 <_dtoa_r+0x186>
 8006af4:	9012      	str	r0, [sp, #72]	@ 0x48
 8006af6:	e7b7      	b.n	8006a68 <_dtoa_r+0x188>
 8006af8:	427b      	negs	r3, r7
 8006afa:	930a      	str	r3, [sp, #40]	@ 0x28
 8006afc:	2300      	movs	r3, #0
 8006afe:	eba8 0807 	sub.w	r8, r8, r7
 8006b02:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006b04:	e7c4      	b.n	8006a90 <_dtoa_r+0x1b0>
 8006b06:	2300      	movs	r3, #0
 8006b08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	dc35      	bgt.n	8006b7c <_dtoa_r+0x29c>
 8006b10:	2301      	movs	r3, #1
 8006b12:	9300      	str	r3, [sp, #0]
 8006b14:	9307      	str	r3, [sp, #28]
 8006b16:	461a      	mov	r2, r3
 8006b18:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b1a:	e00b      	b.n	8006b34 <_dtoa_r+0x254>
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e7f3      	b.n	8006b08 <_dtoa_r+0x228>
 8006b20:	2300      	movs	r3, #0
 8006b22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b26:	18fb      	adds	r3, r7, r3
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	9307      	str	r3, [sp, #28]
 8006b30:	bfb8      	it	lt
 8006b32:	2301      	movlt	r3, #1
 8006b34:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006b38:	2100      	movs	r1, #0
 8006b3a:	2204      	movs	r2, #4
 8006b3c:	f102 0514 	add.w	r5, r2, #20
 8006b40:	429d      	cmp	r5, r3
 8006b42:	d91f      	bls.n	8006b84 <_dtoa_r+0x2a4>
 8006b44:	6041      	str	r1, [r0, #4]
 8006b46:	4658      	mov	r0, fp
 8006b48:	f000 fd8e 	bl	8007668 <_Balloc>
 8006b4c:	4682      	mov	sl, r0
 8006b4e:	2800      	cmp	r0, #0
 8006b50:	d13c      	bne.n	8006bcc <_dtoa_r+0x2ec>
 8006b52:	4b1b      	ldr	r3, [pc, #108]	@ (8006bc0 <_dtoa_r+0x2e0>)
 8006b54:	4602      	mov	r2, r0
 8006b56:	f240 11af 	movw	r1, #431	@ 0x1af
 8006b5a:	e6d8      	b.n	800690e <_dtoa_r+0x2e>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e7e0      	b.n	8006b22 <_dtoa_r+0x242>
 8006b60:	2401      	movs	r4, #1
 8006b62:	2300      	movs	r3, #0
 8006b64:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b66:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006b68:	f04f 33ff 	mov.w	r3, #4294967295
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	9307      	str	r3, [sp, #28]
 8006b70:	2200      	movs	r2, #0
 8006b72:	2312      	movs	r3, #18
 8006b74:	e7d0      	b.n	8006b18 <_dtoa_r+0x238>
 8006b76:	2301      	movs	r3, #1
 8006b78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b7a:	e7f5      	b.n	8006b68 <_dtoa_r+0x288>
 8006b7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	9307      	str	r3, [sp, #28]
 8006b82:	e7d7      	b.n	8006b34 <_dtoa_r+0x254>
 8006b84:	3101      	adds	r1, #1
 8006b86:	0052      	lsls	r2, r2, #1
 8006b88:	e7d8      	b.n	8006b3c <_dtoa_r+0x25c>
 8006b8a:	bf00      	nop
 8006b8c:	f3af 8000 	nop.w
 8006b90:	636f4361 	.word	0x636f4361
 8006b94:	3fd287a7 	.word	0x3fd287a7
 8006b98:	8b60c8b3 	.word	0x8b60c8b3
 8006b9c:	3fc68a28 	.word	0x3fc68a28
 8006ba0:	509f79fb 	.word	0x509f79fb
 8006ba4:	3fd34413 	.word	0x3fd34413
 8006ba8:	0800a4bd 	.word	0x0800a4bd
 8006bac:	0800a4d4 	.word	0x0800a4d4
 8006bb0:	7ff00000 	.word	0x7ff00000
 8006bb4:	0800a48d 	.word	0x0800a48d
 8006bb8:	3ff80000 	.word	0x3ff80000
 8006bbc:	0800a5d0 	.word	0x0800a5d0
 8006bc0:	0800a52c 	.word	0x0800a52c
 8006bc4:	0800a4b9 	.word	0x0800a4b9
 8006bc8:	0800a48c 	.word	0x0800a48c
 8006bcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006bd0:	6018      	str	r0, [r3, #0]
 8006bd2:	9b07      	ldr	r3, [sp, #28]
 8006bd4:	2b0e      	cmp	r3, #14
 8006bd6:	f200 80a4 	bhi.w	8006d22 <_dtoa_r+0x442>
 8006bda:	2c00      	cmp	r4, #0
 8006bdc:	f000 80a1 	beq.w	8006d22 <_dtoa_r+0x442>
 8006be0:	2f00      	cmp	r7, #0
 8006be2:	dd33      	ble.n	8006c4c <_dtoa_r+0x36c>
 8006be4:	4bad      	ldr	r3, [pc, #692]	@ (8006e9c <_dtoa_r+0x5bc>)
 8006be6:	f007 020f 	and.w	r2, r7, #15
 8006bea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bee:	ed93 7b00 	vldr	d7, [r3]
 8006bf2:	05f8      	lsls	r0, r7, #23
 8006bf4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006bf8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006bfc:	d516      	bpl.n	8006c2c <_dtoa_r+0x34c>
 8006bfe:	4ba8      	ldr	r3, [pc, #672]	@ (8006ea0 <_dtoa_r+0x5c0>)
 8006c00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c08:	f7f9 fe20 	bl	800084c <__aeabi_ddiv>
 8006c0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c10:	f004 040f 	and.w	r4, r4, #15
 8006c14:	2603      	movs	r6, #3
 8006c16:	4da2      	ldr	r5, [pc, #648]	@ (8006ea0 <_dtoa_r+0x5c0>)
 8006c18:	b954      	cbnz	r4, 8006c30 <_dtoa_r+0x350>
 8006c1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c22:	f7f9 fe13 	bl	800084c <__aeabi_ddiv>
 8006c26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c2a:	e028      	b.n	8006c7e <_dtoa_r+0x39e>
 8006c2c:	2602      	movs	r6, #2
 8006c2e:	e7f2      	b.n	8006c16 <_dtoa_r+0x336>
 8006c30:	07e1      	lsls	r1, r4, #31
 8006c32:	d508      	bpl.n	8006c46 <_dtoa_r+0x366>
 8006c34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c3c:	f7f9 fcdc 	bl	80005f8 <__aeabi_dmul>
 8006c40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c44:	3601      	adds	r6, #1
 8006c46:	1064      	asrs	r4, r4, #1
 8006c48:	3508      	adds	r5, #8
 8006c4a:	e7e5      	b.n	8006c18 <_dtoa_r+0x338>
 8006c4c:	f000 80d2 	beq.w	8006df4 <_dtoa_r+0x514>
 8006c50:	427c      	negs	r4, r7
 8006c52:	4b92      	ldr	r3, [pc, #584]	@ (8006e9c <_dtoa_r+0x5bc>)
 8006c54:	4d92      	ldr	r5, [pc, #584]	@ (8006ea0 <_dtoa_r+0x5c0>)
 8006c56:	f004 020f 	and.w	r2, r4, #15
 8006c5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c66:	f7f9 fcc7 	bl	80005f8 <__aeabi_dmul>
 8006c6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c6e:	1124      	asrs	r4, r4, #4
 8006c70:	2300      	movs	r3, #0
 8006c72:	2602      	movs	r6, #2
 8006c74:	2c00      	cmp	r4, #0
 8006c76:	f040 80b2 	bne.w	8006dde <_dtoa_r+0x4fe>
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1d3      	bne.n	8006c26 <_dtoa_r+0x346>
 8006c7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006c80:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f000 80b7 	beq.w	8006df8 <_dtoa_r+0x518>
 8006c8a:	4b86      	ldr	r3, [pc, #536]	@ (8006ea4 <_dtoa_r+0x5c4>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	4620      	mov	r0, r4
 8006c90:	4629      	mov	r1, r5
 8006c92:	f7f9 ff23 	bl	8000adc <__aeabi_dcmplt>
 8006c96:	2800      	cmp	r0, #0
 8006c98:	f000 80ae 	beq.w	8006df8 <_dtoa_r+0x518>
 8006c9c:	9b07      	ldr	r3, [sp, #28]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	f000 80aa 	beq.w	8006df8 <_dtoa_r+0x518>
 8006ca4:	9b00      	ldr	r3, [sp, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	dd37      	ble.n	8006d1a <_dtoa_r+0x43a>
 8006caa:	1e7b      	subs	r3, r7, #1
 8006cac:	9304      	str	r3, [sp, #16]
 8006cae:	4620      	mov	r0, r4
 8006cb0:	4b7d      	ldr	r3, [pc, #500]	@ (8006ea8 <_dtoa_r+0x5c8>)
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	4629      	mov	r1, r5
 8006cb6:	f7f9 fc9f 	bl	80005f8 <__aeabi_dmul>
 8006cba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cbe:	9c00      	ldr	r4, [sp, #0]
 8006cc0:	3601      	adds	r6, #1
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	f7f9 fc2e 	bl	8000524 <__aeabi_i2d>
 8006cc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ccc:	f7f9 fc94 	bl	80005f8 <__aeabi_dmul>
 8006cd0:	4b76      	ldr	r3, [pc, #472]	@ (8006eac <_dtoa_r+0x5cc>)
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f7f9 fada 	bl	800028c <__adddf3>
 8006cd8:	4605      	mov	r5, r0
 8006cda:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006cde:	2c00      	cmp	r4, #0
 8006ce0:	f040 808d 	bne.w	8006dfe <_dtoa_r+0x51e>
 8006ce4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ce8:	4b71      	ldr	r3, [pc, #452]	@ (8006eb0 <_dtoa_r+0x5d0>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	f7f9 facc 	bl	8000288 <__aeabi_dsub>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006cf8:	462a      	mov	r2, r5
 8006cfa:	4633      	mov	r3, r6
 8006cfc:	f7f9 ff0c 	bl	8000b18 <__aeabi_dcmpgt>
 8006d00:	2800      	cmp	r0, #0
 8006d02:	f040 828b 	bne.w	800721c <_dtoa_r+0x93c>
 8006d06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d0a:	462a      	mov	r2, r5
 8006d0c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006d10:	f7f9 fee4 	bl	8000adc <__aeabi_dcmplt>
 8006d14:	2800      	cmp	r0, #0
 8006d16:	f040 8128 	bne.w	8006f6a <_dtoa_r+0x68a>
 8006d1a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006d1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006d22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f2c0 815a 	blt.w	8006fde <_dtoa_r+0x6fe>
 8006d2a:	2f0e      	cmp	r7, #14
 8006d2c:	f300 8157 	bgt.w	8006fde <_dtoa_r+0x6fe>
 8006d30:	4b5a      	ldr	r3, [pc, #360]	@ (8006e9c <_dtoa_r+0x5bc>)
 8006d32:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d36:	ed93 7b00 	vldr	d7, [r3]
 8006d3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	ed8d 7b00 	vstr	d7, [sp]
 8006d42:	da03      	bge.n	8006d4c <_dtoa_r+0x46c>
 8006d44:	9b07      	ldr	r3, [sp, #28]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f340 8101 	ble.w	8006f4e <_dtoa_r+0x66e>
 8006d4c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006d50:	4656      	mov	r6, sl
 8006d52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d56:	4620      	mov	r0, r4
 8006d58:	4629      	mov	r1, r5
 8006d5a:	f7f9 fd77 	bl	800084c <__aeabi_ddiv>
 8006d5e:	f7f9 fefb 	bl	8000b58 <__aeabi_d2iz>
 8006d62:	4680      	mov	r8, r0
 8006d64:	f7f9 fbde 	bl	8000524 <__aeabi_i2d>
 8006d68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d6c:	f7f9 fc44 	bl	80005f8 <__aeabi_dmul>
 8006d70:	4602      	mov	r2, r0
 8006d72:	460b      	mov	r3, r1
 8006d74:	4620      	mov	r0, r4
 8006d76:	4629      	mov	r1, r5
 8006d78:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006d7c:	f7f9 fa84 	bl	8000288 <__aeabi_dsub>
 8006d80:	f806 4b01 	strb.w	r4, [r6], #1
 8006d84:	9d07      	ldr	r5, [sp, #28]
 8006d86:	eba6 040a 	sub.w	r4, r6, sl
 8006d8a:	42a5      	cmp	r5, r4
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	460b      	mov	r3, r1
 8006d90:	f040 8117 	bne.w	8006fc2 <_dtoa_r+0x6e2>
 8006d94:	f7f9 fa7a 	bl	800028c <__adddf3>
 8006d98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d9c:	4604      	mov	r4, r0
 8006d9e:	460d      	mov	r5, r1
 8006da0:	f7f9 feba 	bl	8000b18 <__aeabi_dcmpgt>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	f040 80f9 	bne.w	8006f9c <_dtoa_r+0x6bc>
 8006daa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dae:	4620      	mov	r0, r4
 8006db0:	4629      	mov	r1, r5
 8006db2:	f7f9 fe89 	bl	8000ac8 <__aeabi_dcmpeq>
 8006db6:	b118      	cbz	r0, 8006dc0 <_dtoa_r+0x4e0>
 8006db8:	f018 0f01 	tst.w	r8, #1
 8006dbc:	f040 80ee 	bne.w	8006f9c <_dtoa_r+0x6bc>
 8006dc0:	4649      	mov	r1, r9
 8006dc2:	4658      	mov	r0, fp
 8006dc4:	f000 fc90 	bl	80076e8 <_Bfree>
 8006dc8:	2300      	movs	r3, #0
 8006dca:	7033      	strb	r3, [r6, #0]
 8006dcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006dce:	3701      	adds	r7, #1
 8006dd0:	601f      	str	r7, [r3, #0]
 8006dd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 831d 	beq.w	8007414 <_dtoa_r+0xb34>
 8006dda:	601e      	str	r6, [r3, #0]
 8006ddc:	e31a      	b.n	8007414 <_dtoa_r+0xb34>
 8006dde:	07e2      	lsls	r2, r4, #31
 8006de0:	d505      	bpl.n	8006dee <_dtoa_r+0x50e>
 8006de2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006de6:	f7f9 fc07 	bl	80005f8 <__aeabi_dmul>
 8006dea:	3601      	adds	r6, #1
 8006dec:	2301      	movs	r3, #1
 8006dee:	1064      	asrs	r4, r4, #1
 8006df0:	3508      	adds	r5, #8
 8006df2:	e73f      	b.n	8006c74 <_dtoa_r+0x394>
 8006df4:	2602      	movs	r6, #2
 8006df6:	e742      	b.n	8006c7e <_dtoa_r+0x39e>
 8006df8:	9c07      	ldr	r4, [sp, #28]
 8006dfa:	9704      	str	r7, [sp, #16]
 8006dfc:	e761      	b.n	8006cc2 <_dtoa_r+0x3e2>
 8006dfe:	4b27      	ldr	r3, [pc, #156]	@ (8006e9c <_dtoa_r+0x5bc>)
 8006e00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006e06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e0a:	4454      	add	r4, sl
 8006e0c:	2900      	cmp	r1, #0
 8006e0e:	d053      	beq.n	8006eb8 <_dtoa_r+0x5d8>
 8006e10:	4928      	ldr	r1, [pc, #160]	@ (8006eb4 <_dtoa_r+0x5d4>)
 8006e12:	2000      	movs	r0, #0
 8006e14:	f7f9 fd1a 	bl	800084c <__aeabi_ddiv>
 8006e18:	4633      	mov	r3, r6
 8006e1a:	462a      	mov	r2, r5
 8006e1c:	f7f9 fa34 	bl	8000288 <__aeabi_dsub>
 8006e20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e24:	4656      	mov	r6, sl
 8006e26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e2a:	f7f9 fe95 	bl	8000b58 <__aeabi_d2iz>
 8006e2e:	4605      	mov	r5, r0
 8006e30:	f7f9 fb78 	bl	8000524 <__aeabi_i2d>
 8006e34:	4602      	mov	r2, r0
 8006e36:	460b      	mov	r3, r1
 8006e38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e3c:	f7f9 fa24 	bl	8000288 <__aeabi_dsub>
 8006e40:	3530      	adds	r5, #48	@ 0x30
 8006e42:	4602      	mov	r2, r0
 8006e44:	460b      	mov	r3, r1
 8006e46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e4a:	f806 5b01 	strb.w	r5, [r6], #1
 8006e4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e52:	f7f9 fe43 	bl	8000adc <__aeabi_dcmplt>
 8006e56:	2800      	cmp	r0, #0
 8006e58:	d171      	bne.n	8006f3e <_dtoa_r+0x65e>
 8006e5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e5e:	4911      	ldr	r1, [pc, #68]	@ (8006ea4 <_dtoa_r+0x5c4>)
 8006e60:	2000      	movs	r0, #0
 8006e62:	f7f9 fa11 	bl	8000288 <__aeabi_dsub>
 8006e66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e6a:	f7f9 fe37 	bl	8000adc <__aeabi_dcmplt>
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	f040 8095 	bne.w	8006f9e <_dtoa_r+0x6be>
 8006e74:	42a6      	cmp	r6, r4
 8006e76:	f43f af50 	beq.w	8006d1a <_dtoa_r+0x43a>
 8006e7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8006ea8 <_dtoa_r+0x5c8>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	f7f9 fbb9 	bl	80005f8 <__aeabi_dmul>
 8006e86:	4b08      	ldr	r3, [pc, #32]	@ (8006ea8 <_dtoa_r+0x5c8>)
 8006e88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e92:	f7f9 fbb1 	bl	80005f8 <__aeabi_dmul>
 8006e96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e9a:	e7c4      	b.n	8006e26 <_dtoa_r+0x546>
 8006e9c:	0800a5d0 	.word	0x0800a5d0
 8006ea0:	0800a5a8 	.word	0x0800a5a8
 8006ea4:	3ff00000 	.word	0x3ff00000
 8006ea8:	40240000 	.word	0x40240000
 8006eac:	401c0000 	.word	0x401c0000
 8006eb0:	40140000 	.word	0x40140000
 8006eb4:	3fe00000 	.word	0x3fe00000
 8006eb8:	4631      	mov	r1, r6
 8006eba:	4628      	mov	r0, r5
 8006ebc:	f7f9 fb9c 	bl	80005f8 <__aeabi_dmul>
 8006ec0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ec4:	9415      	str	r4, [sp, #84]	@ 0x54
 8006ec6:	4656      	mov	r6, sl
 8006ec8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ecc:	f7f9 fe44 	bl	8000b58 <__aeabi_d2iz>
 8006ed0:	4605      	mov	r5, r0
 8006ed2:	f7f9 fb27 	bl	8000524 <__aeabi_i2d>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	460b      	mov	r3, r1
 8006eda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ede:	f7f9 f9d3 	bl	8000288 <__aeabi_dsub>
 8006ee2:	3530      	adds	r5, #48	@ 0x30
 8006ee4:	f806 5b01 	strb.w	r5, [r6], #1
 8006ee8:	4602      	mov	r2, r0
 8006eea:	460b      	mov	r3, r1
 8006eec:	42a6      	cmp	r6, r4
 8006eee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ef2:	f04f 0200 	mov.w	r2, #0
 8006ef6:	d124      	bne.n	8006f42 <_dtoa_r+0x662>
 8006ef8:	4bac      	ldr	r3, [pc, #688]	@ (80071ac <_dtoa_r+0x8cc>)
 8006efa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006efe:	f7f9 f9c5 	bl	800028c <__adddf3>
 8006f02:	4602      	mov	r2, r0
 8006f04:	460b      	mov	r3, r1
 8006f06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f0a:	f7f9 fe05 	bl	8000b18 <__aeabi_dcmpgt>
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	d145      	bne.n	8006f9e <_dtoa_r+0x6be>
 8006f12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f16:	49a5      	ldr	r1, [pc, #660]	@ (80071ac <_dtoa_r+0x8cc>)
 8006f18:	2000      	movs	r0, #0
 8006f1a:	f7f9 f9b5 	bl	8000288 <__aeabi_dsub>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	460b      	mov	r3, r1
 8006f22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f26:	f7f9 fdd9 	bl	8000adc <__aeabi_dcmplt>
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	f43f aef5 	beq.w	8006d1a <_dtoa_r+0x43a>
 8006f30:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006f32:	1e73      	subs	r3, r6, #1
 8006f34:	9315      	str	r3, [sp, #84]	@ 0x54
 8006f36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006f3a:	2b30      	cmp	r3, #48	@ 0x30
 8006f3c:	d0f8      	beq.n	8006f30 <_dtoa_r+0x650>
 8006f3e:	9f04      	ldr	r7, [sp, #16]
 8006f40:	e73e      	b.n	8006dc0 <_dtoa_r+0x4e0>
 8006f42:	4b9b      	ldr	r3, [pc, #620]	@ (80071b0 <_dtoa_r+0x8d0>)
 8006f44:	f7f9 fb58 	bl	80005f8 <__aeabi_dmul>
 8006f48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f4c:	e7bc      	b.n	8006ec8 <_dtoa_r+0x5e8>
 8006f4e:	d10c      	bne.n	8006f6a <_dtoa_r+0x68a>
 8006f50:	4b98      	ldr	r3, [pc, #608]	@ (80071b4 <_dtoa_r+0x8d4>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f58:	f7f9 fb4e 	bl	80005f8 <__aeabi_dmul>
 8006f5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f60:	f7f9 fdd0 	bl	8000b04 <__aeabi_dcmpge>
 8006f64:	2800      	cmp	r0, #0
 8006f66:	f000 8157 	beq.w	8007218 <_dtoa_r+0x938>
 8006f6a:	2400      	movs	r4, #0
 8006f6c:	4625      	mov	r5, r4
 8006f6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f70:	43db      	mvns	r3, r3
 8006f72:	9304      	str	r3, [sp, #16]
 8006f74:	4656      	mov	r6, sl
 8006f76:	2700      	movs	r7, #0
 8006f78:	4621      	mov	r1, r4
 8006f7a:	4658      	mov	r0, fp
 8006f7c:	f000 fbb4 	bl	80076e8 <_Bfree>
 8006f80:	2d00      	cmp	r5, #0
 8006f82:	d0dc      	beq.n	8006f3e <_dtoa_r+0x65e>
 8006f84:	b12f      	cbz	r7, 8006f92 <_dtoa_r+0x6b2>
 8006f86:	42af      	cmp	r7, r5
 8006f88:	d003      	beq.n	8006f92 <_dtoa_r+0x6b2>
 8006f8a:	4639      	mov	r1, r7
 8006f8c:	4658      	mov	r0, fp
 8006f8e:	f000 fbab 	bl	80076e8 <_Bfree>
 8006f92:	4629      	mov	r1, r5
 8006f94:	4658      	mov	r0, fp
 8006f96:	f000 fba7 	bl	80076e8 <_Bfree>
 8006f9a:	e7d0      	b.n	8006f3e <_dtoa_r+0x65e>
 8006f9c:	9704      	str	r7, [sp, #16]
 8006f9e:	4633      	mov	r3, r6
 8006fa0:	461e      	mov	r6, r3
 8006fa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fa6:	2a39      	cmp	r2, #57	@ 0x39
 8006fa8:	d107      	bne.n	8006fba <_dtoa_r+0x6da>
 8006faa:	459a      	cmp	sl, r3
 8006fac:	d1f8      	bne.n	8006fa0 <_dtoa_r+0x6c0>
 8006fae:	9a04      	ldr	r2, [sp, #16]
 8006fb0:	3201      	adds	r2, #1
 8006fb2:	9204      	str	r2, [sp, #16]
 8006fb4:	2230      	movs	r2, #48	@ 0x30
 8006fb6:	f88a 2000 	strb.w	r2, [sl]
 8006fba:	781a      	ldrb	r2, [r3, #0]
 8006fbc:	3201      	adds	r2, #1
 8006fbe:	701a      	strb	r2, [r3, #0]
 8006fc0:	e7bd      	b.n	8006f3e <_dtoa_r+0x65e>
 8006fc2:	4b7b      	ldr	r3, [pc, #492]	@ (80071b0 <_dtoa_r+0x8d0>)
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f7f9 fb17 	bl	80005f8 <__aeabi_dmul>
 8006fca:	2200      	movs	r2, #0
 8006fcc:	2300      	movs	r3, #0
 8006fce:	4604      	mov	r4, r0
 8006fd0:	460d      	mov	r5, r1
 8006fd2:	f7f9 fd79 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	f43f aebb 	beq.w	8006d52 <_dtoa_r+0x472>
 8006fdc:	e6f0      	b.n	8006dc0 <_dtoa_r+0x4e0>
 8006fde:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006fe0:	2a00      	cmp	r2, #0
 8006fe2:	f000 80db 	beq.w	800719c <_dtoa_r+0x8bc>
 8006fe6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fe8:	2a01      	cmp	r2, #1
 8006fea:	f300 80bf 	bgt.w	800716c <_dtoa_r+0x88c>
 8006fee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006ff0:	2a00      	cmp	r2, #0
 8006ff2:	f000 80b7 	beq.w	8007164 <_dtoa_r+0x884>
 8006ff6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006ffa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006ffc:	4646      	mov	r6, r8
 8006ffe:	9a08      	ldr	r2, [sp, #32]
 8007000:	2101      	movs	r1, #1
 8007002:	441a      	add	r2, r3
 8007004:	4658      	mov	r0, fp
 8007006:	4498      	add	r8, r3
 8007008:	9208      	str	r2, [sp, #32]
 800700a:	f000 fc21 	bl	8007850 <__i2b>
 800700e:	4605      	mov	r5, r0
 8007010:	b15e      	cbz	r6, 800702a <_dtoa_r+0x74a>
 8007012:	9b08      	ldr	r3, [sp, #32]
 8007014:	2b00      	cmp	r3, #0
 8007016:	dd08      	ble.n	800702a <_dtoa_r+0x74a>
 8007018:	42b3      	cmp	r3, r6
 800701a:	9a08      	ldr	r2, [sp, #32]
 800701c:	bfa8      	it	ge
 800701e:	4633      	movge	r3, r6
 8007020:	eba8 0803 	sub.w	r8, r8, r3
 8007024:	1af6      	subs	r6, r6, r3
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	9308      	str	r3, [sp, #32]
 800702a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800702c:	b1f3      	cbz	r3, 800706c <_dtoa_r+0x78c>
 800702e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007030:	2b00      	cmp	r3, #0
 8007032:	f000 80b7 	beq.w	80071a4 <_dtoa_r+0x8c4>
 8007036:	b18c      	cbz	r4, 800705c <_dtoa_r+0x77c>
 8007038:	4629      	mov	r1, r5
 800703a:	4622      	mov	r2, r4
 800703c:	4658      	mov	r0, fp
 800703e:	f000 fcc7 	bl	80079d0 <__pow5mult>
 8007042:	464a      	mov	r2, r9
 8007044:	4601      	mov	r1, r0
 8007046:	4605      	mov	r5, r0
 8007048:	4658      	mov	r0, fp
 800704a:	f000 fc17 	bl	800787c <__multiply>
 800704e:	4649      	mov	r1, r9
 8007050:	9004      	str	r0, [sp, #16]
 8007052:	4658      	mov	r0, fp
 8007054:	f000 fb48 	bl	80076e8 <_Bfree>
 8007058:	9b04      	ldr	r3, [sp, #16]
 800705a:	4699      	mov	r9, r3
 800705c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800705e:	1b1a      	subs	r2, r3, r4
 8007060:	d004      	beq.n	800706c <_dtoa_r+0x78c>
 8007062:	4649      	mov	r1, r9
 8007064:	4658      	mov	r0, fp
 8007066:	f000 fcb3 	bl	80079d0 <__pow5mult>
 800706a:	4681      	mov	r9, r0
 800706c:	2101      	movs	r1, #1
 800706e:	4658      	mov	r0, fp
 8007070:	f000 fbee 	bl	8007850 <__i2b>
 8007074:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007076:	4604      	mov	r4, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 81cf 	beq.w	800741c <_dtoa_r+0xb3c>
 800707e:	461a      	mov	r2, r3
 8007080:	4601      	mov	r1, r0
 8007082:	4658      	mov	r0, fp
 8007084:	f000 fca4 	bl	80079d0 <__pow5mult>
 8007088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800708a:	2b01      	cmp	r3, #1
 800708c:	4604      	mov	r4, r0
 800708e:	f300 8095 	bgt.w	80071bc <_dtoa_r+0x8dc>
 8007092:	9b02      	ldr	r3, [sp, #8]
 8007094:	2b00      	cmp	r3, #0
 8007096:	f040 8087 	bne.w	80071a8 <_dtoa_r+0x8c8>
 800709a:	9b03      	ldr	r3, [sp, #12]
 800709c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f040 8089 	bne.w	80071b8 <_dtoa_r+0x8d8>
 80070a6:	9b03      	ldr	r3, [sp, #12]
 80070a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070ac:	0d1b      	lsrs	r3, r3, #20
 80070ae:	051b      	lsls	r3, r3, #20
 80070b0:	b12b      	cbz	r3, 80070be <_dtoa_r+0x7de>
 80070b2:	9b08      	ldr	r3, [sp, #32]
 80070b4:	3301      	adds	r3, #1
 80070b6:	9308      	str	r3, [sp, #32]
 80070b8:	f108 0801 	add.w	r8, r8, #1
 80070bc:	2301      	movs	r3, #1
 80070be:	930a      	str	r3, [sp, #40]	@ 0x28
 80070c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f000 81b0 	beq.w	8007428 <_dtoa_r+0xb48>
 80070c8:	6923      	ldr	r3, [r4, #16]
 80070ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80070ce:	6918      	ldr	r0, [r3, #16]
 80070d0:	f000 fb72 	bl	80077b8 <__hi0bits>
 80070d4:	f1c0 0020 	rsb	r0, r0, #32
 80070d8:	9b08      	ldr	r3, [sp, #32]
 80070da:	4418      	add	r0, r3
 80070dc:	f010 001f 	ands.w	r0, r0, #31
 80070e0:	d077      	beq.n	80071d2 <_dtoa_r+0x8f2>
 80070e2:	f1c0 0320 	rsb	r3, r0, #32
 80070e6:	2b04      	cmp	r3, #4
 80070e8:	dd6b      	ble.n	80071c2 <_dtoa_r+0x8e2>
 80070ea:	9b08      	ldr	r3, [sp, #32]
 80070ec:	f1c0 001c 	rsb	r0, r0, #28
 80070f0:	4403      	add	r3, r0
 80070f2:	4480      	add	r8, r0
 80070f4:	4406      	add	r6, r0
 80070f6:	9308      	str	r3, [sp, #32]
 80070f8:	f1b8 0f00 	cmp.w	r8, #0
 80070fc:	dd05      	ble.n	800710a <_dtoa_r+0x82a>
 80070fe:	4649      	mov	r1, r9
 8007100:	4642      	mov	r2, r8
 8007102:	4658      	mov	r0, fp
 8007104:	f000 fcbe 	bl	8007a84 <__lshift>
 8007108:	4681      	mov	r9, r0
 800710a:	9b08      	ldr	r3, [sp, #32]
 800710c:	2b00      	cmp	r3, #0
 800710e:	dd05      	ble.n	800711c <_dtoa_r+0x83c>
 8007110:	4621      	mov	r1, r4
 8007112:	461a      	mov	r2, r3
 8007114:	4658      	mov	r0, fp
 8007116:	f000 fcb5 	bl	8007a84 <__lshift>
 800711a:	4604      	mov	r4, r0
 800711c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800711e:	2b00      	cmp	r3, #0
 8007120:	d059      	beq.n	80071d6 <_dtoa_r+0x8f6>
 8007122:	4621      	mov	r1, r4
 8007124:	4648      	mov	r0, r9
 8007126:	f000 fd19 	bl	8007b5c <__mcmp>
 800712a:	2800      	cmp	r0, #0
 800712c:	da53      	bge.n	80071d6 <_dtoa_r+0x8f6>
 800712e:	1e7b      	subs	r3, r7, #1
 8007130:	9304      	str	r3, [sp, #16]
 8007132:	4649      	mov	r1, r9
 8007134:	2300      	movs	r3, #0
 8007136:	220a      	movs	r2, #10
 8007138:	4658      	mov	r0, fp
 800713a:	f000 faf7 	bl	800772c <__multadd>
 800713e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007140:	4681      	mov	r9, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	f000 8172 	beq.w	800742c <_dtoa_r+0xb4c>
 8007148:	2300      	movs	r3, #0
 800714a:	4629      	mov	r1, r5
 800714c:	220a      	movs	r2, #10
 800714e:	4658      	mov	r0, fp
 8007150:	f000 faec 	bl	800772c <__multadd>
 8007154:	9b00      	ldr	r3, [sp, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	4605      	mov	r5, r0
 800715a:	dc67      	bgt.n	800722c <_dtoa_r+0x94c>
 800715c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800715e:	2b02      	cmp	r3, #2
 8007160:	dc41      	bgt.n	80071e6 <_dtoa_r+0x906>
 8007162:	e063      	b.n	800722c <_dtoa_r+0x94c>
 8007164:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007166:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800716a:	e746      	b.n	8006ffa <_dtoa_r+0x71a>
 800716c:	9b07      	ldr	r3, [sp, #28]
 800716e:	1e5c      	subs	r4, r3, #1
 8007170:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007172:	42a3      	cmp	r3, r4
 8007174:	bfbf      	itttt	lt
 8007176:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007178:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800717a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800717c:	1ae3      	sublt	r3, r4, r3
 800717e:	bfb4      	ite	lt
 8007180:	18d2      	addlt	r2, r2, r3
 8007182:	1b1c      	subge	r4, r3, r4
 8007184:	9b07      	ldr	r3, [sp, #28]
 8007186:	bfbc      	itt	lt
 8007188:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800718a:	2400      	movlt	r4, #0
 800718c:	2b00      	cmp	r3, #0
 800718e:	bfb5      	itete	lt
 8007190:	eba8 0603 	sublt.w	r6, r8, r3
 8007194:	9b07      	ldrge	r3, [sp, #28]
 8007196:	2300      	movlt	r3, #0
 8007198:	4646      	movge	r6, r8
 800719a:	e730      	b.n	8006ffe <_dtoa_r+0x71e>
 800719c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800719e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80071a0:	4646      	mov	r6, r8
 80071a2:	e735      	b.n	8007010 <_dtoa_r+0x730>
 80071a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071a6:	e75c      	b.n	8007062 <_dtoa_r+0x782>
 80071a8:	2300      	movs	r3, #0
 80071aa:	e788      	b.n	80070be <_dtoa_r+0x7de>
 80071ac:	3fe00000 	.word	0x3fe00000
 80071b0:	40240000 	.word	0x40240000
 80071b4:	40140000 	.word	0x40140000
 80071b8:	9b02      	ldr	r3, [sp, #8]
 80071ba:	e780      	b.n	80070be <_dtoa_r+0x7de>
 80071bc:	2300      	movs	r3, #0
 80071be:	930a      	str	r3, [sp, #40]	@ 0x28
 80071c0:	e782      	b.n	80070c8 <_dtoa_r+0x7e8>
 80071c2:	d099      	beq.n	80070f8 <_dtoa_r+0x818>
 80071c4:	9a08      	ldr	r2, [sp, #32]
 80071c6:	331c      	adds	r3, #28
 80071c8:	441a      	add	r2, r3
 80071ca:	4498      	add	r8, r3
 80071cc:	441e      	add	r6, r3
 80071ce:	9208      	str	r2, [sp, #32]
 80071d0:	e792      	b.n	80070f8 <_dtoa_r+0x818>
 80071d2:	4603      	mov	r3, r0
 80071d4:	e7f6      	b.n	80071c4 <_dtoa_r+0x8e4>
 80071d6:	9b07      	ldr	r3, [sp, #28]
 80071d8:	9704      	str	r7, [sp, #16]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	dc20      	bgt.n	8007220 <_dtoa_r+0x940>
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	dd1e      	ble.n	8007224 <_dtoa_r+0x944>
 80071e6:	9b00      	ldr	r3, [sp, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f47f aec0 	bne.w	8006f6e <_dtoa_r+0x68e>
 80071ee:	4621      	mov	r1, r4
 80071f0:	2205      	movs	r2, #5
 80071f2:	4658      	mov	r0, fp
 80071f4:	f000 fa9a 	bl	800772c <__multadd>
 80071f8:	4601      	mov	r1, r0
 80071fa:	4604      	mov	r4, r0
 80071fc:	4648      	mov	r0, r9
 80071fe:	f000 fcad 	bl	8007b5c <__mcmp>
 8007202:	2800      	cmp	r0, #0
 8007204:	f77f aeb3 	ble.w	8006f6e <_dtoa_r+0x68e>
 8007208:	4656      	mov	r6, sl
 800720a:	2331      	movs	r3, #49	@ 0x31
 800720c:	f806 3b01 	strb.w	r3, [r6], #1
 8007210:	9b04      	ldr	r3, [sp, #16]
 8007212:	3301      	adds	r3, #1
 8007214:	9304      	str	r3, [sp, #16]
 8007216:	e6ae      	b.n	8006f76 <_dtoa_r+0x696>
 8007218:	9c07      	ldr	r4, [sp, #28]
 800721a:	9704      	str	r7, [sp, #16]
 800721c:	4625      	mov	r5, r4
 800721e:	e7f3      	b.n	8007208 <_dtoa_r+0x928>
 8007220:	9b07      	ldr	r3, [sp, #28]
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 8104 	beq.w	8007434 <_dtoa_r+0xb54>
 800722c:	2e00      	cmp	r6, #0
 800722e:	dd05      	ble.n	800723c <_dtoa_r+0x95c>
 8007230:	4629      	mov	r1, r5
 8007232:	4632      	mov	r2, r6
 8007234:	4658      	mov	r0, fp
 8007236:	f000 fc25 	bl	8007a84 <__lshift>
 800723a:	4605      	mov	r5, r0
 800723c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800723e:	2b00      	cmp	r3, #0
 8007240:	d05a      	beq.n	80072f8 <_dtoa_r+0xa18>
 8007242:	6869      	ldr	r1, [r5, #4]
 8007244:	4658      	mov	r0, fp
 8007246:	f000 fa0f 	bl	8007668 <_Balloc>
 800724a:	4606      	mov	r6, r0
 800724c:	b928      	cbnz	r0, 800725a <_dtoa_r+0x97a>
 800724e:	4b84      	ldr	r3, [pc, #528]	@ (8007460 <_dtoa_r+0xb80>)
 8007250:	4602      	mov	r2, r0
 8007252:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007256:	f7ff bb5a 	b.w	800690e <_dtoa_r+0x2e>
 800725a:	692a      	ldr	r2, [r5, #16]
 800725c:	3202      	adds	r2, #2
 800725e:	0092      	lsls	r2, r2, #2
 8007260:	f105 010c 	add.w	r1, r5, #12
 8007264:	300c      	adds	r0, #12
 8007266:	f7ff faa2 	bl	80067ae <memcpy>
 800726a:	2201      	movs	r2, #1
 800726c:	4631      	mov	r1, r6
 800726e:	4658      	mov	r0, fp
 8007270:	f000 fc08 	bl	8007a84 <__lshift>
 8007274:	f10a 0301 	add.w	r3, sl, #1
 8007278:	9307      	str	r3, [sp, #28]
 800727a:	9b00      	ldr	r3, [sp, #0]
 800727c:	4453      	add	r3, sl
 800727e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007280:	9b02      	ldr	r3, [sp, #8]
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	462f      	mov	r7, r5
 8007288:	930a      	str	r3, [sp, #40]	@ 0x28
 800728a:	4605      	mov	r5, r0
 800728c:	9b07      	ldr	r3, [sp, #28]
 800728e:	4621      	mov	r1, r4
 8007290:	3b01      	subs	r3, #1
 8007292:	4648      	mov	r0, r9
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	f7ff fa98 	bl	80067ca <quorem>
 800729a:	4639      	mov	r1, r7
 800729c:	9002      	str	r0, [sp, #8]
 800729e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80072a2:	4648      	mov	r0, r9
 80072a4:	f000 fc5a 	bl	8007b5c <__mcmp>
 80072a8:	462a      	mov	r2, r5
 80072aa:	9008      	str	r0, [sp, #32]
 80072ac:	4621      	mov	r1, r4
 80072ae:	4658      	mov	r0, fp
 80072b0:	f000 fc70 	bl	8007b94 <__mdiff>
 80072b4:	68c2      	ldr	r2, [r0, #12]
 80072b6:	4606      	mov	r6, r0
 80072b8:	bb02      	cbnz	r2, 80072fc <_dtoa_r+0xa1c>
 80072ba:	4601      	mov	r1, r0
 80072bc:	4648      	mov	r0, r9
 80072be:	f000 fc4d 	bl	8007b5c <__mcmp>
 80072c2:	4602      	mov	r2, r0
 80072c4:	4631      	mov	r1, r6
 80072c6:	4658      	mov	r0, fp
 80072c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80072ca:	f000 fa0d 	bl	80076e8 <_Bfree>
 80072ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80072d2:	9e07      	ldr	r6, [sp, #28]
 80072d4:	ea43 0102 	orr.w	r1, r3, r2
 80072d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072da:	4319      	orrs	r1, r3
 80072dc:	d110      	bne.n	8007300 <_dtoa_r+0xa20>
 80072de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80072e2:	d029      	beq.n	8007338 <_dtoa_r+0xa58>
 80072e4:	9b08      	ldr	r3, [sp, #32]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	dd02      	ble.n	80072f0 <_dtoa_r+0xa10>
 80072ea:	9b02      	ldr	r3, [sp, #8]
 80072ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80072f0:	9b00      	ldr	r3, [sp, #0]
 80072f2:	f883 8000 	strb.w	r8, [r3]
 80072f6:	e63f      	b.n	8006f78 <_dtoa_r+0x698>
 80072f8:	4628      	mov	r0, r5
 80072fa:	e7bb      	b.n	8007274 <_dtoa_r+0x994>
 80072fc:	2201      	movs	r2, #1
 80072fe:	e7e1      	b.n	80072c4 <_dtoa_r+0x9e4>
 8007300:	9b08      	ldr	r3, [sp, #32]
 8007302:	2b00      	cmp	r3, #0
 8007304:	db04      	blt.n	8007310 <_dtoa_r+0xa30>
 8007306:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007308:	430b      	orrs	r3, r1
 800730a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800730c:	430b      	orrs	r3, r1
 800730e:	d120      	bne.n	8007352 <_dtoa_r+0xa72>
 8007310:	2a00      	cmp	r2, #0
 8007312:	dded      	ble.n	80072f0 <_dtoa_r+0xa10>
 8007314:	4649      	mov	r1, r9
 8007316:	2201      	movs	r2, #1
 8007318:	4658      	mov	r0, fp
 800731a:	f000 fbb3 	bl	8007a84 <__lshift>
 800731e:	4621      	mov	r1, r4
 8007320:	4681      	mov	r9, r0
 8007322:	f000 fc1b 	bl	8007b5c <__mcmp>
 8007326:	2800      	cmp	r0, #0
 8007328:	dc03      	bgt.n	8007332 <_dtoa_r+0xa52>
 800732a:	d1e1      	bne.n	80072f0 <_dtoa_r+0xa10>
 800732c:	f018 0f01 	tst.w	r8, #1
 8007330:	d0de      	beq.n	80072f0 <_dtoa_r+0xa10>
 8007332:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007336:	d1d8      	bne.n	80072ea <_dtoa_r+0xa0a>
 8007338:	9a00      	ldr	r2, [sp, #0]
 800733a:	2339      	movs	r3, #57	@ 0x39
 800733c:	7013      	strb	r3, [r2, #0]
 800733e:	4633      	mov	r3, r6
 8007340:	461e      	mov	r6, r3
 8007342:	3b01      	subs	r3, #1
 8007344:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007348:	2a39      	cmp	r2, #57	@ 0x39
 800734a:	d052      	beq.n	80073f2 <_dtoa_r+0xb12>
 800734c:	3201      	adds	r2, #1
 800734e:	701a      	strb	r2, [r3, #0]
 8007350:	e612      	b.n	8006f78 <_dtoa_r+0x698>
 8007352:	2a00      	cmp	r2, #0
 8007354:	dd07      	ble.n	8007366 <_dtoa_r+0xa86>
 8007356:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800735a:	d0ed      	beq.n	8007338 <_dtoa_r+0xa58>
 800735c:	9a00      	ldr	r2, [sp, #0]
 800735e:	f108 0301 	add.w	r3, r8, #1
 8007362:	7013      	strb	r3, [r2, #0]
 8007364:	e608      	b.n	8006f78 <_dtoa_r+0x698>
 8007366:	9b07      	ldr	r3, [sp, #28]
 8007368:	9a07      	ldr	r2, [sp, #28]
 800736a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800736e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007370:	4293      	cmp	r3, r2
 8007372:	d028      	beq.n	80073c6 <_dtoa_r+0xae6>
 8007374:	4649      	mov	r1, r9
 8007376:	2300      	movs	r3, #0
 8007378:	220a      	movs	r2, #10
 800737a:	4658      	mov	r0, fp
 800737c:	f000 f9d6 	bl	800772c <__multadd>
 8007380:	42af      	cmp	r7, r5
 8007382:	4681      	mov	r9, r0
 8007384:	f04f 0300 	mov.w	r3, #0
 8007388:	f04f 020a 	mov.w	r2, #10
 800738c:	4639      	mov	r1, r7
 800738e:	4658      	mov	r0, fp
 8007390:	d107      	bne.n	80073a2 <_dtoa_r+0xac2>
 8007392:	f000 f9cb 	bl	800772c <__multadd>
 8007396:	4607      	mov	r7, r0
 8007398:	4605      	mov	r5, r0
 800739a:	9b07      	ldr	r3, [sp, #28]
 800739c:	3301      	adds	r3, #1
 800739e:	9307      	str	r3, [sp, #28]
 80073a0:	e774      	b.n	800728c <_dtoa_r+0x9ac>
 80073a2:	f000 f9c3 	bl	800772c <__multadd>
 80073a6:	4629      	mov	r1, r5
 80073a8:	4607      	mov	r7, r0
 80073aa:	2300      	movs	r3, #0
 80073ac:	220a      	movs	r2, #10
 80073ae:	4658      	mov	r0, fp
 80073b0:	f000 f9bc 	bl	800772c <__multadd>
 80073b4:	4605      	mov	r5, r0
 80073b6:	e7f0      	b.n	800739a <_dtoa_r+0xaba>
 80073b8:	9b00      	ldr	r3, [sp, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	bfcc      	ite	gt
 80073be:	461e      	movgt	r6, r3
 80073c0:	2601      	movle	r6, #1
 80073c2:	4456      	add	r6, sl
 80073c4:	2700      	movs	r7, #0
 80073c6:	4649      	mov	r1, r9
 80073c8:	2201      	movs	r2, #1
 80073ca:	4658      	mov	r0, fp
 80073cc:	f000 fb5a 	bl	8007a84 <__lshift>
 80073d0:	4621      	mov	r1, r4
 80073d2:	4681      	mov	r9, r0
 80073d4:	f000 fbc2 	bl	8007b5c <__mcmp>
 80073d8:	2800      	cmp	r0, #0
 80073da:	dcb0      	bgt.n	800733e <_dtoa_r+0xa5e>
 80073dc:	d102      	bne.n	80073e4 <_dtoa_r+0xb04>
 80073de:	f018 0f01 	tst.w	r8, #1
 80073e2:	d1ac      	bne.n	800733e <_dtoa_r+0xa5e>
 80073e4:	4633      	mov	r3, r6
 80073e6:	461e      	mov	r6, r3
 80073e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073ec:	2a30      	cmp	r2, #48	@ 0x30
 80073ee:	d0fa      	beq.n	80073e6 <_dtoa_r+0xb06>
 80073f0:	e5c2      	b.n	8006f78 <_dtoa_r+0x698>
 80073f2:	459a      	cmp	sl, r3
 80073f4:	d1a4      	bne.n	8007340 <_dtoa_r+0xa60>
 80073f6:	9b04      	ldr	r3, [sp, #16]
 80073f8:	3301      	adds	r3, #1
 80073fa:	9304      	str	r3, [sp, #16]
 80073fc:	2331      	movs	r3, #49	@ 0x31
 80073fe:	f88a 3000 	strb.w	r3, [sl]
 8007402:	e5b9      	b.n	8006f78 <_dtoa_r+0x698>
 8007404:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007406:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007464 <_dtoa_r+0xb84>
 800740a:	b11b      	cbz	r3, 8007414 <_dtoa_r+0xb34>
 800740c:	f10a 0308 	add.w	r3, sl, #8
 8007410:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007412:	6013      	str	r3, [r2, #0]
 8007414:	4650      	mov	r0, sl
 8007416:	b019      	add	sp, #100	@ 0x64
 8007418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800741c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800741e:	2b01      	cmp	r3, #1
 8007420:	f77f ae37 	ble.w	8007092 <_dtoa_r+0x7b2>
 8007424:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007426:	930a      	str	r3, [sp, #40]	@ 0x28
 8007428:	2001      	movs	r0, #1
 800742a:	e655      	b.n	80070d8 <_dtoa_r+0x7f8>
 800742c:	9b00      	ldr	r3, [sp, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	f77f aed6 	ble.w	80071e0 <_dtoa_r+0x900>
 8007434:	4656      	mov	r6, sl
 8007436:	4621      	mov	r1, r4
 8007438:	4648      	mov	r0, r9
 800743a:	f7ff f9c6 	bl	80067ca <quorem>
 800743e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007442:	f806 8b01 	strb.w	r8, [r6], #1
 8007446:	9b00      	ldr	r3, [sp, #0]
 8007448:	eba6 020a 	sub.w	r2, r6, sl
 800744c:	4293      	cmp	r3, r2
 800744e:	ddb3      	ble.n	80073b8 <_dtoa_r+0xad8>
 8007450:	4649      	mov	r1, r9
 8007452:	2300      	movs	r3, #0
 8007454:	220a      	movs	r2, #10
 8007456:	4658      	mov	r0, fp
 8007458:	f000 f968 	bl	800772c <__multadd>
 800745c:	4681      	mov	r9, r0
 800745e:	e7ea      	b.n	8007436 <_dtoa_r+0xb56>
 8007460:	0800a52c 	.word	0x0800a52c
 8007464:	0800a4b0 	.word	0x0800a4b0

08007468 <_free_r>:
 8007468:	b538      	push	{r3, r4, r5, lr}
 800746a:	4605      	mov	r5, r0
 800746c:	2900      	cmp	r1, #0
 800746e:	d041      	beq.n	80074f4 <_free_r+0x8c>
 8007470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007474:	1f0c      	subs	r4, r1, #4
 8007476:	2b00      	cmp	r3, #0
 8007478:	bfb8      	it	lt
 800747a:	18e4      	addlt	r4, r4, r3
 800747c:	f000 f8e8 	bl	8007650 <__malloc_lock>
 8007480:	4a1d      	ldr	r2, [pc, #116]	@ (80074f8 <_free_r+0x90>)
 8007482:	6813      	ldr	r3, [r2, #0]
 8007484:	b933      	cbnz	r3, 8007494 <_free_r+0x2c>
 8007486:	6063      	str	r3, [r4, #4]
 8007488:	6014      	str	r4, [r2, #0]
 800748a:	4628      	mov	r0, r5
 800748c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007490:	f000 b8e4 	b.w	800765c <__malloc_unlock>
 8007494:	42a3      	cmp	r3, r4
 8007496:	d908      	bls.n	80074aa <_free_r+0x42>
 8007498:	6820      	ldr	r0, [r4, #0]
 800749a:	1821      	adds	r1, r4, r0
 800749c:	428b      	cmp	r3, r1
 800749e:	bf01      	itttt	eq
 80074a0:	6819      	ldreq	r1, [r3, #0]
 80074a2:	685b      	ldreq	r3, [r3, #4]
 80074a4:	1809      	addeq	r1, r1, r0
 80074a6:	6021      	streq	r1, [r4, #0]
 80074a8:	e7ed      	b.n	8007486 <_free_r+0x1e>
 80074aa:	461a      	mov	r2, r3
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	b10b      	cbz	r3, 80074b4 <_free_r+0x4c>
 80074b0:	42a3      	cmp	r3, r4
 80074b2:	d9fa      	bls.n	80074aa <_free_r+0x42>
 80074b4:	6811      	ldr	r1, [r2, #0]
 80074b6:	1850      	adds	r0, r2, r1
 80074b8:	42a0      	cmp	r0, r4
 80074ba:	d10b      	bne.n	80074d4 <_free_r+0x6c>
 80074bc:	6820      	ldr	r0, [r4, #0]
 80074be:	4401      	add	r1, r0
 80074c0:	1850      	adds	r0, r2, r1
 80074c2:	4283      	cmp	r3, r0
 80074c4:	6011      	str	r1, [r2, #0]
 80074c6:	d1e0      	bne.n	800748a <_free_r+0x22>
 80074c8:	6818      	ldr	r0, [r3, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	6053      	str	r3, [r2, #4]
 80074ce:	4408      	add	r0, r1
 80074d0:	6010      	str	r0, [r2, #0]
 80074d2:	e7da      	b.n	800748a <_free_r+0x22>
 80074d4:	d902      	bls.n	80074dc <_free_r+0x74>
 80074d6:	230c      	movs	r3, #12
 80074d8:	602b      	str	r3, [r5, #0]
 80074da:	e7d6      	b.n	800748a <_free_r+0x22>
 80074dc:	6820      	ldr	r0, [r4, #0]
 80074de:	1821      	adds	r1, r4, r0
 80074e0:	428b      	cmp	r3, r1
 80074e2:	bf04      	itt	eq
 80074e4:	6819      	ldreq	r1, [r3, #0]
 80074e6:	685b      	ldreq	r3, [r3, #4]
 80074e8:	6063      	str	r3, [r4, #4]
 80074ea:	bf04      	itt	eq
 80074ec:	1809      	addeq	r1, r1, r0
 80074ee:	6021      	streq	r1, [r4, #0]
 80074f0:	6054      	str	r4, [r2, #4]
 80074f2:	e7ca      	b.n	800748a <_free_r+0x22>
 80074f4:	bd38      	pop	{r3, r4, r5, pc}
 80074f6:	bf00      	nop
 80074f8:	20000894 	.word	0x20000894

080074fc <malloc>:
 80074fc:	4b02      	ldr	r3, [pc, #8]	@ (8007508 <malloc+0xc>)
 80074fe:	4601      	mov	r1, r0
 8007500:	6818      	ldr	r0, [r3, #0]
 8007502:	f000 b825 	b.w	8007550 <_malloc_r>
 8007506:	bf00      	nop
 8007508:	20000018 	.word	0x20000018

0800750c <sbrk_aligned>:
 800750c:	b570      	push	{r4, r5, r6, lr}
 800750e:	4e0f      	ldr	r6, [pc, #60]	@ (800754c <sbrk_aligned+0x40>)
 8007510:	460c      	mov	r4, r1
 8007512:	6831      	ldr	r1, [r6, #0]
 8007514:	4605      	mov	r5, r0
 8007516:	b911      	cbnz	r1, 800751e <sbrk_aligned+0x12>
 8007518:	f001 f802 	bl	8008520 <_sbrk_r>
 800751c:	6030      	str	r0, [r6, #0]
 800751e:	4621      	mov	r1, r4
 8007520:	4628      	mov	r0, r5
 8007522:	f000 fffd 	bl	8008520 <_sbrk_r>
 8007526:	1c43      	adds	r3, r0, #1
 8007528:	d103      	bne.n	8007532 <sbrk_aligned+0x26>
 800752a:	f04f 34ff 	mov.w	r4, #4294967295
 800752e:	4620      	mov	r0, r4
 8007530:	bd70      	pop	{r4, r5, r6, pc}
 8007532:	1cc4      	adds	r4, r0, #3
 8007534:	f024 0403 	bic.w	r4, r4, #3
 8007538:	42a0      	cmp	r0, r4
 800753a:	d0f8      	beq.n	800752e <sbrk_aligned+0x22>
 800753c:	1a21      	subs	r1, r4, r0
 800753e:	4628      	mov	r0, r5
 8007540:	f000 ffee 	bl	8008520 <_sbrk_r>
 8007544:	3001      	adds	r0, #1
 8007546:	d1f2      	bne.n	800752e <sbrk_aligned+0x22>
 8007548:	e7ef      	b.n	800752a <sbrk_aligned+0x1e>
 800754a:	bf00      	nop
 800754c:	20000890 	.word	0x20000890

08007550 <_malloc_r>:
 8007550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007554:	1ccd      	adds	r5, r1, #3
 8007556:	f025 0503 	bic.w	r5, r5, #3
 800755a:	3508      	adds	r5, #8
 800755c:	2d0c      	cmp	r5, #12
 800755e:	bf38      	it	cc
 8007560:	250c      	movcc	r5, #12
 8007562:	2d00      	cmp	r5, #0
 8007564:	4606      	mov	r6, r0
 8007566:	db01      	blt.n	800756c <_malloc_r+0x1c>
 8007568:	42a9      	cmp	r1, r5
 800756a:	d904      	bls.n	8007576 <_malloc_r+0x26>
 800756c:	230c      	movs	r3, #12
 800756e:	6033      	str	r3, [r6, #0]
 8007570:	2000      	movs	r0, #0
 8007572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007576:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800764c <_malloc_r+0xfc>
 800757a:	f000 f869 	bl	8007650 <__malloc_lock>
 800757e:	f8d8 3000 	ldr.w	r3, [r8]
 8007582:	461c      	mov	r4, r3
 8007584:	bb44      	cbnz	r4, 80075d8 <_malloc_r+0x88>
 8007586:	4629      	mov	r1, r5
 8007588:	4630      	mov	r0, r6
 800758a:	f7ff ffbf 	bl	800750c <sbrk_aligned>
 800758e:	1c43      	adds	r3, r0, #1
 8007590:	4604      	mov	r4, r0
 8007592:	d158      	bne.n	8007646 <_malloc_r+0xf6>
 8007594:	f8d8 4000 	ldr.w	r4, [r8]
 8007598:	4627      	mov	r7, r4
 800759a:	2f00      	cmp	r7, #0
 800759c:	d143      	bne.n	8007626 <_malloc_r+0xd6>
 800759e:	2c00      	cmp	r4, #0
 80075a0:	d04b      	beq.n	800763a <_malloc_r+0xea>
 80075a2:	6823      	ldr	r3, [r4, #0]
 80075a4:	4639      	mov	r1, r7
 80075a6:	4630      	mov	r0, r6
 80075a8:	eb04 0903 	add.w	r9, r4, r3
 80075ac:	f000 ffb8 	bl	8008520 <_sbrk_r>
 80075b0:	4581      	cmp	r9, r0
 80075b2:	d142      	bne.n	800763a <_malloc_r+0xea>
 80075b4:	6821      	ldr	r1, [r4, #0]
 80075b6:	1a6d      	subs	r5, r5, r1
 80075b8:	4629      	mov	r1, r5
 80075ba:	4630      	mov	r0, r6
 80075bc:	f7ff ffa6 	bl	800750c <sbrk_aligned>
 80075c0:	3001      	adds	r0, #1
 80075c2:	d03a      	beq.n	800763a <_malloc_r+0xea>
 80075c4:	6823      	ldr	r3, [r4, #0]
 80075c6:	442b      	add	r3, r5
 80075c8:	6023      	str	r3, [r4, #0]
 80075ca:	f8d8 3000 	ldr.w	r3, [r8]
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	bb62      	cbnz	r2, 800762c <_malloc_r+0xdc>
 80075d2:	f8c8 7000 	str.w	r7, [r8]
 80075d6:	e00f      	b.n	80075f8 <_malloc_r+0xa8>
 80075d8:	6822      	ldr	r2, [r4, #0]
 80075da:	1b52      	subs	r2, r2, r5
 80075dc:	d420      	bmi.n	8007620 <_malloc_r+0xd0>
 80075de:	2a0b      	cmp	r2, #11
 80075e0:	d917      	bls.n	8007612 <_malloc_r+0xc2>
 80075e2:	1961      	adds	r1, r4, r5
 80075e4:	42a3      	cmp	r3, r4
 80075e6:	6025      	str	r5, [r4, #0]
 80075e8:	bf18      	it	ne
 80075ea:	6059      	strne	r1, [r3, #4]
 80075ec:	6863      	ldr	r3, [r4, #4]
 80075ee:	bf08      	it	eq
 80075f0:	f8c8 1000 	streq.w	r1, [r8]
 80075f4:	5162      	str	r2, [r4, r5]
 80075f6:	604b      	str	r3, [r1, #4]
 80075f8:	4630      	mov	r0, r6
 80075fa:	f000 f82f 	bl	800765c <__malloc_unlock>
 80075fe:	f104 000b 	add.w	r0, r4, #11
 8007602:	1d23      	adds	r3, r4, #4
 8007604:	f020 0007 	bic.w	r0, r0, #7
 8007608:	1ac2      	subs	r2, r0, r3
 800760a:	bf1c      	itt	ne
 800760c:	1a1b      	subne	r3, r3, r0
 800760e:	50a3      	strne	r3, [r4, r2]
 8007610:	e7af      	b.n	8007572 <_malloc_r+0x22>
 8007612:	6862      	ldr	r2, [r4, #4]
 8007614:	42a3      	cmp	r3, r4
 8007616:	bf0c      	ite	eq
 8007618:	f8c8 2000 	streq.w	r2, [r8]
 800761c:	605a      	strne	r2, [r3, #4]
 800761e:	e7eb      	b.n	80075f8 <_malloc_r+0xa8>
 8007620:	4623      	mov	r3, r4
 8007622:	6864      	ldr	r4, [r4, #4]
 8007624:	e7ae      	b.n	8007584 <_malloc_r+0x34>
 8007626:	463c      	mov	r4, r7
 8007628:	687f      	ldr	r7, [r7, #4]
 800762a:	e7b6      	b.n	800759a <_malloc_r+0x4a>
 800762c:	461a      	mov	r2, r3
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	42a3      	cmp	r3, r4
 8007632:	d1fb      	bne.n	800762c <_malloc_r+0xdc>
 8007634:	2300      	movs	r3, #0
 8007636:	6053      	str	r3, [r2, #4]
 8007638:	e7de      	b.n	80075f8 <_malloc_r+0xa8>
 800763a:	230c      	movs	r3, #12
 800763c:	6033      	str	r3, [r6, #0]
 800763e:	4630      	mov	r0, r6
 8007640:	f000 f80c 	bl	800765c <__malloc_unlock>
 8007644:	e794      	b.n	8007570 <_malloc_r+0x20>
 8007646:	6005      	str	r5, [r0, #0]
 8007648:	e7d6      	b.n	80075f8 <_malloc_r+0xa8>
 800764a:	bf00      	nop
 800764c:	20000894 	.word	0x20000894

08007650 <__malloc_lock>:
 8007650:	4801      	ldr	r0, [pc, #4]	@ (8007658 <__malloc_lock+0x8>)
 8007652:	f7ff b8aa 	b.w	80067aa <__retarget_lock_acquire_recursive>
 8007656:	bf00      	nop
 8007658:	2000088c 	.word	0x2000088c

0800765c <__malloc_unlock>:
 800765c:	4801      	ldr	r0, [pc, #4]	@ (8007664 <__malloc_unlock+0x8>)
 800765e:	f7ff b8a5 	b.w	80067ac <__retarget_lock_release_recursive>
 8007662:	bf00      	nop
 8007664:	2000088c 	.word	0x2000088c

08007668 <_Balloc>:
 8007668:	b570      	push	{r4, r5, r6, lr}
 800766a:	69c6      	ldr	r6, [r0, #28]
 800766c:	4604      	mov	r4, r0
 800766e:	460d      	mov	r5, r1
 8007670:	b976      	cbnz	r6, 8007690 <_Balloc+0x28>
 8007672:	2010      	movs	r0, #16
 8007674:	f7ff ff42 	bl	80074fc <malloc>
 8007678:	4602      	mov	r2, r0
 800767a:	61e0      	str	r0, [r4, #28]
 800767c:	b920      	cbnz	r0, 8007688 <_Balloc+0x20>
 800767e:	4b18      	ldr	r3, [pc, #96]	@ (80076e0 <_Balloc+0x78>)
 8007680:	4818      	ldr	r0, [pc, #96]	@ (80076e4 <_Balloc+0x7c>)
 8007682:	216b      	movs	r1, #107	@ 0x6b
 8007684:	f000 ff5c 	bl	8008540 <__assert_func>
 8007688:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800768c:	6006      	str	r6, [r0, #0]
 800768e:	60c6      	str	r6, [r0, #12]
 8007690:	69e6      	ldr	r6, [r4, #28]
 8007692:	68f3      	ldr	r3, [r6, #12]
 8007694:	b183      	cbz	r3, 80076b8 <_Balloc+0x50>
 8007696:	69e3      	ldr	r3, [r4, #28]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800769e:	b9b8      	cbnz	r0, 80076d0 <_Balloc+0x68>
 80076a0:	2101      	movs	r1, #1
 80076a2:	fa01 f605 	lsl.w	r6, r1, r5
 80076a6:	1d72      	adds	r2, r6, #5
 80076a8:	0092      	lsls	r2, r2, #2
 80076aa:	4620      	mov	r0, r4
 80076ac:	f000 ff66 	bl	800857c <_calloc_r>
 80076b0:	b160      	cbz	r0, 80076cc <_Balloc+0x64>
 80076b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80076b6:	e00e      	b.n	80076d6 <_Balloc+0x6e>
 80076b8:	2221      	movs	r2, #33	@ 0x21
 80076ba:	2104      	movs	r1, #4
 80076bc:	4620      	mov	r0, r4
 80076be:	f000 ff5d 	bl	800857c <_calloc_r>
 80076c2:	69e3      	ldr	r3, [r4, #28]
 80076c4:	60f0      	str	r0, [r6, #12]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1e4      	bne.n	8007696 <_Balloc+0x2e>
 80076cc:	2000      	movs	r0, #0
 80076ce:	bd70      	pop	{r4, r5, r6, pc}
 80076d0:	6802      	ldr	r2, [r0, #0]
 80076d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80076d6:	2300      	movs	r3, #0
 80076d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80076dc:	e7f7      	b.n	80076ce <_Balloc+0x66>
 80076de:	bf00      	nop
 80076e0:	0800a4bd 	.word	0x0800a4bd
 80076e4:	0800a53d 	.word	0x0800a53d

080076e8 <_Bfree>:
 80076e8:	b570      	push	{r4, r5, r6, lr}
 80076ea:	69c6      	ldr	r6, [r0, #28]
 80076ec:	4605      	mov	r5, r0
 80076ee:	460c      	mov	r4, r1
 80076f0:	b976      	cbnz	r6, 8007710 <_Bfree+0x28>
 80076f2:	2010      	movs	r0, #16
 80076f4:	f7ff ff02 	bl	80074fc <malloc>
 80076f8:	4602      	mov	r2, r0
 80076fa:	61e8      	str	r0, [r5, #28]
 80076fc:	b920      	cbnz	r0, 8007708 <_Bfree+0x20>
 80076fe:	4b09      	ldr	r3, [pc, #36]	@ (8007724 <_Bfree+0x3c>)
 8007700:	4809      	ldr	r0, [pc, #36]	@ (8007728 <_Bfree+0x40>)
 8007702:	218f      	movs	r1, #143	@ 0x8f
 8007704:	f000 ff1c 	bl	8008540 <__assert_func>
 8007708:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800770c:	6006      	str	r6, [r0, #0]
 800770e:	60c6      	str	r6, [r0, #12]
 8007710:	b13c      	cbz	r4, 8007722 <_Bfree+0x3a>
 8007712:	69eb      	ldr	r3, [r5, #28]
 8007714:	6862      	ldr	r2, [r4, #4]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800771c:	6021      	str	r1, [r4, #0]
 800771e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007722:	bd70      	pop	{r4, r5, r6, pc}
 8007724:	0800a4bd 	.word	0x0800a4bd
 8007728:	0800a53d 	.word	0x0800a53d

0800772c <__multadd>:
 800772c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007730:	690d      	ldr	r5, [r1, #16]
 8007732:	4607      	mov	r7, r0
 8007734:	460c      	mov	r4, r1
 8007736:	461e      	mov	r6, r3
 8007738:	f101 0c14 	add.w	ip, r1, #20
 800773c:	2000      	movs	r0, #0
 800773e:	f8dc 3000 	ldr.w	r3, [ip]
 8007742:	b299      	uxth	r1, r3
 8007744:	fb02 6101 	mla	r1, r2, r1, r6
 8007748:	0c1e      	lsrs	r6, r3, #16
 800774a:	0c0b      	lsrs	r3, r1, #16
 800774c:	fb02 3306 	mla	r3, r2, r6, r3
 8007750:	b289      	uxth	r1, r1
 8007752:	3001      	adds	r0, #1
 8007754:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007758:	4285      	cmp	r5, r0
 800775a:	f84c 1b04 	str.w	r1, [ip], #4
 800775e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007762:	dcec      	bgt.n	800773e <__multadd+0x12>
 8007764:	b30e      	cbz	r6, 80077aa <__multadd+0x7e>
 8007766:	68a3      	ldr	r3, [r4, #8]
 8007768:	42ab      	cmp	r3, r5
 800776a:	dc19      	bgt.n	80077a0 <__multadd+0x74>
 800776c:	6861      	ldr	r1, [r4, #4]
 800776e:	4638      	mov	r0, r7
 8007770:	3101      	adds	r1, #1
 8007772:	f7ff ff79 	bl	8007668 <_Balloc>
 8007776:	4680      	mov	r8, r0
 8007778:	b928      	cbnz	r0, 8007786 <__multadd+0x5a>
 800777a:	4602      	mov	r2, r0
 800777c:	4b0c      	ldr	r3, [pc, #48]	@ (80077b0 <__multadd+0x84>)
 800777e:	480d      	ldr	r0, [pc, #52]	@ (80077b4 <__multadd+0x88>)
 8007780:	21ba      	movs	r1, #186	@ 0xba
 8007782:	f000 fedd 	bl	8008540 <__assert_func>
 8007786:	6922      	ldr	r2, [r4, #16]
 8007788:	3202      	adds	r2, #2
 800778a:	f104 010c 	add.w	r1, r4, #12
 800778e:	0092      	lsls	r2, r2, #2
 8007790:	300c      	adds	r0, #12
 8007792:	f7ff f80c 	bl	80067ae <memcpy>
 8007796:	4621      	mov	r1, r4
 8007798:	4638      	mov	r0, r7
 800779a:	f7ff ffa5 	bl	80076e8 <_Bfree>
 800779e:	4644      	mov	r4, r8
 80077a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80077a4:	3501      	adds	r5, #1
 80077a6:	615e      	str	r6, [r3, #20]
 80077a8:	6125      	str	r5, [r4, #16]
 80077aa:	4620      	mov	r0, r4
 80077ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077b0:	0800a52c 	.word	0x0800a52c
 80077b4:	0800a53d 	.word	0x0800a53d

080077b8 <__hi0bits>:
 80077b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80077bc:	4603      	mov	r3, r0
 80077be:	bf36      	itet	cc
 80077c0:	0403      	lslcc	r3, r0, #16
 80077c2:	2000      	movcs	r0, #0
 80077c4:	2010      	movcc	r0, #16
 80077c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077ca:	bf3c      	itt	cc
 80077cc:	021b      	lslcc	r3, r3, #8
 80077ce:	3008      	addcc	r0, #8
 80077d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077d4:	bf3c      	itt	cc
 80077d6:	011b      	lslcc	r3, r3, #4
 80077d8:	3004      	addcc	r0, #4
 80077da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077de:	bf3c      	itt	cc
 80077e0:	009b      	lslcc	r3, r3, #2
 80077e2:	3002      	addcc	r0, #2
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	db05      	blt.n	80077f4 <__hi0bits+0x3c>
 80077e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80077ec:	f100 0001 	add.w	r0, r0, #1
 80077f0:	bf08      	it	eq
 80077f2:	2020      	moveq	r0, #32
 80077f4:	4770      	bx	lr

080077f6 <__lo0bits>:
 80077f6:	6803      	ldr	r3, [r0, #0]
 80077f8:	4602      	mov	r2, r0
 80077fa:	f013 0007 	ands.w	r0, r3, #7
 80077fe:	d00b      	beq.n	8007818 <__lo0bits+0x22>
 8007800:	07d9      	lsls	r1, r3, #31
 8007802:	d421      	bmi.n	8007848 <__lo0bits+0x52>
 8007804:	0798      	lsls	r0, r3, #30
 8007806:	bf49      	itett	mi
 8007808:	085b      	lsrmi	r3, r3, #1
 800780a:	089b      	lsrpl	r3, r3, #2
 800780c:	2001      	movmi	r0, #1
 800780e:	6013      	strmi	r3, [r2, #0]
 8007810:	bf5c      	itt	pl
 8007812:	6013      	strpl	r3, [r2, #0]
 8007814:	2002      	movpl	r0, #2
 8007816:	4770      	bx	lr
 8007818:	b299      	uxth	r1, r3
 800781a:	b909      	cbnz	r1, 8007820 <__lo0bits+0x2a>
 800781c:	0c1b      	lsrs	r3, r3, #16
 800781e:	2010      	movs	r0, #16
 8007820:	b2d9      	uxtb	r1, r3
 8007822:	b909      	cbnz	r1, 8007828 <__lo0bits+0x32>
 8007824:	3008      	adds	r0, #8
 8007826:	0a1b      	lsrs	r3, r3, #8
 8007828:	0719      	lsls	r1, r3, #28
 800782a:	bf04      	itt	eq
 800782c:	091b      	lsreq	r3, r3, #4
 800782e:	3004      	addeq	r0, #4
 8007830:	0799      	lsls	r1, r3, #30
 8007832:	bf04      	itt	eq
 8007834:	089b      	lsreq	r3, r3, #2
 8007836:	3002      	addeq	r0, #2
 8007838:	07d9      	lsls	r1, r3, #31
 800783a:	d403      	bmi.n	8007844 <__lo0bits+0x4e>
 800783c:	085b      	lsrs	r3, r3, #1
 800783e:	f100 0001 	add.w	r0, r0, #1
 8007842:	d003      	beq.n	800784c <__lo0bits+0x56>
 8007844:	6013      	str	r3, [r2, #0]
 8007846:	4770      	bx	lr
 8007848:	2000      	movs	r0, #0
 800784a:	4770      	bx	lr
 800784c:	2020      	movs	r0, #32
 800784e:	4770      	bx	lr

08007850 <__i2b>:
 8007850:	b510      	push	{r4, lr}
 8007852:	460c      	mov	r4, r1
 8007854:	2101      	movs	r1, #1
 8007856:	f7ff ff07 	bl	8007668 <_Balloc>
 800785a:	4602      	mov	r2, r0
 800785c:	b928      	cbnz	r0, 800786a <__i2b+0x1a>
 800785e:	4b05      	ldr	r3, [pc, #20]	@ (8007874 <__i2b+0x24>)
 8007860:	4805      	ldr	r0, [pc, #20]	@ (8007878 <__i2b+0x28>)
 8007862:	f240 1145 	movw	r1, #325	@ 0x145
 8007866:	f000 fe6b 	bl	8008540 <__assert_func>
 800786a:	2301      	movs	r3, #1
 800786c:	6144      	str	r4, [r0, #20]
 800786e:	6103      	str	r3, [r0, #16]
 8007870:	bd10      	pop	{r4, pc}
 8007872:	bf00      	nop
 8007874:	0800a52c 	.word	0x0800a52c
 8007878:	0800a53d 	.word	0x0800a53d

0800787c <__multiply>:
 800787c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007880:	4614      	mov	r4, r2
 8007882:	690a      	ldr	r2, [r1, #16]
 8007884:	6923      	ldr	r3, [r4, #16]
 8007886:	429a      	cmp	r2, r3
 8007888:	bfa8      	it	ge
 800788a:	4623      	movge	r3, r4
 800788c:	460f      	mov	r7, r1
 800788e:	bfa4      	itt	ge
 8007890:	460c      	movge	r4, r1
 8007892:	461f      	movge	r7, r3
 8007894:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007898:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800789c:	68a3      	ldr	r3, [r4, #8]
 800789e:	6861      	ldr	r1, [r4, #4]
 80078a0:	eb0a 0609 	add.w	r6, sl, r9
 80078a4:	42b3      	cmp	r3, r6
 80078a6:	b085      	sub	sp, #20
 80078a8:	bfb8      	it	lt
 80078aa:	3101      	addlt	r1, #1
 80078ac:	f7ff fedc 	bl	8007668 <_Balloc>
 80078b0:	b930      	cbnz	r0, 80078c0 <__multiply+0x44>
 80078b2:	4602      	mov	r2, r0
 80078b4:	4b44      	ldr	r3, [pc, #272]	@ (80079c8 <__multiply+0x14c>)
 80078b6:	4845      	ldr	r0, [pc, #276]	@ (80079cc <__multiply+0x150>)
 80078b8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80078bc:	f000 fe40 	bl	8008540 <__assert_func>
 80078c0:	f100 0514 	add.w	r5, r0, #20
 80078c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80078c8:	462b      	mov	r3, r5
 80078ca:	2200      	movs	r2, #0
 80078cc:	4543      	cmp	r3, r8
 80078ce:	d321      	bcc.n	8007914 <__multiply+0x98>
 80078d0:	f107 0114 	add.w	r1, r7, #20
 80078d4:	f104 0214 	add.w	r2, r4, #20
 80078d8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80078dc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80078e0:	9302      	str	r3, [sp, #8]
 80078e2:	1b13      	subs	r3, r2, r4
 80078e4:	3b15      	subs	r3, #21
 80078e6:	f023 0303 	bic.w	r3, r3, #3
 80078ea:	3304      	adds	r3, #4
 80078ec:	f104 0715 	add.w	r7, r4, #21
 80078f0:	42ba      	cmp	r2, r7
 80078f2:	bf38      	it	cc
 80078f4:	2304      	movcc	r3, #4
 80078f6:	9301      	str	r3, [sp, #4]
 80078f8:	9b02      	ldr	r3, [sp, #8]
 80078fa:	9103      	str	r1, [sp, #12]
 80078fc:	428b      	cmp	r3, r1
 80078fe:	d80c      	bhi.n	800791a <__multiply+0x9e>
 8007900:	2e00      	cmp	r6, #0
 8007902:	dd03      	ble.n	800790c <__multiply+0x90>
 8007904:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007908:	2b00      	cmp	r3, #0
 800790a:	d05b      	beq.n	80079c4 <__multiply+0x148>
 800790c:	6106      	str	r6, [r0, #16]
 800790e:	b005      	add	sp, #20
 8007910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007914:	f843 2b04 	str.w	r2, [r3], #4
 8007918:	e7d8      	b.n	80078cc <__multiply+0x50>
 800791a:	f8b1 a000 	ldrh.w	sl, [r1]
 800791e:	f1ba 0f00 	cmp.w	sl, #0
 8007922:	d024      	beq.n	800796e <__multiply+0xf2>
 8007924:	f104 0e14 	add.w	lr, r4, #20
 8007928:	46a9      	mov	r9, r5
 800792a:	f04f 0c00 	mov.w	ip, #0
 800792e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007932:	f8d9 3000 	ldr.w	r3, [r9]
 8007936:	fa1f fb87 	uxth.w	fp, r7
 800793a:	b29b      	uxth	r3, r3
 800793c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007940:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007944:	f8d9 7000 	ldr.w	r7, [r9]
 8007948:	4463      	add	r3, ip
 800794a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800794e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007952:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007956:	b29b      	uxth	r3, r3
 8007958:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800795c:	4572      	cmp	r2, lr
 800795e:	f849 3b04 	str.w	r3, [r9], #4
 8007962:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007966:	d8e2      	bhi.n	800792e <__multiply+0xb2>
 8007968:	9b01      	ldr	r3, [sp, #4]
 800796a:	f845 c003 	str.w	ip, [r5, r3]
 800796e:	9b03      	ldr	r3, [sp, #12]
 8007970:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007974:	3104      	adds	r1, #4
 8007976:	f1b9 0f00 	cmp.w	r9, #0
 800797a:	d021      	beq.n	80079c0 <__multiply+0x144>
 800797c:	682b      	ldr	r3, [r5, #0]
 800797e:	f104 0c14 	add.w	ip, r4, #20
 8007982:	46ae      	mov	lr, r5
 8007984:	f04f 0a00 	mov.w	sl, #0
 8007988:	f8bc b000 	ldrh.w	fp, [ip]
 800798c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007990:	fb09 770b 	mla	r7, r9, fp, r7
 8007994:	4457      	add	r7, sl
 8007996:	b29b      	uxth	r3, r3
 8007998:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800799c:	f84e 3b04 	str.w	r3, [lr], #4
 80079a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80079a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079a8:	f8be 3000 	ldrh.w	r3, [lr]
 80079ac:	fb09 330a 	mla	r3, r9, sl, r3
 80079b0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80079b4:	4562      	cmp	r2, ip
 80079b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079ba:	d8e5      	bhi.n	8007988 <__multiply+0x10c>
 80079bc:	9f01      	ldr	r7, [sp, #4]
 80079be:	51eb      	str	r3, [r5, r7]
 80079c0:	3504      	adds	r5, #4
 80079c2:	e799      	b.n	80078f8 <__multiply+0x7c>
 80079c4:	3e01      	subs	r6, #1
 80079c6:	e79b      	b.n	8007900 <__multiply+0x84>
 80079c8:	0800a52c 	.word	0x0800a52c
 80079cc:	0800a53d 	.word	0x0800a53d

080079d0 <__pow5mult>:
 80079d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079d4:	4615      	mov	r5, r2
 80079d6:	f012 0203 	ands.w	r2, r2, #3
 80079da:	4607      	mov	r7, r0
 80079dc:	460e      	mov	r6, r1
 80079de:	d007      	beq.n	80079f0 <__pow5mult+0x20>
 80079e0:	4c25      	ldr	r4, [pc, #148]	@ (8007a78 <__pow5mult+0xa8>)
 80079e2:	3a01      	subs	r2, #1
 80079e4:	2300      	movs	r3, #0
 80079e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80079ea:	f7ff fe9f 	bl	800772c <__multadd>
 80079ee:	4606      	mov	r6, r0
 80079f0:	10ad      	asrs	r5, r5, #2
 80079f2:	d03d      	beq.n	8007a70 <__pow5mult+0xa0>
 80079f4:	69fc      	ldr	r4, [r7, #28]
 80079f6:	b97c      	cbnz	r4, 8007a18 <__pow5mult+0x48>
 80079f8:	2010      	movs	r0, #16
 80079fa:	f7ff fd7f 	bl	80074fc <malloc>
 80079fe:	4602      	mov	r2, r0
 8007a00:	61f8      	str	r0, [r7, #28]
 8007a02:	b928      	cbnz	r0, 8007a10 <__pow5mult+0x40>
 8007a04:	4b1d      	ldr	r3, [pc, #116]	@ (8007a7c <__pow5mult+0xac>)
 8007a06:	481e      	ldr	r0, [pc, #120]	@ (8007a80 <__pow5mult+0xb0>)
 8007a08:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007a0c:	f000 fd98 	bl	8008540 <__assert_func>
 8007a10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a14:	6004      	str	r4, [r0, #0]
 8007a16:	60c4      	str	r4, [r0, #12]
 8007a18:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007a1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a20:	b94c      	cbnz	r4, 8007a36 <__pow5mult+0x66>
 8007a22:	f240 2171 	movw	r1, #625	@ 0x271
 8007a26:	4638      	mov	r0, r7
 8007a28:	f7ff ff12 	bl	8007850 <__i2b>
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a32:	4604      	mov	r4, r0
 8007a34:	6003      	str	r3, [r0, #0]
 8007a36:	f04f 0900 	mov.w	r9, #0
 8007a3a:	07eb      	lsls	r3, r5, #31
 8007a3c:	d50a      	bpl.n	8007a54 <__pow5mult+0x84>
 8007a3e:	4631      	mov	r1, r6
 8007a40:	4622      	mov	r2, r4
 8007a42:	4638      	mov	r0, r7
 8007a44:	f7ff ff1a 	bl	800787c <__multiply>
 8007a48:	4631      	mov	r1, r6
 8007a4a:	4680      	mov	r8, r0
 8007a4c:	4638      	mov	r0, r7
 8007a4e:	f7ff fe4b 	bl	80076e8 <_Bfree>
 8007a52:	4646      	mov	r6, r8
 8007a54:	106d      	asrs	r5, r5, #1
 8007a56:	d00b      	beq.n	8007a70 <__pow5mult+0xa0>
 8007a58:	6820      	ldr	r0, [r4, #0]
 8007a5a:	b938      	cbnz	r0, 8007a6c <__pow5mult+0x9c>
 8007a5c:	4622      	mov	r2, r4
 8007a5e:	4621      	mov	r1, r4
 8007a60:	4638      	mov	r0, r7
 8007a62:	f7ff ff0b 	bl	800787c <__multiply>
 8007a66:	6020      	str	r0, [r4, #0]
 8007a68:	f8c0 9000 	str.w	r9, [r0]
 8007a6c:	4604      	mov	r4, r0
 8007a6e:	e7e4      	b.n	8007a3a <__pow5mult+0x6a>
 8007a70:	4630      	mov	r0, r6
 8007a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a76:	bf00      	nop
 8007a78:	0800a598 	.word	0x0800a598
 8007a7c:	0800a4bd 	.word	0x0800a4bd
 8007a80:	0800a53d 	.word	0x0800a53d

08007a84 <__lshift>:
 8007a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a88:	460c      	mov	r4, r1
 8007a8a:	6849      	ldr	r1, [r1, #4]
 8007a8c:	6923      	ldr	r3, [r4, #16]
 8007a8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007a92:	68a3      	ldr	r3, [r4, #8]
 8007a94:	4607      	mov	r7, r0
 8007a96:	4691      	mov	r9, r2
 8007a98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a9c:	f108 0601 	add.w	r6, r8, #1
 8007aa0:	42b3      	cmp	r3, r6
 8007aa2:	db0b      	blt.n	8007abc <__lshift+0x38>
 8007aa4:	4638      	mov	r0, r7
 8007aa6:	f7ff fddf 	bl	8007668 <_Balloc>
 8007aaa:	4605      	mov	r5, r0
 8007aac:	b948      	cbnz	r0, 8007ac2 <__lshift+0x3e>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	4b28      	ldr	r3, [pc, #160]	@ (8007b54 <__lshift+0xd0>)
 8007ab2:	4829      	ldr	r0, [pc, #164]	@ (8007b58 <__lshift+0xd4>)
 8007ab4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007ab8:	f000 fd42 	bl	8008540 <__assert_func>
 8007abc:	3101      	adds	r1, #1
 8007abe:	005b      	lsls	r3, r3, #1
 8007ac0:	e7ee      	b.n	8007aa0 <__lshift+0x1c>
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	f100 0114 	add.w	r1, r0, #20
 8007ac8:	f100 0210 	add.w	r2, r0, #16
 8007acc:	4618      	mov	r0, r3
 8007ace:	4553      	cmp	r3, sl
 8007ad0:	db33      	blt.n	8007b3a <__lshift+0xb6>
 8007ad2:	6920      	ldr	r0, [r4, #16]
 8007ad4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ad8:	f104 0314 	add.w	r3, r4, #20
 8007adc:	f019 091f 	ands.w	r9, r9, #31
 8007ae0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ae4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ae8:	d02b      	beq.n	8007b42 <__lshift+0xbe>
 8007aea:	f1c9 0e20 	rsb	lr, r9, #32
 8007aee:	468a      	mov	sl, r1
 8007af0:	2200      	movs	r2, #0
 8007af2:	6818      	ldr	r0, [r3, #0]
 8007af4:	fa00 f009 	lsl.w	r0, r0, r9
 8007af8:	4310      	orrs	r0, r2
 8007afa:	f84a 0b04 	str.w	r0, [sl], #4
 8007afe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b02:	459c      	cmp	ip, r3
 8007b04:	fa22 f20e 	lsr.w	r2, r2, lr
 8007b08:	d8f3      	bhi.n	8007af2 <__lshift+0x6e>
 8007b0a:	ebac 0304 	sub.w	r3, ip, r4
 8007b0e:	3b15      	subs	r3, #21
 8007b10:	f023 0303 	bic.w	r3, r3, #3
 8007b14:	3304      	adds	r3, #4
 8007b16:	f104 0015 	add.w	r0, r4, #21
 8007b1a:	4584      	cmp	ip, r0
 8007b1c:	bf38      	it	cc
 8007b1e:	2304      	movcc	r3, #4
 8007b20:	50ca      	str	r2, [r1, r3]
 8007b22:	b10a      	cbz	r2, 8007b28 <__lshift+0xa4>
 8007b24:	f108 0602 	add.w	r6, r8, #2
 8007b28:	3e01      	subs	r6, #1
 8007b2a:	4638      	mov	r0, r7
 8007b2c:	612e      	str	r6, [r5, #16]
 8007b2e:	4621      	mov	r1, r4
 8007b30:	f7ff fdda 	bl	80076e8 <_Bfree>
 8007b34:	4628      	mov	r0, r5
 8007b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007b3e:	3301      	adds	r3, #1
 8007b40:	e7c5      	b.n	8007ace <__lshift+0x4a>
 8007b42:	3904      	subs	r1, #4
 8007b44:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b48:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b4c:	459c      	cmp	ip, r3
 8007b4e:	d8f9      	bhi.n	8007b44 <__lshift+0xc0>
 8007b50:	e7ea      	b.n	8007b28 <__lshift+0xa4>
 8007b52:	bf00      	nop
 8007b54:	0800a52c 	.word	0x0800a52c
 8007b58:	0800a53d 	.word	0x0800a53d

08007b5c <__mcmp>:
 8007b5c:	690a      	ldr	r2, [r1, #16]
 8007b5e:	4603      	mov	r3, r0
 8007b60:	6900      	ldr	r0, [r0, #16]
 8007b62:	1a80      	subs	r0, r0, r2
 8007b64:	b530      	push	{r4, r5, lr}
 8007b66:	d10e      	bne.n	8007b86 <__mcmp+0x2a>
 8007b68:	3314      	adds	r3, #20
 8007b6a:	3114      	adds	r1, #20
 8007b6c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007b70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007b74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007b78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007b7c:	4295      	cmp	r5, r2
 8007b7e:	d003      	beq.n	8007b88 <__mcmp+0x2c>
 8007b80:	d205      	bcs.n	8007b8e <__mcmp+0x32>
 8007b82:	f04f 30ff 	mov.w	r0, #4294967295
 8007b86:	bd30      	pop	{r4, r5, pc}
 8007b88:	42a3      	cmp	r3, r4
 8007b8a:	d3f3      	bcc.n	8007b74 <__mcmp+0x18>
 8007b8c:	e7fb      	b.n	8007b86 <__mcmp+0x2a>
 8007b8e:	2001      	movs	r0, #1
 8007b90:	e7f9      	b.n	8007b86 <__mcmp+0x2a>
	...

08007b94 <__mdiff>:
 8007b94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b98:	4689      	mov	r9, r1
 8007b9a:	4606      	mov	r6, r0
 8007b9c:	4611      	mov	r1, r2
 8007b9e:	4648      	mov	r0, r9
 8007ba0:	4614      	mov	r4, r2
 8007ba2:	f7ff ffdb 	bl	8007b5c <__mcmp>
 8007ba6:	1e05      	subs	r5, r0, #0
 8007ba8:	d112      	bne.n	8007bd0 <__mdiff+0x3c>
 8007baa:	4629      	mov	r1, r5
 8007bac:	4630      	mov	r0, r6
 8007bae:	f7ff fd5b 	bl	8007668 <_Balloc>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	b928      	cbnz	r0, 8007bc2 <__mdiff+0x2e>
 8007bb6:	4b3f      	ldr	r3, [pc, #252]	@ (8007cb4 <__mdiff+0x120>)
 8007bb8:	f240 2137 	movw	r1, #567	@ 0x237
 8007bbc:	483e      	ldr	r0, [pc, #248]	@ (8007cb8 <__mdiff+0x124>)
 8007bbe:	f000 fcbf 	bl	8008540 <__assert_func>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007bc8:	4610      	mov	r0, r2
 8007bca:	b003      	add	sp, #12
 8007bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bd0:	bfbc      	itt	lt
 8007bd2:	464b      	movlt	r3, r9
 8007bd4:	46a1      	movlt	r9, r4
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007bdc:	bfba      	itte	lt
 8007bde:	461c      	movlt	r4, r3
 8007be0:	2501      	movlt	r5, #1
 8007be2:	2500      	movge	r5, #0
 8007be4:	f7ff fd40 	bl	8007668 <_Balloc>
 8007be8:	4602      	mov	r2, r0
 8007bea:	b918      	cbnz	r0, 8007bf4 <__mdiff+0x60>
 8007bec:	4b31      	ldr	r3, [pc, #196]	@ (8007cb4 <__mdiff+0x120>)
 8007bee:	f240 2145 	movw	r1, #581	@ 0x245
 8007bf2:	e7e3      	b.n	8007bbc <__mdiff+0x28>
 8007bf4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007bf8:	6926      	ldr	r6, [r4, #16]
 8007bfa:	60c5      	str	r5, [r0, #12]
 8007bfc:	f109 0310 	add.w	r3, r9, #16
 8007c00:	f109 0514 	add.w	r5, r9, #20
 8007c04:	f104 0e14 	add.w	lr, r4, #20
 8007c08:	f100 0b14 	add.w	fp, r0, #20
 8007c0c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007c10:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007c14:	9301      	str	r3, [sp, #4]
 8007c16:	46d9      	mov	r9, fp
 8007c18:	f04f 0c00 	mov.w	ip, #0
 8007c1c:	9b01      	ldr	r3, [sp, #4]
 8007c1e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007c22:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007c26:	9301      	str	r3, [sp, #4]
 8007c28:	fa1f f38a 	uxth.w	r3, sl
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	b283      	uxth	r3, r0
 8007c30:	1acb      	subs	r3, r1, r3
 8007c32:	0c00      	lsrs	r0, r0, #16
 8007c34:	4463      	add	r3, ip
 8007c36:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007c3a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007c44:	4576      	cmp	r6, lr
 8007c46:	f849 3b04 	str.w	r3, [r9], #4
 8007c4a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007c4e:	d8e5      	bhi.n	8007c1c <__mdiff+0x88>
 8007c50:	1b33      	subs	r3, r6, r4
 8007c52:	3b15      	subs	r3, #21
 8007c54:	f023 0303 	bic.w	r3, r3, #3
 8007c58:	3415      	adds	r4, #21
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	42a6      	cmp	r6, r4
 8007c5e:	bf38      	it	cc
 8007c60:	2304      	movcc	r3, #4
 8007c62:	441d      	add	r5, r3
 8007c64:	445b      	add	r3, fp
 8007c66:	461e      	mov	r6, r3
 8007c68:	462c      	mov	r4, r5
 8007c6a:	4544      	cmp	r4, r8
 8007c6c:	d30e      	bcc.n	8007c8c <__mdiff+0xf8>
 8007c6e:	f108 0103 	add.w	r1, r8, #3
 8007c72:	1b49      	subs	r1, r1, r5
 8007c74:	f021 0103 	bic.w	r1, r1, #3
 8007c78:	3d03      	subs	r5, #3
 8007c7a:	45a8      	cmp	r8, r5
 8007c7c:	bf38      	it	cc
 8007c7e:	2100      	movcc	r1, #0
 8007c80:	440b      	add	r3, r1
 8007c82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007c86:	b191      	cbz	r1, 8007cae <__mdiff+0x11a>
 8007c88:	6117      	str	r7, [r2, #16]
 8007c8a:	e79d      	b.n	8007bc8 <__mdiff+0x34>
 8007c8c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007c90:	46e6      	mov	lr, ip
 8007c92:	0c08      	lsrs	r0, r1, #16
 8007c94:	fa1c fc81 	uxtah	ip, ip, r1
 8007c98:	4471      	add	r1, lr
 8007c9a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007c9e:	b289      	uxth	r1, r1
 8007ca0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007ca4:	f846 1b04 	str.w	r1, [r6], #4
 8007ca8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007cac:	e7dd      	b.n	8007c6a <__mdiff+0xd6>
 8007cae:	3f01      	subs	r7, #1
 8007cb0:	e7e7      	b.n	8007c82 <__mdiff+0xee>
 8007cb2:	bf00      	nop
 8007cb4:	0800a52c 	.word	0x0800a52c
 8007cb8:	0800a53d 	.word	0x0800a53d

08007cbc <__d2b>:
 8007cbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007cc0:	460f      	mov	r7, r1
 8007cc2:	2101      	movs	r1, #1
 8007cc4:	ec59 8b10 	vmov	r8, r9, d0
 8007cc8:	4616      	mov	r6, r2
 8007cca:	f7ff fccd 	bl	8007668 <_Balloc>
 8007cce:	4604      	mov	r4, r0
 8007cd0:	b930      	cbnz	r0, 8007ce0 <__d2b+0x24>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	4b23      	ldr	r3, [pc, #140]	@ (8007d64 <__d2b+0xa8>)
 8007cd6:	4824      	ldr	r0, [pc, #144]	@ (8007d68 <__d2b+0xac>)
 8007cd8:	f240 310f 	movw	r1, #783	@ 0x30f
 8007cdc:	f000 fc30 	bl	8008540 <__assert_func>
 8007ce0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007ce4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ce8:	b10d      	cbz	r5, 8007cee <__d2b+0x32>
 8007cea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cee:	9301      	str	r3, [sp, #4]
 8007cf0:	f1b8 0300 	subs.w	r3, r8, #0
 8007cf4:	d023      	beq.n	8007d3e <__d2b+0x82>
 8007cf6:	4668      	mov	r0, sp
 8007cf8:	9300      	str	r3, [sp, #0]
 8007cfa:	f7ff fd7c 	bl	80077f6 <__lo0bits>
 8007cfe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007d02:	b1d0      	cbz	r0, 8007d3a <__d2b+0x7e>
 8007d04:	f1c0 0320 	rsb	r3, r0, #32
 8007d08:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0c:	430b      	orrs	r3, r1
 8007d0e:	40c2      	lsrs	r2, r0
 8007d10:	6163      	str	r3, [r4, #20]
 8007d12:	9201      	str	r2, [sp, #4]
 8007d14:	9b01      	ldr	r3, [sp, #4]
 8007d16:	61a3      	str	r3, [r4, #24]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	bf0c      	ite	eq
 8007d1c:	2201      	moveq	r2, #1
 8007d1e:	2202      	movne	r2, #2
 8007d20:	6122      	str	r2, [r4, #16]
 8007d22:	b1a5      	cbz	r5, 8007d4e <__d2b+0x92>
 8007d24:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007d28:	4405      	add	r5, r0
 8007d2a:	603d      	str	r5, [r7, #0]
 8007d2c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007d30:	6030      	str	r0, [r6, #0]
 8007d32:	4620      	mov	r0, r4
 8007d34:	b003      	add	sp, #12
 8007d36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d3a:	6161      	str	r1, [r4, #20]
 8007d3c:	e7ea      	b.n	8007d14 <__d2b+0x58>
 8007d3e:	a801      	add	r0, sp, #4
 8007d40:	f7ff fd59 	bl	80077f6 <__lo0bits>
 8007d44:	9b01      	ldr	r3, [sp, #4]
 8007d46:	6163      	str	r3, [r4, #20]
 8007d48:	3020      	adds	r0, #32
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	e7e8      	b.n	8007d20 <__d2b+0x64>
 8007d4e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d52:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007d56:	6038      	str	r0, [r7, #0]
 8007d58:	6918      	ldr	r0, [r3, #16]
 8007d5a:	f7ff fd2d 	bl	80077b8 <__hi0bits>
 8007d5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007d62:	e7e5      	b.n	8007d30 <__d2b+0x74>
 8007d64:	0800a52c 	.word	0x0800a52c
 8007d68:	0800a53d 	.word	0x0800a53d

08007d6c <__ssputs_r>:
 8007d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d70:	688e      	ldr	r6, [r1, #8]
 8007d72:	461f      	mov	r7, r3
 8007d74:	42be      	cmp	r6, r7
 8007d76:	680b      	ldr	r3, [r1, #0]
 8007d78:	4682      	mov	sl, r0
 8007d7a:	460c      	mov	r4, r1
 8007d7c:	4690      	mov	r8, r2
 8007d7e:	d82d      	bhi.n	8007ddc <__ssputs_r+0x70>
 8007d80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007d88:	d026      	beq.n	8007dd8 <__ssputs_r+0x6c>
 8007d8a:	6965      	ldr	r5, [r4, #20]
 8007d8c:	6909      	ldr	r1, [r1, #16]
 8007d8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d92:	eba3 0901 	sub.w	r9, r3, r1
 8007d96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d9a:	1c7b      	adds	r3, r7, #1
 8007d9c:	444b      	add	r3, r9
 8007d9e:	106d      	asrs	r5, r5, #1
 8007da0:	429d      	cmp	r5, r3
 8007da2:	bf38      	it	cc
 8007da4:	461d      	movcc	r5, r3
 8007da6:	0553      	lsls	r3, r2, #21
 8007da8:	d527      	bpl.n	8007dfa <__ssputs_r+0x8e>
 8007daa:	4629      	mov	r1, r5
 8007dac:	f7ff fbd0 	bl	8007550 <_malloc_r>
 8007db0:	4606      	mov	r6, r0
 8007db2:	b360      	cbz	r0, 8007e0e <__ssputs_r+0xa2>
 8007db4:	6921      	ldr	r1, [r4, #16]
 8007db6:	464a      	mov	r2, r9
 8007db8:	f7fe fcf9 	bl	80067ae <memcpy>
 8007dbc:	89a3      	ldrh	r3, [r4, #12]
 8007dbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007dc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dc6:	81a3      	strh	r3, [r4, #12]
 8007dc8:	6126      	str	r6, [r4, #16]
 8007dca:	6165      	str	r5, [r4, #20]
 8007dcc:	444e      	add	r6, r9
 8007dce:	eba5 0509 	sub.w	r5, r5, r9
 8007dd2:	6026      	str	r6, [r4, #0]
 8007dd4:	60a5      	str	r5, [r4, #8]
 8007dd6:	463e      	mov	r6, r7
 8007dd8:	42be      	cmp	r6, r7
 8007dda:	d900      	bls.n	8007dde <__ssputs_r+0x72>
 8007ddc:	463e      	mov	r6, r7
 8007dde:	6820      	ldr	r0, [r4, #0]
 8007de0:	4632      	mov	r2, r6
 8007de2:	4641      	mov	r1, r8
 8007de4:	f7fe fc49 	bl	800667a <memmove>
 8007de8:	68a3      	ldr	r3, [r4, #8]
 8007dea:	1b9b      	subs	r3, r3, r6
 8007dec:	60a3      	str	r3, [r4, #8]
 8007dee:	6823      	ldr	r3, [r4, #0]
 8007df0:	4433      	add	r3, r6
 8007df2:	6023      	str	r3, [r4, #0]
 8007df4:	2000      	movs	r0, #0
 8007df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dfa:	462a      	mov	r2, r5
 8007dfc:	f000 fbe4 	bl	80085c8 <_realloc_r>
 8007e00:	4606      	mov	r6, r0
 8007e02:	2800      	cmp	r0, #0
 8007e04:	d1e0      	bne.n	8007dc8 <__ssputs_r+0x5c>
 8007e06:	6921      	ldr	r1, [r4, #16]
 8007e08:	4650      	mov	r0, sl
 8007e0a:	f7ff fb2d 	bl	8007468 <_free_r>
 8007e0e:	230c      	movs	r3, #12
 8007e10:	f8ca 3000 	str.w	r3, [sl]
 8007e14:	89a3      	ldrh	r3, [r4, #12]
 8007e16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e1a:	81a3      	strh	r3, [r4, #12]
 8007e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e20:	e7e9      	b.n	8007df6 <__ssputs_r+0x8a>
	...

08007e24 <_svfiprintf_r>:
 8007e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e28:	4698      	mov	r8, r3
 8007e2a:	898b      	ldrh	r3, [r1, #12]
 8007e2c:	061b      	lsls	r3, r3, #24
 8007e2e:	b09d      	sub	sp, #116	@ 0x74
 8007e30:	4607      	mov	r7, r0
 8007e32:	460d      	mov	r5, r1
 8007e34:	4614      	mov	r4, r2
 8007e36:	d510      	bpl.n	8007e5a <_svfiprintf_r+0x36>
 8007e38:	690b      	ldr	r3, [r1, #16]
 8007e3a:	b973      	cbnz	r3, 8007e5a <_svfiprintf_r+0x36>
 8007e3c:	2140      	movs	r1, #64	@ 0x40
 8007e3e:	f7ff fb87 	bl	8007550 <_malloc_r>
 8007e42:	6028      	str	r0, [r5, #0]
 8007e44:	6128      	str	r0, [r5, #16]
 8007e46:	b930      	cbnz	r0, 8007e56 <_svfiprintf_r+0x32>
 8007e48:	230c      	movs	r3, #12
 8007e4a:	603b      	str	r3, [r7, #0]
 8007e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e50:	b01d      	add	sp, #116	@ 0x74
 8007e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e56:	2340      	movs	r3, #64	@ 0x40
 8007e58:	616b      	str	r3, [r5, #20]
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e5e:	2320      	movs	r3, #32
 8007e60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e64:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e68:	2330      	movs	r3, #48	@ 0x30
 8007e6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008008 <_svfiprintf_r+0x1e4>
 8007e6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e72:	f04f 0901 	mov.w	r9, #1
 8007e76:	4623      	mov	r3, r4
 8007e78:	469a      	mov	sl, r3
 8007e7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e7e:	b10a      	cbz	r2, 8007e84 <_svfiprintf_r+0x60>
 8007e80:	2a25      	cmp	r2, #37	@ 0x25
 8007e82:	d1f9      	bne.n	8007e78 <_svfiprintf_r+0x54>
 8007e84:	ebba 0b04 	subs.w	fp, sl, r4
 8007e88:	d00b      	beq.n	8007ea2 <_svfiprintf_r+0x7e>
 8007e8a:	465b      	mov	r3, fp
 8007e8c:	4622      	mov	r2, r4
 8007e8e:	4629      	mov	r1, r5
 8007e90:	4638      	mov	r0, r7
 8007e92:	f7ff ff6b 	bl	8007d6c <__ssputs_r>
 8007e96:	3001      	adds	r0, #1
 8007e98:	f000 80a7 	beq.w	8007fea <_svfiprintf_r+0x1c6>
 8007e9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e9e:	445a      	add	r2, fp
 8007ea0:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f000 809f 	beq.w	8007fea <_svfiprintf_r+0x1c6>
 8007eac:	2300      	movs	r3, #0
 8007eae:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007eb6:	f10a 0a01 	add.w	sl, sl, #1
 8007eba:	9304      	str	r3, [sp, #16]
 8007ebc:	9307      	str	r3, [sp, #28]
 8007ebe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ec2:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ec4:	4654      	mov	r4, sl
 8007ec6:	2205      	movs	r2, #5
 8007ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ecc:	484e      	ldr	r0, [pc, #312]	@ (8008008 <_svfiprintf_r+0x1e4>)
 8007ece:	f7f8 f97f 	bl	80001d0 <memchr>
 8007ed2:	9a04      	ldr	r2, [sp, #16]
 8007ed4:	b9d8      	cbnz	r0, 8007f0e <_svfiprintf_r+0xea>
 8007ed6:	06d0      	lsls	r0, r2, #27
 8007ed8:	bf44      	itt	mi
 8007eda:	2320      	movmi	r3, #32
 8007edc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ee0:	0711      	lsls	r1, r2, #28
 8007ee2:	bf44      	itt	mi
 8007ee4:	232b      	movmi	r3, #43	@ 0x2b
 8007ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007eea:	f89a 3000 	ldrb.w	r3, [sl]
 8007eee:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ef0:	d015      	beq.n	8007f1e <_svfiprintf_r+0xfa>
 8007ef2:	9a07      	ldr	r2, [sp, #28]
 8007ef4:	4654      	mov	r4, sl
 8007ef6:	2000      	movs	r0, #0
 8007ef8:	f04f 0c0a 	mov.w	ip, #10
 8007efc:	4621      	mov	r1, r4
 8007efe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f02:	3b30      	subs	r3, #48	@ 0x30
 8007f04:	2b09      	cmp	r3, #9
 8007f06:	d94b      	bls.n	8007fa0 <_svfiprintf_r+0x17c>
 8007f08:	b1b0      	cbz	r0, 8007f38 <_svfiprintf_r+0x114>
 8007f0a:	9207      	str	r2, [sp, #28]
 8007f0c:	e014      	b.n	8007f38 <_svfiprintf_r+0x114>
 8007f0e:	eba0 0308 	sub.w	r3, r0, r8
 8007f12:	fa09 f303 	lsl.w	r3, r9, r3
 8007f16:	4313      	orrs	r3, r2
 8007f18:	9304      	str	r3, [sp, #16]
 8007f1a:	46a2      	mov	sl, r4
 8007f1c:	e7d2      	b.n	8007ec4 <_svfiprintf_r+0xa0>
 8007f1e:	9b03      	ldr	r3, [sp, #12]
 8007f20:	1d19      	adds	r1, r3, #4
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	9103      	str	r1, [sp, #12]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	bfbb      	ittet	lt
 8007f2a:	425b      	neglt	r3, r3
 8007f2c:	f042 0202 	orrlt.w	r2, r2, #2
 8007f30:	9307      	strge	r3, [sp, #28]
 8007f32:	9307      	strlt	r3, [sp, #28]
 8007f34:	bfb8      	it	lt
 8007f36:	9204      	strlt	r2, [sp, #16]
 8007f38:	7823      	ldrb	r3, [r4, #0]
 8007f3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f3c:	d10a      	bne.n	8007f54 <_svfiprintf_r+0x130>
 8007f3e:	7863      	ldrb	r3, [r4, #1]
 8007f40:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f42:	d132      	bne.n	8007faa <_svfiprintf_r+0x186>
 8007f44:	9b03      	ldr	r3, [sp, #12]
 8007f46:	1d1a      	adds	r2, r3, #4
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	9203      	str	r2, [sp, #12]
 8007f4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f50:	3402      	adds	r4, #2
 8007f52:	9305      	str	r3, [sp, #20]
 8007f54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008018 <_svfiprintf_r+0x1f4>
 8007f58:	7821      	ldrb	r1, [r4, #0]
 8007f5a:	2203      	movs	r2, #3
 8007f5c:	4650      	mov	r0, sl
 8007f5e:	f7f8 f937 	bl	80001d0 <memchr>
 8007f62:	b138      	cbz	r0, 8007f74 <_svfiprintf_r+0x150>
 8007f64:	9b04      	ldr	r3, [sp, #16]
 8007f66:	eba0 000a 	sub.w	r0, r0, sl
 8007f6a:	2240      	movs	r2, #64	@ 0x40
 8007f6c:	4082      	lsls	r2, r0
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	3401      	adds	r4, #1
 8007f72:	9304      	str	r3, [sp, #16]
 8007f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f78:	4824      	ldr	r0, [pc, #144]	@ (800800c <_svfiprintf_r+0x1e8>)
 8007f7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f7e:	2206      	movs	r2, #6
 8007f80:	f7f8 f926 	bl	80001d0 <memchr>
 8007f84:	2800      	cmp	r0, #0
 8007f86:	d036      	beq.n	8007ff6 <_svfiprintf_r+0x1d2>
 8007f88:	4b21      	ldr	r3, [pc, #132]	@ (8008010 <_svfiprintf_r+0x1ec>)
 8007f8a:	bb1b      	cbnz	r3, 8007fd4 <_svfiprintf_r+0x1b0>
 8007f8c:	9b03      	ldr	r3, [sp, #12]
 8007f8e:	3307      	adds	r3, #7
 8007f90:	f023 0307 	bic.w	r3, r3, #7
 8007f94:	3308      	adds	r3, #8
 8007f96:	9303      	str	r3, [sp, #12]
 8007f98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f9a:	4433      	add	r3, r6
 8007f9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f9e:	e76a      	b.n	8007e76 <_svfiprintf_r+0x52>
 8007fa0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fa4:	460c      	mov	r4, r1
 8007fa6:	2001      	movs	r0, #1
 8007fa8:	e7a8      	b.n	8007efc <_svfiprintf_r+0xd8>
 8007faa:	2300      	movs	r3, #0
 8007fac:	3401      	adds	r4, #1
 8007fae:	9305      	str	r3, [sp, #20]
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	f04f 0c0a 	mov.w	ip, #10
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fbc:	3a30      	subs	r2, #48	@ 0x30
 8007fbe:	2a09      	cmp	r2, #9
 8007fc0:	d903      	bls.n	8007fca <_svfiprintf_r+0x1a6>
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d0c6      	beq.n	8007f54 <_svfiprintf_r+0x130>
 8007fc6:	9105      	str	r1, [sp, #20]
 8007fc8:	e7c4      	b.n	8007f54 <_svfiprintf_r+0x130>
 8007fca:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fce:	4604      	mov	r4, r0
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e7f0      	b.n	8007fb6 <_svfiprintf_r+0x192>
 8007fd4:	ab03      	add	r3, sp, #12
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	462a      	mov	r2, r5
 8007fda:	4b0e      	ldr	r3, [pc, #56]	@ (8008014 <_svfiprintf_r+0x1f0>)
 8007fdc:	a904      	add	r1, sp, #16
 8007fde:	4638      	mov	r0, r7
 8007fe0:	f7fd fe28 	bl	8005c34 <_printf_float>
 8007fe4:	1c42      	adds	r2, r0, #1
 8007fe6:	4606      	mov	r6, r0
 8007fe8:	d1d6      	bne.n	8007f98 <_svfiprintf_r+0x174>
 8007fea:	89ab      	ldrh	r3, [r5, #12]
 8007fec:	065b      	lsls	r3, r3, #25
 8007fee:	f53f af2d 	bmi.w	8007e4c <_svfiprintf_r+0x28>
 8007ff2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ff4:	e72c      	b.n	8007e50 <_svfiprintf_r+0x2c>
 8007ff6:	ab03      	add	r3, sp, #12
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	462a      	mov	r2, r5
 8007ffc:	4b05      	ldr	r3, [pc, #20]	@ (8008014 <_svfiprintf_r+0x1f0>)
 8007ffe:	a904      	add	r1, sp, #16
 8008000:	4638      	mov	r0, r7
 8008002:	f7fe f8af 	bl	8006164 <_printf_i>
 8008006:	e7ed      	b.n	8007fe4 <_svfiprintf_r+0x1c0>
 8008008:	0800a698 	.word	0x0800a698
 800800c:	0800a6a2 	.word	0x0800a6a2
 8008010:	08005c35 	.word	0x08005c35
 8008014:	08007d6d 	.word	0x08007d6d
 8008018:	0800a69e 	.word	0x0800a69e

0800801c <__sfputc_r>:
 800801c:	6893      	ldr	r3, [r2, #8]
 800801e:	3b01      	subs	r3, #1
 8008020:	2b00      	cmp	r3, #0
 8008022:	b410      	push	{r4}
 8008024:	6093      	str	r3, [r2, #8]
 8008026:	da08      	bge.n	800803a <__sfputc_r+0x1e>
 8008028:	6994      	ldr	r4, [r2, #24]
 800802a:	42a3      	cmp	r3, r4
 800802c:	db01      	blt.n	8008032 <__sfputc_r+0x16>
 800802e:	290a      	cmp	r1, #10
 8008030:	d103      	bne.n	800803a <__sfputc_r+0x1e>
 8008032:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008036:	f000 b9df 	b.w	80083f8 <__swbuf_r>
 800803a:	6813      	ldr	r3, [r2, #0]
 800803c:	1c58      	adds	r0, r3, #1
 800803e:	6010      	str	r0, [r2, #0]
 8008040:	7019      	strb	r1, [r3, #0]
 8008042:	4608      	mov	r0, r1
 8008044:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008048:	4770      	bx	lr

0800804a <__sfputs_r>:
 800804a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800804c:	4606      	mov	r6, r0
 800804e:	460f      	mov	r7, r1
 8008050:	4614      	mov	r4, r2
 8008052:	18d5      	adds	r5, r2, r3
 8008054:	42ac      	cmp	r4, r5
 8008056:	d101      	bne.n	800805c <__sfputs_r+0x12>
 8008058:	2000      	movs	r0, #0
 800805a:	e007      	b.n	800806c <__sfputs_r+0x22>
 800805c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008060:	463a      	mov	r2, r7
 8008062:	4630      	mov	r0, r6
 8008064:	f7ff ffda 	bl	800801c <__sfputc_r>
 8008068:	1c43      	adds	r3, r0, #1
 800806a:	d1f3      	bne.n	8008054 <__sfputs_r+0xa>
 800806c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008070 <_vfiprintf_r>:
 8008070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008074:	460d      	mov	r5, r1
 8008076:	b09d      	sub	sp, #116	@ 0x74
 8008078:	4614      	mov	r4, r2
 800807a:	4698      	mov	r8, r3
 800807c:	4606      	mov	r6, r0
 800807e:	b118      	cbz	r0, 8008088 <_vfiprintf_r+0x18>
 8008080:	6a03      	ldr	r3, [r0, #32]
 8008082:	b90b      	cbnz	r3, 8008088 <_vfiprintf_r+0x18>
 8008084:	f7fe fa1a 	bl	80064bc <__sinit>
 8008088:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800808a:	07d9      	lsls	r1, r3, #31
 800808c:	d405      	bmi.n	800809a <_vfiprintf_r+0x2a>
 800808e:	89ab      	ldrh	r3, [r5, #12]
 8008090:	059a      	lsls	r2, r3, #22
 8008092:	d402      	bmi.n	800809a <_vfiprintf_r+0x2a>
 8008094:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008096:	f7fe fb88 	bl	80067aa <__retarget_lock_acquire_recursive>
 800809a:	89ab      	ldrh	r3, [r5, #12]
 800809c:	071b      	lsls	r3, r3, #28
 800809e:	d501      	bpl.n	80080a4 <_vfiprintf_r+0x34>
 80080a0:	692b      	ldr	r3, [r5, #16]
 80080a2:	b99b      	cbnz	r3, 80080cc <_vfiprintf_r+0x5c>
 80080a4:	4629      	mov	r1, r5
 80080a6:	4630      	mov	r0, r6
 80080a8:	f000 f9e4 	bl	8008474 <__swsetup_r>
 80080ac:	b170      	cbz	r0, 80080cc <_vfiprintf_r+0x5c>
 80080ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080b0:	07dc      	lsls	r4, r3, #31
 80080b2:	d504      	bpl.n	80080be <_vfiprintf_r+0x4e>
 80080b4:	f04f 30ff 	mov.w	r0, #4294967295
 80080b8:	b01d      	add	sp, #116	@ 0x74
 80080ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080be:	89ab      	ldrh	r3, [r5, #12]
 80080c0:	0598      	lsls	r0, r3, #22
 80080c2:	d4f7      	bmi.n	80080b4 <_vfiprintf_r+0x44>
 80080c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080c6:	f7fe fb71 	bl	80067ac <__retarget_lock_release_recursive>
 80080ca:	e7f3      	b.n	80080b4 <_vfiprintf_r+0x44>
 80080cc:	2300      	movs	r3, #0
 80080ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80080d0:	2320      	movs	r3, #32
 80080d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80080da:	2330      	movs	r3, #48	@ 0x30
 80080dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800828c <_vfiprintf_r+0x21c>
 80080e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080e4:	f04f 0901 	mov.w	r9, #1
 80080e8:	4623      	mov	r3, r4
 80080ea:	469a      	mov	sl, r3
 80080ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080f0:	b10a      	cbz	r2, 80080f6 <_vfiprintf_r+0x86>
 80080f2:	2a25      	cmp	r2, #37	@ 0x25
 80080f4:	d1f9      	bne.n	80080ea <_vfiprintf_r+0x7a>
 80080f6:	ebba 0b04 	subs.w	fp, sl, r4
 80080fa:	d00b      	beq.n	8008114 <_vfiprintf_r+0xa4>
 80080fc:	465b      	mov	r3, fp
 80080fe:	4622      	mov	r2, r4
 8008100:	4629      	mov	r1, r5
 8008102:	4630      	mov	r0, r6
 8008104:	f7ff ffa1 	bl	800804a <__sfputs_r>
 8008108:	3001      	adds	r0, #1
 800810a:	f000 80a7 	beq.w	800825c <_vfiprintf_r+0x1ec>
 800810e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008110:	445a      	add	r2, fp
 8008112:	9209      	str	r2, [sp, #36]	@ 0x24
 8008114:	f89a 3000 	ldrb.w	r3, [sl]
 8008118:	2b00      	cmp	r3, #0
 800811a:	f000 809f 	beq.w	800825c <_vfiprintf_r+0x1ec>
 800811e:	2300      	movs	r3, #0
 8008120:	f04f 32ff 	mov.w	r2, #4294967295
 8008124:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008128:	f10a 0a01 	add.w	sl, sl, #1
 800812c:	9304      	str	r3, [sp, #16]
 800812e:	9307      	str	r3, [sp, #28]
 8008130:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008134:	931a      	str	r3, [sp, #104]	@ 0x68
 8008136:	4654      	mov	r4, sl
 8008138:	2205      	movs	r2, #5
 800813a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800813e:	4853      	ldr	r0, [pc, #332]	@ (800828c <_vfiprintf_r+0x21c>)
 8008140:	f7f8 f846 	bl	80001d0 <memchr>
 8008144:	9a04      	ldr	r2, [sp, #16]
 8008146:	b9d8      	cbnz	r0, 8008180 <_vfiprintf_r+0x110>
 8008148:	06d1      	lsls	r1, r2, #27
 800814a:	bf44      	itt	mi
 800814c:	2320      	movmi	r3, #32
 800814e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008152:	0713      	lsls	r3, r2, #28
 8008154:	bf44      	itt	mi
 8008156:	232b      	movmi	r3, #43	@ 0x2b
 8008158:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800815c:	f89a 3000 	ldrb.w	r3, [sl]
 8008160:	2b2a      	cmp	r3, #42	@ 0x2a
 8008162:	d015      	beq.n	8008190 <_vfiprintf_r+0x120>
 8008164:	9a07      	ldr	r2, [sp, #28]
 8008166:	4654      	mov	r4, sl
 8008168:	2000      	movs	r0, #0
 800816a:	f04f 0c0a 	mov.w	ip, #10
 800816e:	4621      	mov	r1, r4
 8008170:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008174:	3b30      	subs	r3, #48	@ 0x30
 8008176:	2b09      	cmp	r3, #9
 8008178:	d94b      	bls.n	8008212 <_vfiprintf_r+0x1a2>
 800817a:	b1b0      	cbz	r0, 80081aa <_vfiprintf_r+0x13a>
 800817c:	9207      	str	r2, [sp, #28]
 800817e:	e014      	b.n	80081aa <_vfiprintf_r+0x13a>
 8008180:	eba0 0308 	sub.w	r3, r0, r8
 8008184:	fa09 f303 	lsl.w	r3, r9, r3
 8008188:	4313      	orrs	r3, r2
 800818a:	9304      	str	r3, [sp, #16]
 800818c:	46a2      	mov	sl, r4
 800818e:	e7d2      	b.n	8008136 <_vfiprintf_r+0xc6>
 8008190:	9b03      	ldr	r3, [sp, #12]
 8008192:	1d19      	adds	r1, r3, #4
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	9103      	str	r1, [sp, #12]
 8008198:	2b00      	cmp	r3, #0
 800819a:	bfbb      	ittet	lt
 800819c:	425b      	neglt	r3, r3
 800819e:	f042 0202 	orrlt.w	r2, r2, #2
 80081a2:	9307      	strge	r3, [sp, #28]
 80081a4:	9307      	strlt	r3, [sp, #28]
 80081a6:	bfb8      	it	lt
 80081a8:	9204      	strlt	r2, [sp, #16]
 80081aa:	7823      	ldrb	r3, [r4, #0]
 80081ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80081ae:	d10a      	bne.n	80081c6 <_vfiprintf_r+0x156>
 80081b0:	7863      	ldrb	r3, [r4, #1]
 80081b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80081b4:	d132      	bne.n	800821c <_vfiprintf_r+0x1ac>
 80081b6:	9b03      	ldr	r3, [sp, #12]
 80081b8:	1d1a      	adds	r2, r3, #4
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	9203      	str	r2, [sp, #12]
 80081be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081c2:	3402      	adds	r4, #2
 80081c4:	9305      	str	r3, [sp, #20]
 80081c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800829c <_vfiprintf_r+0x22c>
 80081ca:	7821      	ldrb	r1, [r4, #0]
 80081cc:	2203      	movs	r2, #3
 80081ce:	4650      	mov	r0, sl
 80081d0:	f7f7 fffe 	bl	80001d0 <memchr>
 80081d4:	b138      	cbz	r0, 80081e6 <_vfiprintf_r+0x176>
 80081d6:	9b04      	ldr	r3, [sp, #16]
 80081d8:	eba0 000a 	sub.w	r0, r0, sl
 80081dc:	2240      	movs	r2, #64	@ 0x40
 80081de:	4082      	lsls	r2, r0
 80081e0:	4313      	orrs	r3, r2
 80081e2:	3401      	adds	r4, #1
 80081e4:	9304      	str	r3, [sp, #16]
 80081e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ea:	4829      	ldr	r0, [pc, #164]	@ (8008290 <_vfiprintf_r+0x220>)
 80081ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081f0:	2206      	movs	r2, #6
 80081f2:	f7f7 ffed 	bl	80001d0 <memchr>
 80081f6:	2800      	cmp	r0, #0
 80081f8:	d03f      	beq.n	800827a <_vfiprintf_r+0x20a>
 80081fa:	4b26      	ldr	r3, [pc, #152]	@ (8008294 <_vfiprintf_r+0x224>)
 80081fc:	bb1b      	cbnz	r3, 8008246 <_vfiprintf_r+0x1d6>
 80081fe:	9b03      	ldr	r3, [sp, #12]
 8008200:	3307      	adds	r3, #7
 8008202:	f023 0307 	bic.w	r3, r3, #7
 8008206:	3308      	adds	r3, #8
 8008208:	9303      	str	r3, [sp, #12]
 800820a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800820c:	443b      	add	r3, r7
 800820e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008210:	e76a      	b.n	80080e8 <_vfiprintf_r+0x78>
 8008212:	fb0c 3202 	mla	r2, ip, r2, r3
 8008216:	460c      	mov	r4, r1
 8008218:	2001      	movs	r0, #1
 800821a:	e7a8      	b.n	800816e <_vfiprintf_r+0xfe>
 800821c:	2300      	movs	r3, #0
 800821e:	3401      	adds	r4, #1
 8008220:	9305      	str	r3, [sp, #20]
 8008222:	4619      	mov	r1, r3
 8008224:	f04f 0c0a 	mov.w	ip, #10
 8008228:	4620      	mov	r0, r4
 800822a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800822e:	3a30      	subs	r2, #48	@ 0x30
 8008230:	2a09      	cmp	r2, #9
 8008232:	d903      	bls.n	800823c <_vfiprintf_r+0x1cc>
 8008234:	2b00      	cmp	r3, #0
 8008236:	d0c6      	beq.n	80081c6 <_vfiprintf_r+0x156>
 8008238:	9105      	str	r1, [sp, #20]
 800823a:	e7c4      	b.n	80081c6 <_vfiprintf_r+0x156>
 800823c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008240:	4604      	mov	r4, r0
 8008242:	2301      	movs	r3, #1
 8008244:	e7f0      	b.n	8008228 <_vfiprintf_r+0x1b8>
 8008246:	ab03      	add	r3, sp, #12
 8008248:	9300      	str	r3, [sp, #0]
 800824a:	462a      	mov	r2, r5
 800824c:	4b12      	ldr	r3, [pc, #72]	@ (8008298 <_vfiprintf_r+0x228>)
 800824e:	a904      	add	r1, sp, #16
 8008250:	4630      	mov	r0, r6
 8008252:	f7fd fcef 	bl	8005c34 <_printf_float>
 8008256:	4607      	mov	r7, r0
 8008258:	1c78      	adds	r0, r7, #1
 800825a:	d1d6      	bne.n	800820a <_vfiprintf_r+0x19a>
 800825c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800825e:	07d9      	lsls	r1, r3, #31
 8008260:	d405      	bmi.n	800826e <_vfiprintf_r+0x1fe>
 8008262:	89ab      	ldrh	r3, [r5, #12]
 8008264:	059a      	lsls	r2, r3, #22
 8008266:	d402      	bmi.n	800826e <_vfiprintf_r+0x1fe>
 8008268:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800826a:	f7fe fa9f 	bl	80067ac <__retarget_lock_release_recursive>
 800826e:	89ab      	ldrh	r3, [r5, #12]
 8008270:	065b      	lsls	r3, r3, #25
 8008272:	f53f af1f 	bmi.w	80080b4 <_vfiprintf_r+0x44>
 8008276:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008278:	e71e      	b.n	80080b8 <_vfiprintf_r+0x48>
 800827a:	ab03      	add	r3, sp, #12
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	462a      	mov	r2, r5
 8008280:	4b05      	ldr	r3, [pc, #20]	@ (8008298 <_vfiprintf_r+0x228>)
 8008282:	a904      	add	r1, sp, #16
 8008284:	4630      	mov	r0, r6
 8008286:	f7fd ff6d 	bl	8006164 <_printf_i>
 800828a:	e7e4      	b.n	8008256 <_vfiprintf_r+0x1e6>
 800828c:	0800a698 	.word	0x0800a698
 8008290:	0800a6a2 	.word	0x0800a6a2
 8008294:	08005c35 	.word	0x08005c35
 8008298:	0800804b 	.word	0x0800804b
 800829c:	0800a69e 	.word	0x0800a69e

080082a0 <__sflush_r>:
 80082a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082a8:	0716      	lsls	r6, r2, #28
 80082aa:	4605      	mov	r5, r0
 80082ac:	460c      	mov	r4, r1
 80082ae:	d454      	bmi.n	800835a <__sflush_r+0xba>
 80082b0:	684b      	ldr	r3, [r1, #4]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	dc02      	bgt.n	80082bc <__sflush_r+0x1c>
 80082b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	dd48      	ble.n	800834e <__sflush_r+0xae>
 80082bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082be:	2e00      	cmp	r6, #0
 80082c0:	d045      	beq.n	800834e <__sflush_r+0xae>
 80082c2:	2300      	movs	r3, #0
 80082c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80082c8:	682f      	ldr	r7, [r5, #0]
 80082ca:	6a21      	ldr	r1, [r4, #32]
 80082cc:	602b      	str	r3, [r5, #0]
 80082ce:	d030      	beq.n	8008332 <__sflush_r+0x92>
 80082d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80082d2:	89a3      	ldrh	r3, [r4, #12]
 80082d4:	0759      	lsls	r1, r3, #29
 80082d6:	d505      	bpl.n	80082e4 <__sflush_r+0x44>
 80082d8:	6863      	ldr	r3, [r4, #4]
 80082da:	1ad2      	subs	r2, r2, r3
 80082dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80082de:	b10b      	cbz	r3, 80082e4 <__sflush_r+0x44>
 80082e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80082e2:	1ad2      	subs	r2, r2, r3
 80082e4:	2300      	movs	r3, #0
 80082e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082e8:	6a21      	ldr	r1, [r4, #32]
 80082ea:	4628      	mov	r0, r5
 80082ec:	47b0      	blx	r6
 80082ee:	1c43      	adds	r3, r0, #1
 80082f0:	89a3      	ldrh	r3, [r4, #12]
 80082f2:	d106      	bne.n	8008302 <__sflush_r+0x62>
 80082f4:	6829      	ldr	r1, [r5, #0]
 80082f6:	291d      	cmp	r1, #29
 80082f8:	d82b      	bhi.n	8008352 <__sflush_r+0xb2>
 80082fa:	4a2a      	ldr	r2, [pc, #168]	@ (80083a4 <__sflush_r+0x104>)
 80082fc:	410a      	asrs	r2, r1
 80082fe:	07d6      	lsls	r6, r2, #31
 8008300:	d427      	bmi.n	8008352 <__sflush_r+0xb2>
 8008302:	2200      	movs	r2, #0
 8008304:	6062      	str	r2, [r4, #4]
 8008306:	04d9      	lsls	r1, r3, #19
 8008308:	6922      	ldr	r2, [r4, #16]
 800830a:	6022      	str	r2, [r4, #0]
 800830c:	d504      	bpl.n	8008318 <__sflush_r+0x78>
 800830e:	1c42      	adds	r2, r0, #1
 8008310:	d101      	bne.n	8008316 <__sflush_r+0x76>
 8008312:	682b      	ldr	r3, [r5, #0]
 8008314:	b903      	cbnz	r3, 8008318 <__sflush_r+0x78>
 8008316:	6560      	str	r0, [r4, #84]	@ 0x54
 8008318:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800831a:	602f      	str	r7, [r5, #0]
 800831c:	b1b9      	cbz	r1, 800834e <__sflush_r+0xae>
 800831e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008322:	4299      	cmp	r1, r3
 8008324:	d002      	beq.n	800832c <__sflush_r+0x8c>
 8008326:	4628      	mov	r0, r5
 8008328:	f7ff f89e 	bl	8007468 <_free_r>
 800832c:	2300      	movs	r3, #0
 800832e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008330:	e00d      	b.n	800834e <__sflush_r+0xae>
 8008332:	2301      	movs	r3, #1
 8008334:	4628      	mov	r0, r5
 8008336:	47b0      	blx	r6
 8008338:	4602      	mov	r2, r0
 800833a:	1c50      	adds	r0, r2, #1
 800833c:	d1c9      	bne.n	80082d2 <__sflush_r+0x32>
 800833e:	682b      	ldr	r3, [r5, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d0c6      	beq.n	80082d2 <__sflush_r+0x32>
 8008344:	2b1d      	cmp	r3, #29
 8008346:	d001      	beq.n	800834c <__sflush_r+0xac>
 8008348:	2b16      	cmp	r3, #22
 800834a:	d11e      	bne.n	800838a <__sflush_r+0xea>
 800834c:	602f      	str	r7, [r5, #0]
 800834e:	2000      	movs	r0, #0
 8008350:	e022      	b.n	8008398 <__sflush_r+0xf8>
 8008352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008356:	b21b      	sxth	r3, r3
 8008358:	e01b      	b.n	8008392 <__sflush_r+0xf2>
 800835a:	690f      	ldr	r7, [r1, #16]
 800835c:	2f00      	cmp	r7, #0
 800835e:	d0f6      	beq.n	800834e <__sflush_r+0xae>
 8008360:	0793      	lsls	r3, r2, #30
 8008362:	680e      	ldr	r6, [r1, #0]
 8008364:	bf08      	it	eq
 8008366:	694b      	ldreq	r3, [r1, #20]
 8008368:	600f      	str	r7, [r1, #0]
 800836a:	bf18      	it	ne
 800836c:	2300      	movne	r3, #0
 800836e:	eba6 0807 	sub.w	r8, r6, r7
 8008372:	608b      	str	r3, [r1, #8]
 8008374:	f1b8 0f00 	cmp.w	r8, #0
 8008378:	dde9      	ble.n	800834e <__sflush_r+0xae>
 800837a:	6a21      	ldr	r1, [r4, #32]
 800837c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800837e:	4643      	mov	r3, r8
 8008380:	463a      	mov	r2, r7
 8008382:	4628      	mov	r0, r5
 8008384:	47b0      	blx	r6
 8008386:	2800      	cmp	r0, #0
 8008388:	dc08      	bgt.n	800839c <__sflush_r+0xfc>
 800838a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800838e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008392:	81a3      	strh	r3, [r4, #12]
 8008394:	f04f 30ff 	mov.w	r0, #4294967295
 8008398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800839c:	4407      	add	r7, r0
 800839e:	eba8 0800 	sub.w	r8, r8, r0
 80083a2:	e7e7      	b.n	8008374 <__sflush_r+0xd4>
 80083a4:	dfbffffe 	.word	0xdfbffffe

080083a8 <_fflush_r>:
 80083a8:	b538      	push	{r3, r4, r5, lr}
 80083aa:	690b      	ldr	r3, [r1, #16]
 80083ac:	4605      	mov	r5, r0
 80083ae:	460c      	mov	r4, r1
 80083b0:	b913      	cbnz	r3, 80083b8 <_fflush_r+0x10>
 80083b2:	2500      	movs	r5, #0
 80083b4:	4628      	mov	r0, r5
 80083b6:	bd38      	pop	{r3, r4, r5, pc}
 80083b8:	b118      	cbz	r0, 80083c2 <_fflush_r+0x1a>
 80083ba:	6a03      	ldr	r3, [r0, #32]
 80083bc:	b90b      	cbnz	r3, 80083c2 <_fflush_r+0x1a>
 80083be:	f7fe f87d 	bl	80064bc <__sinit>
 80083c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d0f3      	beq.n	80083b2 <_fflush_r+0xa>
 80083ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80083cc:	07d0      	lsls	r0, r2, #31
 80083ce:	d404      	bmi.n	80083da <_fflush_r+0x32>
 80083d0:	0599      	lsls	r1, r3, #22
 80083d2:	d402      	bmi.n	80083da <_fflush_r+0x32>
 80083d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083d6:	f7fe f9e8 	bl	80067aa <__retarget_lock_acquire_recursive>
 80083da:	4628      	mov	r0, r5
 80083dc:	4621      	mov	r1, r4
 80083de:	f7ff ff5f 	bl	80082a0 <__sflush_r>
 80083e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80083e4:	07da      	lsls	r2, r3, #31
 80083e6:	4605      	mov	r5, r0
 80083e8:	d4e4      	bmi.n	80083b4 <_fflush_r+0xc>
 80083ea:	89a3      	ldrh	r3, [r4, #12]
 80083ec:	059b      	lsls	r3, r3, #22
 80083ee:	d4e1      	bmi.n	80083b4 <_fflush_r+0xc>
 80083f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083f2:	f7fe f9db 	bl	80067ac <__retarget_lock_release_recursive>
 80083f6:	e7dd      	b.n	80083b4 <_fflush_r+0xc>

080083f8 <__swbuf_r>:
 80083f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fa:	460e      	mov	r6, r1
 80083fc:	4614      	mov	r4, r2
 80083fe:	4605      	mov	r5, r0
 8008400:	b118      	cbz	r0, 800840a <__swbuf_r+0x12>
 8008402:	6a03      	ldr	r3, [r0, #32]
 8008404:	b90b      	cbnz	r3, 800840a <__swbuf_r+0x12>
 8008406:	f7fe f859 	bl	80064bc <__sinit>
 800840a:	69a3      	ldr	r3, [r4, #24]
 800840c:	60a3      	str	r3, [r4, #8]
 800840e:	89a3      	ldrh	r3, [r4, #12]
 8008410:	071a      	lsls	r2, r3, #28
 8008412:	d501      	bpl.n	8008418 <__swbuf_r+0x20>
 8008414:	6923      	ldr	r3, [r4, #16]
 8008416:	b943      	cbnz	r3, 800842a <__swbuf_r+0x32>
 8008418:	4621      	mov	r1, r4
 800841a:	4628      	mov	r0, r5
 800841c:	f000 f82a 	bl	8008474 <__swsetup_r>
 8008420:	b118      	cbz	r0, 800842a <__swbuf_r+0x32>
 8008422:	f04f 37ff 	mov.w	r7, #4294967295
 8008426:	4638      	mov	r0, r7
 8008428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800842a:	6823      	ldr	r3, [r4, #0]
 800842c:	6922      	ldr	r2, [r4, #16]
 800842e:	1a98      	subs	r0, r3, r2
 8008430:	6963      	ldr	r3, [r4, #20]
 8008432:	b2f6      	uxtb	r6, r6
 8008434:	4283      	cmp	r3, r0
 8008436:	4637      	mov	r7, r6
 8008438:	dc05      	bgt.n	8008446 <__swbuf_r+0x4e>
 800843a:	4621      	mov	r1, r4
 800843c:	4628      	mov	r0, r5
 800843e:	f7ff ffb3 	bl	80083a8 <_fflush_r>
 8008442:	2800      	cmp	r0, #0
 8008444:	d1ed      	bne.n	8008422 <__swbuf_r+0x2a>
 8008446:	68a3      	ldr	r3, [r4, #8]
 8008448:	3b01      	subs	r3, #1
 800844a:	60a3      	str	r3, [r4, #8]
 800844c:	6823      	ldr	r3, [r4, #0]
 800844e:	1c5a      	adds	r2, r3, #1
 8008450:	6022      	str	r2, [r4, #0]
 8008452:	701e      	strb	r6, [r3, #0]
 8008454:	6962      	ldr	r2, [r4, #20]
 8008456:	1c43      	adds	r3, r0, #1
 8008458:	429a      	cmp	r2, r3
 800845a:	d004      	beq.n	8008466 <__swbuf_r+0x6e>
 800845c:	89a3      	ldrh	r3, [r4, #12]
 800845e:	07db      	lsls	r3, r3, #31
 8008460:	d5e1      	bpl.n	8008426 <__swbuf_r+0x2e>
 8008462:	2e0a      	cmp	r6, #10
 8008464:	d1df      	bne.n	8008426 <__swbuf_r+0x2e>
 8008466:	4621      	mov	r1, r4
 8008468:	4628      	mov	r0, r5
 800846a:	f7ff ff9d 	bl	80083a8 <_fflush_r>
 800846e:	2800      	cmp	r0, #0
 8008470:	d0d9      	beq.n	8008426 <__swbuf_r+0x2e>
 8008472:	e7d6      	b.n	8008422 <__swbuf_r+0x2a>

08008474 <__swsetup_r>:
 8008474:	b538      	push	{r3, r4, r5, lr}
 8008476:	4b29      	ldr	r3, [pc, #164]	@ (800851c <__swsetup_r+0xa8>)
 8008478:	4605      	mov	r5, r0
 800847a:	6818      	ldr	r0, [r3, #0]
 800847c:	460c      	mov	r4, r1
 800847e:	b118      	cbz	r0, 8008488 <__swsetup_r+0x14>
 8008480:	6a03      	ldr	r3, [r0, #32]
 8008482:	b90b      	cbnz	r3, 8008488 <__swsetup_r+0x14>
 8008484:	f7fe f81a 	bl	80064bc <__sinit>
 8008488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800848c:	0719      	lsls	r1, r3, #28
 800848e:	d422      	bmi.n	80084d6 <__swsetup_r+0x62>
 8008490:	06da      	lsls	r2, r3, #27
 8008492:	d407      	bmi.n	80084a4 <__swsetup_r+0x30>
 8008494:	2209      	movs	r2, #9
 8008496:	602a      	str	r2, [r5, #0]
 8008498:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800849c:	81a3      	strh	r3, [r4, #12]
 800849e:	f04f 30ff 	mov.w	r0, #4294967295
 80084a2:	e033      	b.n	800850c <__swsetup_r+0x98>
 80084a4:	0758      	lsls	r0, r3, #29
 80084a6:	d512      	bpl.n	80084ce <__swsetup_r+0x5a>
 80084a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084aa:	b141      	cbz	r1, 80084be <__swsetup_r+0x4a>
 80084ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084b0:	4299      	cmp	r1, r3
 80084b2:	d002      	beq.n	80084ba <__swsetup_r+0x46>
 80084b4:	4628      	mov	r0, r5
 80084b6:	f7fe ffd7 	bl	8007468 <_free_r>
 80084ba:	2300      	movs	r3, #0
 80084bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80084be:	89a3      	ldrh	r3, [r4, #12]
 80084c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80084c4:	81a3      	strh	r3, [r4, #12]
 80084c6:	2300      	movs	r3, #0
 80084c8:	6063      	str	r3, [r4, #4]
 80084ca:	6923      	ldr	r3, [r4, #16]
 80084cc:	6023      	str	r3, [r4, #0]
 80084ce:	89a3      	ldrh	r3, [r4, #12]
 80084d0:	f043 0308 	orr.w	r3, r3, #8
 80084d4:	81a3      	strh	r3, [r4, #12]
 80084d6:	6923      	ldr	r3, [r4, #16]
 80084d8:	b94b      	cbnz	r3, 80084ee <__swsetup_r+0x7a>
 80084da:	89a3      	ldrh	r3, [r4, #12]
 80084dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80084e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084e4:	d003      	beq.n	80084ee <__swsetup_r+0x7a>
 80084e6:	4621      	mov	r1, r4
 80084e8:	4628      	mov	r0, r5
 80084ea:	f000 f8e1 	bl	80086b0 <__smakebuf_r>
 80084ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084f2:	f013 0201 	ands.w	r2, r3, #1
 80084f6:	d00a      	beq.n	800850e <__swsetup_r+0x9a>
 80084f8:	2200      	movs	r2, #0
 80084fa:	60a2      	str	r2, [r4, #8]
 80084fc:	6962      	ldr	r2, [r4, #20]
 80084fe:	4252      	negs	r2, r2
 8008500:	61a2      	str	r2, [r4, #24]
 8008502:	6922      	ldr	r2, [r4, #16]
 8008504:	b942      	cbnz	r2, 8008518 <__swsetup_r+0xa4>
 8008506:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800850a:	d1c5      	bne.n	8008498 <__swsetup_r+0x24>
 800850c:	bd38      	pop	{r3, r4, r5, pc}
 800850e:	0799      	lsls	r1, r3, #30
 8008510:	bf58      	it	pl
 8008512:	6962      	ldrpl	r2, [r4, #20]
 8008514:	60a2      	str	r2, [r4, #8]
 8008516:	e7f4      	b.n	8008502 <__swsetup_r+0x8e>
 8008518:	2000      	movs	r0, #0
 800851a:	e7f7      	b.n	800850c <__swsetup_r+0x98>
 800851c:	20000018 	.word	0x20000018

08008520 <_sbrk_r>:
 8008520:	b538      	push	{r3, r4, r5, lr}
 8008522:	4d06      	ldr	r5, [pc, #24]	@ (800853c <_sbrk_r+0x1c>)
 8008524:	2300      	movs	r3, #0
 8008526:	4604      	mov	r4, r0
 8008528:	4608      	mov	r0, r1
 800852a:	602b      	str	r3, [r5, #0]
 800852c:	f7fa f834 	bl	8002598 <_sbrk>
 8008530:	1c43      	adds	r3, r0, #1
 8008532:	d102      	bne.n	800853a <_sbrk_r+0x1a>
 8008534:	682b      	ldr	r3, [r5, #0]
 8008536:	b103      	cbz	r3, 800853a <_sbrk_r+0x1a>
 8008538:	6023      	str	r3, [r4, #0]
 800853a:	bd38      	pop	{r3, r4, r5, pc}
 800853c:	20000888 	.word	0x20000888

08008540 <__assert_func>:
 8008540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008542:	4614      	mov	r4, r2
 8008544:	461a      	mov	r2, r3
 8008546:	4b09      	ldr	r3, [pc, #36]	@ (800856c <__assert_func+0x2c>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4605      	mov	r5, r0
 800854c:	68d8      	ldr	r0, [r3, #12]
 800854e:	b954      	cbnz	r4, 8008566 <__assert_func+0x26>
 8008550:	4b07      	ldr	r3, [pc, #28]	@ (8008570 <__assert_func+0x30>)
 8008552:	461c      	mov	r4, r3
 8008554:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008558:	9100      	str	r1, [sp, #0]
 800855a:	462b      	mov	r3, r5
 800855c:	4905      	ldr	r1, [pc, #20]	@ (8008574 <__assert_func+0x34>)
 800855e:	f000 f86f 	bl	8008640 <fiprintf>
 8008562:	f000 f903 	bl	800876c <abort>
 8008566:	4b04      	ldr	r3, [pc, #16]	@ (8008578 <__assert_func+0x38>)
 8008568:	e7f4      	b.n	8008554 <__assert_func+0x14>
 800856a:	bf00      	nop
 800856c:	20000018 	.word	0x20000018
 8008570:	0800a6ee 	.word	0x0800a6ee
 8008574:	0800a6c0 	.word	0x0800a6c0
 8008578:	0800a6b3 	.word	0x0800a6b3

0800857c <_calloc_r>:
 800857c:	b570      	push	{r4, r5, r6, lr}
 800857e:	fba1 5402 	umull	r5, r4, r1, r2
 8008582:	b93c      	cbnz	r4, 8008594 <_calloc_r+0x18>
 8008584:	4629      	mov	r1, r5
 8008586:	f7fe ffe3 	bl	8007550 <_malloc_r>
 800858a:	4606      	mov	r6, r0
 800858c:	b928      	cbnz	r0, 800859a <_calloc_r+0x1e>
 800858e:	2600      	movs	r6, #0
 8008590:	4630      	mov	r0, r6
 8008592:	bd70      	pop	{r4, r5, r6, pc}
 8008594:	220c      	movs	r2, #12
 8008596:	6002      	str	r2, [r0, #0]
 8008598:	e7f9      	b.n	800858e <_calloc_r+0x12>
 800859a:	462a      	mov	r2, r5
 800859c:	4621      	mov	r1, r4
 800859e:	f7fe f886 	bl	80066ae <memset>
 80085a2:	e7f5      	b.n	8008590 <_calloc_r+0x14>

080085a4 <__ascii_mbtowc>:
 80085a4:	b082      	sub	sp, #8
 80085a6:	b901      	cbnz	r1, 80085aa <__ascii_mbtowc+0x6>
 80085a8:	a901      	add	r1, sp, #4
 80085aa:	b142      	cbz	r2, 80085be <__ascii_mbtowc+0x1a>
 80085ac:	b14b      	cbz	r3, 80085c2 <__ascii_mbtowc+0x1e>
 80085ae:	7813      	ldrb	r3, [r2, #0]
 80085b0:	600b      	str	r3, [r1, #0]
 80085b2:	7812      	ldrb	r2, [r2, #0]
 80085b4:	1e10      	subs	r0, r2, #0
 80085b6:	bf18      	it	ne
 80085b8:	2001      	movne	r0, #1
 80085ba:	b002      	add	sp, #8
 80085bc:	4770      	bx	lr
 80085be:	4610      	mov	r0, r2
 80085c0:	e7fb      	b.n	80085ba <__ascii_mbtowc+0x16>
 80085c2:	f06f 0001 	mvn.w	r0, #1
 80085c6:	e7f8      	b.n	80085ba <__ascii_mbtowc+0x16>

080085c8 <_realloc_r>:
 80085c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085cc:	4680      	mov	r8, r0
 80085ce:	4615      	mov	r5, r2
 80085d0:	460c      	mov	r4, r1
 80085d2:	b921      	cbnz	r1, 80085de <_realloc_r+0x16>
 80085d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085d8:	4611      	mov	r1, r2
 80085da:	f7fe bfb9 	b.w	8007550 <_malloc_r>
 80085de:	b92a      	cbnz	r2, 80085ec <_realloc_r+0x24>
 80085e0:	f7fe ff42 	bl	8007468 <_free_r>
 80085e4:	2400      	movs	r4, #0
 80085e6:	4620      	mov	r0, r4
 80085e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085ec:	f000 f8c5 	bl	800877a <_malloc_usable_size_r>
 80085f0:	4285      	cmp	r5, r0
 80085f2:	4606      	mov	r6, r0
 80085f4:	d802      	bhi.n	80085fc <_realloc_r+0x34>
 80085f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80085fa:	d8f4      	bhi.n	80085e6 <_realloc_r+0x1e>
 80085fc:	4629      	mov	r1, r5
 80085fe:	4640      	mov	r0, r8
 8008600:	f7fe ffa6 	bl	8007550 <_malloc_r>
 8008604:	4607      	mov	r7, r0
 8008606:	2800      	cmp	r0, #0
 8008608:	d0ec      	beq.n	80085e4 <_realloc_r+0x1c>
 800860a:	42b5      	cmp	r5, r6
 800860c:	462a      	mov	r2, r5
 800860e:	4621      	mov	r1, r4
 8008610:	bf28      	it	cs
 8008612:	4632      	movcs	r2, r6
 8008614:	f7fe f8cb 	bl	80067ae <memcpy>
 8008618:	4621      	mov	r1, r4
 800861a:	4640      	mov	r0, r8
 800861c:	f7fe ff24 	bl	8007468 <_free_r>
 8008620:	463c      	mov	r4, r7
 8008622:	e7e0      	b.n	80085e6 <_realloc_r+0x1e>

08008624 <__ascii_wctomb>:
 8008624:	4603      	mov	r3, r0
 8008626:	4608      	mov	r0, r1
 8008628:	b141      	cbz	r1, 800863c <__ascii_wctomb+0x18>
 800862a:	2aff      	cmp	r2, #255	@ 0xff
 800862c:	d904      	bls.n	8008638 <__ascii_wctomb+0x14>
 800862e:	228a      	movs	r2, #138	@ 0x8a
 8008630:	601a      	str	r2, [r3, #0]
 8008632:	f04f 30ff 	mov.w	r0, #4294967295
 8008636:	4770      	bx	lr
 8008638:	700a      	strb	r2, [r1, #0]
 800863a:	2001      	movs	r0, #1
 800863c:	4770      	bx	lr
	...

08008640 <fiprintf>:
 8008640:	b40e      	push	{r1, r2, r3}
 8008642:	b503      	push	{r0, r1, lr}
 8008644:	4601      	mov	r1, r0
 8008646:	ab03      	add	r3, sp, #12
 8008648:	4805      	ldr	r0, [pc, #20]	@ (8008660 <fiprintf+0x20>)
 800864a:	f853 2b04 	ldr.w	r2, [r3], #4
 800864e:	6800      	ldr	r0, [r0, #0]
 8008650:	9301      	str	r3, [sp, #4]
 8008652:	f7ff fd0d 	bl	8008070 <_vfiprintf_r>
 8008656:	b002      	add	sp, #8
 8008658:	f85d eb04 	ldr.w	lr, [sp], #4
 800865c:	b003      	add	sp, #12
 800865e:	4770      	bx	lr
 8008660:	20000018 	.word	0x20000018

08008664 <__swhatbuf_r>:
 8008664:	b570      	push	{r4, r5, r6, lr}
 8008666:	460c      	mov	r4, r1
 8008668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800866c:	2900      	cmp	r1, #0
 800866e:	b096      	sub	sp, #88	@ 0x58
 8008670:	4615      	mov	r5, r2
 8008672:	461e      	mov	r6, r3
 8008674:	da0d      	bge.n	8008692 <__swhatbuf_r+0x2e>
 8008676:	89a3      	ldrh	r3, [r4, #12]
 8008678:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800867c:	f04f 0100 	mov.w	r1, #0
 8008680:	bf14      	ite	ne
 8008682:	2340      	movne	r3, #64	@ 0x40
 8008684:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008688:	2000      	movs	r0, #0
 800868a:	6031      	str	r1, [r6, #0]
 800868c:	602b      	str	r3, [r5, #0]
 800868e:	b016      	add	sp, #88	@ 0x58
 8008690:	bd70      	pop	{r4, r5, r6, pc}
 8008692:	466a      	mov	r2, sp
 8008694:	f000 f848 	bl	8008728 <_fstat_r>
 8008698:	2800      	cmp	r0, #0
 800869a:	dbec      	blt.n	8008676 <__swhatbuf_r+0x12>
 800869c:	9901      	ldr	r1, [sp, #4]
 800869e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80086a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80086a6:	4259      	negs	r1, r3
 80086a8:	4159      	adcs	r1, r3
 80086aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80086ae:	e7eb      	b.n	8008688 <__swhatbuf_r+0x24>

080086b0 <__smakebuf_r>:
 80086b0:	898b      	ldrh	r3, [r1, #12]
 80086b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086b4:	079d      	lsls	r5, r3, #30
 80086b6:	4606      	mov	r6, r0
 80086b8:	460c      	mov	r4, r1
 80086ba:	d507      	bpl.n	80086cc <__smakebuf_r+0x1c>
 80086bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80086c0:	6023      	str	r3, [r4, #0]
 80086c2:	6123      	str	r3, [r4, #16]
 80086c4:	2301      	movs	r3, #1
 80086c6:	6163      	str	r3, [r4, #20]
 80086c8:	b003      	add	sp, #12
 80086ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086cc:	ab01      	add	r3, sp, #4
 80086ce:	466a      	mov	r2, sp
 80086d0:	f7ff ffc8 	bl	8008664 <__swhatbuf_r>
 80086d4:	9f00      	ldr	r7, [sp, #0]
 80086d6:	4605      	mov	r5, r0
 80086d8:	4639      	mov	r1, r7
 80086da:	4630      	mov	r0, r6
 80086dc:	f7fe ff38 	bl	8007550 <_malloc_r>
 80086e0:	b948      	cbnz	r0, 80086f6 <__smakebuf_r+0x46>
 80086e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086e6:	059a      	lsls	r2, r3, #22
 80086e8:	d4ee      	bmi.n	80086c8 <__smakebuf_r+0x18>
 80086ea:	f023 0303 	bic.w	r3, r3, #3
 80086ee:	f043 0302 	orr.w	r3, r3, #2
 80086f2:	81a3      	strh	r3, [r4, #12]
 80086f4:	e7e2      	b.n	80086bc <__smakebuf_r+0xc>
 80086f6:	89a3      	ldrh	r3, [r4, #12]
 80086f8:	6020      	str	r0, [r4, #0]
 80086fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086fe:	81a3      	strh	r3, [r4, #12]
 8008700:	9b01      	ldr	r3, [sp, #4]
 8008702:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008706:	b15b      	cbz	r3, 8008720 <__smakebuf_r+0x70>
 8008708:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800870c:	4630      	mov	r0, r6
 800870e:	f000 f81d 	bl	800874c <_isatty_r>
 8008712:	b128      	cbz	r0, 8008720 <__smakebuf_r+0x70>
 8008714:	89a3      	ldrh	r3, [r4, #12]
 8008716:	f023 0303 	bic.w	r3, r3, #3
 800871a:	f043 0301 	orr.w	r3, r3, #1
 800871e:	81a3      	strh	r3, [r4, #12]
 8008720:	89a3      	ldrh	r3, [r4, #12]
 8008722:	431d      	orrs	r5, r3
 8008724:	81a5      	strh	r5, [r4, #12]
 8008726:	e7cf      	b.n	80086c8 <__smakebuf_r+0x18>

08008728 <_fstat_r>:
 8008728:	b538      	push	{r3, r4, r5, lr}
 800872a:	4d07      	ldr	r5, [pc, #28]	@ (8008748 <_fstat_r+0x20>)
 800872c:	2300      	movs	r3, #0
 800872e:	4604      	mov	r4, r0
 8008730:	4608      	mov	r0, r1
 8008732:	4611      	mov	r1, r2
 8008734:	602b      	str	r3, [r5, #0]
 8008736:	f7f9 ff07 	bl	8002548 <_fstat>
 800873a:	1c43      	adds	r3, r0, #1
 800873c:	d102      	bne.n	8008744 <_fstat_r+0x1c>
 800873e:	682b      	ldr	r3, [r5, #0]
 8008740:	b103      	cbz	r3, 8008744 <_fstat_r+0x1c>
 8008742:	6023      	str	r3, [r4, #0]
 8008744:	bd38      	pop	{r3, r4, r5, pc}
 8008746:	bf00      	nop
 8008748:	20000888 	.word	0x20000888

0800874c <_isatty_r>:
 800874c:	b538      	push	{r3, r4, r5, lr}
 800874e:	4d06      	ldr	r5, [pc, #24]	@ (8008768 <_isatty_r+0x1c>)
 8008750:	2300      	movs	r3, #0
 8008752:	4604      	mov	r4, r0
 8008754:	4608      	mov	r0, r1
 8008756:	602b      	str	r3, [r5, #0]
 8008758:	f7f9 ff06 	bl	8002568 <_isatty>
 800875c:	1c43      	adds	r3, r0, #1
 800875e:	d102      	bne.n	8008766 <_isatty_r+0x1a>
 8008760:	682b      	ldr	r3, [r5, #0]
 8008762:	b103      	cbz	r3, 8008766 <_isatty_r+0x1a>
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	bd38      	pop	{r3, r4, r5, pc}
 8008768:	20000888 	.word	0x20000888

0800876c <abort>:
 800876c:	b508      	push	{r3, lr}
 800876e:	2006      	movs	r0, #6
 8008770:	f000 f834 	bl	80087dc <raise>
 8008774:	2001      	movs	r0, #1
 8008776:	f7f9 fe97 	bl	80024a8 <_exit>

0800877a <_malloc_usable_size_r>:
 800877a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800877e:	1f18      	subs	r0, r3, #4
 8008780:	2b00      	cmp	r3, #0
 8008782:	bfbc      	itt	lt
 8008784:	580b      	ldrlt	r3, [r1, r0]
 8008786:	18c0      	addlt	r0, r0, r3
 8008788:	4770      	bx	lr

0800878a <_raise_r>:
 800878a:	291f      	cmp	r1, #31
 800878c:	b538      	push	{r3, r4, r5, lr}
 800878e:	4605      	mov	r5, r0
 8008790:	460c      	mov	r4, r1
 8008792:	d904      	bls.n	800879e <_raise_r+0x14>
 8008794:	2316      	movs	r3, #22
 8008796:	6003      	str	r3, [r0, #0]
 8008798:	f04f 30ff 	mov.w	r0, #4294967295
 800879c:	bd38      	pop	{r3, r4, r5, pc}
 800879e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80087a0:	b112      	cbz	r2, 80087a8 <_raise_r+0x1e>
 80087a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087a6:	b94b      	cbnz	r3, 80087bc <_raise_r+0x32>
 80087a8:	4628      	mov	r0, r5
 80087aa:	f000 f831 	bl	8008810 <_getpid_r>
 80087ae:	4622      	mov	r2, r4
 80087b0:	4601      	mov	r1, r0
 80087b2:	4628      	mov	r0, r5
 80087b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087b8:	f000 b818 	b.w	80087ec <_kill_r>
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d00a      	beq.n	80087d6 <_raise_r+0x4c>
 80087c0:	1c59      	adds	r1, r3, #1
 80087c2:	d103      	bne.n	80087cc <_raise_r+0x42>
 80087c4:	2316      	movs	r3, #22
 80087c6:	6003      	str	r3, [r0, #0]
 80087c8:	2001      	movs	r0, #1
 80087ca:	e7e7      	b.n	800879c <_raise_r+0x12>
 80087cc:	2100      	movs	r1, #0
 80087ce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80087d2:	4620      	mov	r0, r4
 80087d4:	4798      	blx	r3
 80087d6:	2000      	movs	r0, #0
 80087d8:	e7e0      	b.n	800879c <_raise_r+0x12>
	...

080087dc <raise>:
 80087dc:	4b02      	ldr	r3, [pc, #8]	@ (80087e8 <raise+0xc>)
 80087de:	4601      	mov	r1, r0
 80087e0:	6818      	ldr	r0, [r3, #0]
 80087e2:	f7ff bfd2 	b.w	800878a <_raise_r>
 80087e6:	bf00      	nop
 80087e8:	20000018 	.word	0x20000018

080087ec <_kill_r>:
 80087ec:	b538      	push	{r3, r4, r5, lr}
 80087ee:	4d07      	ldr	r5, [pc, #28]	@ (800880c <_kill_r+0x20>)
 80087f0:	2300      	movs	r3, #0
 80087f2:	4604      	mov	r4, r0
 80087f4:	4608      	mov	r0, r1
 80087f6:	4611      	mov	r1, r2
 80087f8:	602b      	str	r3, [r5, #0]
 80087fa:	f7f9 fe45 	bl	8002488 <_kill>
 80087fe:	1c43      	adds	r3, r0, #1
 8008800:	d102      	bne.n	8008808 <_kill_r+0x1c>
 8008802:	682b      	ldr	r3, [r5, #0]
 8008804:	b103      	cbz	r3, 8008808 <_kill_r+0x1c>
 8008806:	6023      	str	r3, [r4, #0]
 8008808:	bd38      	pop	{r3, r4, r5, pc}
 800880a:	bf00      	nop
 800880c:	20000888 	.word	0x20000888

08008810 <_getpid_r>:
 8008810:	f7f9 be32 	b.w	8002478 <_getpid>
 8008814:	0000      	movs	r0, r0
	...

08008818 <log10>:
 8008818:	b538      	push	{r3, r4, r5, lr}
 800881a:	ed2d 8b02 	vpush	{d8}
 800881e:	ec55 4b10 	vmov	r4, r5, d0
 8008822:	f000 f911 	bl	8008a48 <__ieee754_log10>
 8008826:	4622      	mov	r2, r4
 8008828:	462b      	mov	r3, r5
 800882a:	4620      	mov	r0, r4
 800882c:	4629      	mov	r1, r5
 800882e:	eeb0 8a40 	vmov.f32	s16, s0
 8008832:	eef0 8a60 	vmov.f32	s17, s1
 8008836:	f7f8 f979 	bl	8000b2c <__aeabi_dcmpun>
 800883a:	b998      	cbnz	r0, 8008864 <log10+0x4c>
 800883c:	2200      	movs	r2, #0
 800883e:	2300      	movs	r3, #0
 8008840:	4620      	mov	r0, r4
 8008842:	4629      	mov	r1, r5
 8008844:	f7f8 f954 	bl	8000af0 <__aeabi_dcmple>
 8008848:	b160      	cbz	r0, 8008864 <log10+0x4c>
 800884a:	2200      	movs	r2, #0
 800884c:	2300      	movs	r3, #0
 800884e:	4620      	mov	r0, r4
 8008850:	4629      	mov	r1, r5
 8008852:	f7f8 f939 	bl	8000ac8 <__aeabi_dcmpeq>
 8008856:	b160      	cbz	r0, 8008872 <log10+0x5a>
 8008858:	f7fd ff7c 	bl	8006754 <__errno>
 800885c:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8008888 <log10+0x70>
 8008860:	2322      	movs	r3, #34	@ 0x22
 8008862:	6003      	str	r3, [r0, #0]
 8008864:	eeb0 0a48 	vmov.f32	s0, s16
 8008868:	eef0 0a68 	vmov.f32	s1, s17
 800886c:	ecbd 8b02 	vpop	{d8}
 8008870:	bd38      	pop	{r3, r4, r5, pc}
 8008872:	f7fd ff6f 	bl	8006754 <__errno>
 8008876:	ecbd 8b02 	vpop	{d8}
 800887a:	2321      	movs	r3, #33	@ 0x21
 800887c:	6003      	str	r3, [r0, #0]
 800887e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008882:	4803      	ldr	r0, [pc, #12]	@ (8008890 <log10+0x78>)
 8008884:	f000 b884 	b.w	8008990 <nan>
 8008888:	00000000 	.word	0x00000000
 800888c:	fff00000 	.word	0xfff00000
 8008890:	0800a6ee 	.word	0x0800a6ee

08008894 <pow>:
 8008894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008896:	ed2d 8b02 	vpush	{d8}
 800889a:	eeb0 8a40 	vmov.f32	s16, s0
 800889e:	eef0 8a60 	vmov.f32	s17, s1
 80088a2:	ec55 4b11 	vmov	r4, r5, d1
 80088a6:	f000 f95b 	bl	8008b60 <__ieee754_pow>
 80088aa:	4622      	mov	r2, r4
 80088ac:	462b      	mov	r3, r5
 80088ae:	4620      	mov	r0, r4
 80088b0:	4629      	mov	r1, r5
 80088b2:	ec57 6b10 	vmov	r6, r7, d0
 80088b6:	f7f8 f939 	bl	8000b2c <__aeabi_dcmpun>
 80088ba:	2800      	cmp	r0, #0
 80088bc:	d13b      	bne.n	8008936 <pow+0xa2>
 80088be:	ec51 0b18 	vmov	r0, r1, d8
 80088c2:	2200      	movs	r2, #0
 80088c4:	2300      	movs	r3, #0
 80088c6:	f7f8 f8ff 	bl	8000ac8 <__aeabi_dcmpeq>
 80088ca:	b1b8      	cbz	r0, 80088fc <pow+0x68>
 80088cc:	2200      	movs	r2, #0
 80088ce:	2300      	movs	r3, #0
 80088d0:	4620      	mov	r0, r4
 80088d2:	4629      	mov	r1, r5
 80088d4:	f7f8 f8f8 	bl	8000ac8 <__aeabi_dcmpeq>
 80088d8:	2800      	cmp	r0, #0
 80088da:	d146      	bne.n	800896a <pow+0xd6>
 80088dc:	ec45 4b10 	vmov	d0, r4, r5
 80088e0:	f000 f848 	bl	8008974 <finite>
 80088e4:	b338      	cbz	r0, 8008936 <pow+0xa2>
 80088e6:	2200      	movs	r2, #0
 80088e8:	2300      	movs	r3, #0
 80088ea:	4620      	mov	r0, r4
 80088ec:	4629      	mov	r1, r5
 80088ee:	f7f8 f8f5 	bl	8000adc <__aeabi_dcmplt>
 80088f2:	b300      	cbz	r0, 8008936 <pow+0xa2>
 80088f4:	f7fd ff2e 	bl	8006754 <__errno>
 80088f8:	2322      	movs	r3, #34	@ 0x22
 80088fa:	e01b      	b.n	8008934 <pow+0xa0>
 80088fc:	ec47 6b10 	vmov	d0, r6, r7
 8008900:	f000 f838 	bl	8008974 <finite>
 8008904:	b9e0      	cbnz	r0, 8008940 <pow+0xac>
 8008906:	eeb0 0a48 	vmov.f32	s0, s16
 800890a:	eef0 0a68 	vmov.f32	s1, s17
 800890e:	f000 f831 	bl	8008974 <finite>
 8008912:	b1a8      	cbz	r0, 8008940 <pow+0xac>
 8008914:	ec45 4b10 	vmov	d0, r4, r5
 8008918:	f000 f82c 	bl	8008974 <finite>
 800891c:	b180      	cbz	r0, 8008940 <pow+0xac>
 800891e:	4632      	mov	r2, r6
 8008920:	463b      	mov	r3, r7
 8008922:	4630      	mov	r0, r6
 8008924:	4639      	mov	r1, r7
 8008926:	f7f8 f901 	bl	8000b2c <__aeabi_dcmpun>
 800892a:	2800      	cmp	r0, #0
 800892c:	d0e2      	beq.n	80088f4 <pow+0x60>
 800892e:	f7fd ff11 	bl	8006754 <__errno>
 8008932:	2321      	movs	r3, #33	@ 0x21
 8008934:	6003      	str	r3, [r0, #0]
 8008936:	ecbd 8b02 	vpop	{d8}
 800893a:	ec47 6b10 	vmov	d0, r6, r7
 800893e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008940:	2200      	movs	r2, #0
 8008942:	2300      	movs	r3, #0
 8008944:	4630      	mov	r0, r6
 8008946:	4639      	mov	r1, r7
 8008948:	f7f8 f8be 	bl	8000ac8 <__aeabi_dcmpeq>
 800894c:	2800      	cmp	r0, #0
 800894e:	d0f2      	beq.n	8008936 <pow+0xa2>
 8008950:	eeb0 0a48 	vmov.f32	s0, s16
 8008954:	eef0 0a68 	vmov.f32	s1, s17
 8008958:	f000 f80c 	bl	8008974 <finite>
 800895c:	2800      	cmp	r0, #0
 800895e:	d0ea      	beq.n	8008936 <pow+0xa2>
 8008960:	ec45 4b10 	vmov	d0, r4, r5
 8008964:	f000 f806 	bl	8008974 <finite>
 8008968:	e7c3      	b.n	80088f2 <pow+0x5e>
 800896a:	4f01      	ldr	r7, [pc, #4]	@ (8008970 <pow+0xdc>)
 800896c:	2600      	movs	r6, #0
 800896e:	e7e2      	b.n	8008936 <pow+0xa2>
 8008970:	3ff00000 	.word	0x3ff00000

08008974 <finite>:
 8008974:	b082      	sub	sp, #8
 8008976:	ed8d 0b00 	vstr	d0, [sp]
 800897a:	9801      	ldr	r0, [sp, #4]
 800897c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8008980:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8008984:	0fc0      	lsrs	r0, r0, #31
 8008986:	b002      	add	sp, #8
 8008988:	4770      	bx	lr
 800898a:	0000      	movs	r0, r0
 800898c:	0000      	movs	r0, r0
	...

08008990 <nan>:
 8008990:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008998 <nan+0x8>
 8008994:	4770      	bx	lr
 8008996:	bf00      	nop
 8008998:	00000000 	.word	0x00000000
 800899c:	7ff80000 	.word	0x7ff80000

080089a0 <fmax>:
 80089a0:	b508      	push	{r3, lr}
 80089a2:	ed2d 8b04 	vpush	{d8-d9}
 80089a6:	eeb0 8a40 	vmov.f32	s16, s0
 80089aa:	eef0 8a60 	vmov.f32	s17, s1
 80089ae:	eeb0 9a41 	vmov.f32	s18, s2
 80089b2:	eef0 9a61 	vmov.f32	s19, s3
 80089b6:	f000 f81d 	bl	80089f4 <__fpclassifyd>
 80089ba:	b950      	cbnz	r0, 80089d2 <fmax+0x32>
 80089bc:	eeb0 8a49 	vmov.f32	s16, s18
 80089c0:	eef0 8a69 	vmov.f32	s17, s19
 80089c4:	eeb0 0a48 	vmov.f32	s0, s16
 80089c8:	eef0 0a68 	vmov.f32	s1, s17
 80089cc:	ecbd 8b04 	vpop	{d8-d9}
 80089d0:	bd08      	pop	{r3, pc}
 80089d2:	eeb0 0a49 	vmov.f32	s0, s18
 80089d6:	eef0 0a69 	vmov.f32	s1, s19
 80089da:	f000 f80b 	bl	80089f4 <__fpclassifyd>
 80089de:	2800      	cmp	r0, #0
 80089e0:	d0f0      	beq.n	80089c4 <fmax+0x24>
 80089e2:	ec53 2b19 	vmov	r2, r3, d9
 80089e6:	ec51 0b18 	vmov	r0, r1, d8
 80089ea:	f7f8 f895 	bl	8000b18 <__aeabi_dcmpgt>
 80089ee:	2800      	cmp	r0, #0
 80089f0:	d0e4      	beq.n	80089bc <fmax+0x1c>
 80089f2:	e7e7      	b.n	80089c4 <fmax+0x24>

080089f4 <__fpclassifyd>:
 80089f4:	ec51 0b10 	vmov	r0, r1, d0
 80089f8:	b510      	push	{r4, lr}
 80089fa:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 80089fe:	460b      	mov	r3, r1
 8008a00:	d019      	beq.n	8008a36 <__fpclassifyd+0x42>
 8008a02:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 8008a06:	490e      	ldr	r1, [pc, #56]	@ (8008a40 <__fpclassifyd+0x4c>)
 8008a08:	428a      	cmp	r2, r1
 8008a0a:	d90e      	bls.n	8008a2a <__fpclassifyd+0x36>
 8008a0c:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 8008a10:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 8008a14:	428a      	cmp	r2, r1
 8008a16:	d908      	bls.n	8008a2a <__fpclassifyd+0x36>
 8008a18:	4a0a      	ldr	r2, [pc, #40]	@ (8008a44 <__fpclassifyd+0x50>)
 8008a1a:	4213      	tst	r3, r2
 8008a1c:	d007      	beq.n	8008a2e <__fpclassifyd+0x3a>
 8008a1e:	4294      	cmp	r4, r2
 8008a20:	d107      	bne.n	8008a32 <__fpclassifyd+0x3e>
 8008a22:	fab0 f080 	clz	r0, r0
 8008a26:	0940      	lsrs	r0, r0, #5
 8008a28:	bd10      	pop	{r4, pc}
 8008a2a:	2004      	movs	r0, #4
 8008a2c:	e7fc      	b.n	8008a28 <__fpclassifyd+0x34>
 8008a2e:	2003      	movs	r0, #3
 8008a30:	e7fa      	b.n	8008a28 <__fpclassifyd+0x34>
 8008a32:	2000      	movs	r0, #0
 8008a34:	e7f8      	b.n	8008a28 <__fpclassifyd+0x34>
 8008a36:	2800      	cmp	r0, #0
 8008a38:	d1ee      	bne.n	8008a18 <__fpclassifyd+0x24>
 8008a3a:	2002      	movs	r0, #2
 8008a3c:	e7f4      	b.n	8008a28 <__fpclassifyd+0x34>
 8008a3e:	bf00      	nop
 8008a40:	7fdfffff 	.word	0x7fdfffff
 8008a44:	7ff00000 	.word	0x7ff00000

08008a48 <__ieee754_log10>:
 8008a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a4c:	ec55 4b10 	vmov	r4, r5, d0
 8008a50:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8008a54:	ed2d 8b02 	vpush	{d8}
 8008a58:	462b      	mov	r3, r5
 8008a5a:	da2e      	bge.n	8008aba <__ieee754_log10+0x72>
 8008a5c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8008a60:	4322      	orrs	r2, r4
 8008a62:	d10b      	bne.n	8008a7c <__ieee754_log10+0x34>
 8008a64:	493a      	ldr	r1, [pc, #232]	@ (8008b50 <__ieee754_log10+0x108>)
 8008a66:	2200      	movs	r2, #0
 8008a68:	2300      	movs	r3, #0
 8008a6a:	2000      	movs	r0, #0
 8008a6c:	f7f7 feee 	bl	800084c <__aeabi_ddiv>
 8008a70:	ecbd 8b02 	vpop	{d8}
 8008a74:	ec41 0b10 	vmov	d0, r0, r1
 8008a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a7c:	2d00      	cmp	r5, #0
 8008a7e:	da07      	bge.n	8008a90 <__ieee754_log10+0x48>
 8008a80:	4622      	mov	r2, r4
 8008a82:	4620      	mov	r0, r4
 8008a84:	4629      	mov	r1, r5
 8008a86:	f7f7 fbff 	bl	8000288 <__aeabi_dsub>
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	e7ed      	b.n	8008a6c <__ieee754_log10+0x24>
 8008a90:	4b30      	ldr	r3, [pc, #192]	@ (8008b54 <__ieee754_log10+0x10c>)
 8008a92:	2200      	movs	r2, #0
 8008a94:	4620      	mov	r0, r4
 8008a96:	4629      	mov	r1, r5
 8008a98:	f7f7 fdae 	bl	80005f8 <__aeabi_dmul>
 8008a9c:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 8008aa0:	4604      	mov	r4, r0
 8008aa2:	460d      	mov	r5, r1
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	492c      	ldr	r1, [pc, #176]	@ (8008b58 <__ieee754_log10+0x110>)
 8008aa8:	428b      	cmp	r3, r1
 8008aaa:	dd08      	ble.n	8008abe <__ieee754_log10+0x76>
 8008aac:	4622      	mov	r2, r4
 8008aae:	462b      	mov	r3, r5
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	4629      	mov	r1, r5
 8008ab4:	f7f7 fbea 	bl	800028c <__adddf3>
 8008ab8:	e7da      	b.n	8008a70 <__ieee754_log10+0x28>
 8008aba:	2200      	movs	r2, #0
 8008abc:	e7f3      	b.n	8008aa6 <__ieee754_log10+0x5e>
 8008abe:	1518      	asrs	r0, r3, #20
 8008ac0:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 8008ac4:	4410      	add	r0, r2
 8008ac6:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8008aca:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8008ace:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8008ad2:	f7f7 fd27 	bl	8000524 <__aeabi_i2d>
 8008ad6:	f5c9 737f 	rsb	r3, r9, #1020	@ 0x3fc
 8008ada:	3303      	adds	r3, #3
 8008adc:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8008ae0:	a315      	add	r3, pc, #84	@ (adr r3, 8008b38 <__ieee754_log10+0xf0>)
 8008ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae6:	ec45 4b18 	vmov	d8, r4, r5
 8008aea:	4606      	mov	r6, r0
 8008aec:	460f      	mov	r7, r1
 8008aee:	f7f7 fd83 	bl	80005f8 <__aeabi_dmul>
 8008af2:	eeb0 0a48 	vmov.f32	s0, s16
 8008af6:	eef0 0a68 	vmov.f32	s1, s17
 8008afa:	4604      	mov	r4, r0
 8008afc:	460d      	mov	r5, r1
 8008afe:	f000 ff13 	bl	8009928 <__ieee754_log>
 8008b02:	a30f      	add	r3, pc, #60	@ (adr r3, 8008b40 <__ieee754_log10+0xf8>)
 8008b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b08:	ec51 0b10 	vmov	r0, r1, d0
 8008b0c:	f7f7 fd74 	bl	80005f8 <__aeabi_dmul>
 8008b10:	4622      	mov	r2, r4
 8008b12:	462b      	mov	r3, r5
 8008b14:	f7f7 fbba 	bl	800028c <__adddf3>
 8008b18:	a30b      	add	r3, pc, #44	@ (adr r3, 8008b48 <__ieee754_log10+0x100>)
 8008b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1e:	4604      	mov	r4, r0
 8008b20:	460d      	mov	r5, r1
 8008b22:	4630      	mov	r0, r6
 8008b24:	4639      	mov	r1, r7
 8008b26:	f7f7 fd67 	bl	80005f8 <__aeabi_dmul>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	4620      	mov	r0, r4
 8008b30:	4629      	mov	r1, r5
 8008b32:	e7bf      	b.n	8008ab4 <__ieee754_log10+0x6c>
 8008b34:	f3af 8000 	nop.w
 8008b38:	11f12b36 	.word	0x11f12b36
 8008b3c:	3d59fef3 	.word	0x3d59fef3
 8008b40:	1526e50e 	.word	0x1526e50e
 8008b44:	3fdbcb7b 	.word	0x3fdbcb7b
 8008b48:	509f6000 	.word	0x509f6000
 8008b4c:	3fd34413 	.word	0x3fd34413
 8008b50:	c3500000 	.word	0xc3500000
 8008b54:	43500000 	.word	0x43500000
 8008b58:	7fefffff 	.word	0x7fefffff
 8008b5c:	00000000 	.word	0x00000000

08008b60 <__ieee754_pow>:
 8008b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b64:	b091      	sub	sp, #68	@ 0x44
 8008b66:	ed8d 1b00 	vstr	d1, [sp]
 8008b6a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8008b6e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8008b72:	ea5a 0001 	orrs.w	r0, sl, r1
 8008b76:	ec57 6b10 	vmov	r6, r7, d0
 8008b7a:	d113      	bne.n	8008ba4 <__ieee754_pow+0x44>
 8008b7c:	19b3      	adds	r3, r6, r6
 8008b7e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8008b82:	4152      	adcs	r2, r2
 8008b84:	4298      	cmp	r0, r3
 8008b86:	4b98      	ldr	r3, [pc, #608]	@ (8008de8 <__ieee754_pow+0x288>)
 8008b88:	4193      	sbcs	r3, r2
 8008b8a:	f080 84ea 	bcs.w	8009562 <__ieee754_pow+0xa02>
 8008b8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b92:	4630      	mov	r0, r6
 8008b94:	4639      	mov	r1, r7
 8008b96:	f7f7 fb79 	bl	800028c <__adddf3>
 8008b9a:	ec41 0b10 	vmov	d0, r0, r1
 8008b9e:	b011      	add	sp, #68	@ 0x44
 8008ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba4:	4a91      	ldr	r2, [pc, #580]	@ (8008dec <__ieee754_pow+0x28c>)
 8008ba6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008baa:	4590      	cmp	r8, r2
 8008bac:	463d      	mov	r5, r7
 8008bae:	4633      	mov	r3, r6
 8008bb0:	d806      	bhi.n	8008bc0 <__ieee754_pow+0x60>
 8008bb2:	d101      	bne.n	8008bb8 <__ieee754_pow+0x58>
 8008bb4:	2e00      	cmp	r6, #0
 8008bb6:	d1ea      	bne.n	8008b8e <__ieee754_pow+0x2e>
 8008bb8:	4592      	cmp	sl, r2
 8008bba:	d801      	bhi.n	8008bc0 <__ieee754_pow+0x60>
 8008bbc:	d10e      	bne.n	8008bdc <__ieee754_pow+0x7c>
 8008bbe:	b169      	cbz	r1, 8008bdc <__ieee754_pow+0x7c>
 8008bc0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8008bc4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8008bc8:	431d      	orrs	r5, r3
 8008bca:	d1e0      	bne.n	8008b8e <__ieee754_pow+0x2e>
 8008bcc:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008bd0:	18db      	adds	r3, r3, r3
 8008bd2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8008bd6:	4152      	adcs	r2, r2
 8008bd8:	429d      	cmp	r5, r3
 8008bda:	e7d4      	b.n	8008b86 <__ieee754_pow+0x26>
 8008bdc:	2d00      	cmp	r5, #0
 8008bde:	46c3      	mov	fp, r8
 8008be0:	da3a      	bge.n	8008c58 <__ieee754_pow+0xf8>
 8008be2:	4a83      	ldr	r2, [pc, #524]	@ (8008df0 <__ieee754_pow+0x290>)
 8008be4:	4592      	cmp	sl, r2
 8008be6:	d84d      	bhi.n	8008c84 <__ieee754_pow+0x124>
 8008be8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8008bec:	4592      	cmp	sl, r2
 8008bee:	f240 84c7 	bls.w	8009580 <__ieee754_pow+0xa20>
 8008bf2:	ea4f 522a 	mov.w	r2, sl, asr #20
 8008bf6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008bfa:	2a14      	cmp	r2, #20
 8008bfc:	dd0f      	ble.n	8008c1e <__ieee754_pow+0xbe>
 8008bfe:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8008c02:	fa21 f402 	lsr.w	r4, r1, r2
 8008c06:	fa04 f202 	lsl.w	r2, r4, r2
 8008c0a:	428a      	cmp	r2, r1
 8008c0c:	f040 84b8 	bne.w	8009580 <__ieee754_pow+0xa20>
 8008c10:	f004 0401 	and.w	r4, r4, #1
 8008c14:	f1c4 0402 	rsb	r4, r4, #2
 8008c18:	2900      	cmp	r1, #0
 8008c1a:	d158      	bne.n	8008cce <__ieee754_pow+0x16e>
 8008c1c:	e00e      	b.n	8008c3c <__ieee754_pow+0xdc>
 8008c1e:	2900      	cmp	r1, #0
 8008c20:	d154      	bne.n	8008ccc <__ieee754_pow+0x16c>
 8008c22:	f1c2 0214 	rsb	r2, r2, #20
 8008c26:	fa4a f402 	asr.w	r4, sl, r2
 8008c2a:	fa04 f202 	lsl.w	r2, r4, r2
 8008c2e:	4552      	cmp	r2, sl
 8008c30:	f040 84a3 	bne.w	800957a <__ieee754_pow+0xa1a>
 8008c34:	f004 0401 	and.w	r4, r4, #1
 8008c38:	f1c4 0402 	rsb	r4, r4, #2
 8008c3c:	4a6d      	ldr	r2, [pc, #436]	@ (8008df4 <__ieee754_pow+0x294>)
 8008c3e:	4592      	cmp	sl, r2
 8008c40:	d12e      	bne.n	8008ca0 <__ieee754_pow+0x140>
 8008c42:	f1b9 0f00 	cmp.w	r9, #0
 8008c46:	f280 8494 	bge.w	8009572 <__ieee754_pow+0xa12>
 8008c4a:	496a      	ldr	r1, [pc, #424]	@ (8008df4 <__ieee754_pow+0x294>)
 8008c4c:	4632      	mov	r2, r6
 8008c4e:	463b      	mov	r3, r7
 8008c50:	2000      	movs	r0, #0
 8008c52:	f7f7 fdfb 	bl	800084c <__aeabi_ddiv>
 8008c56:	e7a0      	b.n	8008b9a <__ieee754_pow+0x3a>
 8008c58:	2400      	movs	r4, #0
 8008c5a:	bbc1      	cbnz	r1, 8008cce <__ieee754_pow+0x16e>
 8008c5c:	4a63      	ldr	r2, [pc, #396]	@ (8008dec <__ieee754_pow+0x28c>)
 8008c5e:	4592      	cmp	sl, r2
 8008c60:	d1ec      	bne.n	8008c3c <__ieee754_pow+0xdc>
 8008c62:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8008c66:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8008c6a:	431a      	orrs	r2, r3
 8008c6c:	f000 8479 	beq.w	8009562 <__ieee754_pow+0xa02>
 8008c70:	4b61      	ldr	r3, [pc, #388]	@ (8008df8 <__ieee754_pow+0x298>)
 8008c72:	4598      	cmp	r8, r3
 8008c74:	d908      	bls.n	8008c88 <__ieee754_pow+0x128>
 8008c76:	f1b9 0f00 	cmp.w	r9, #0
 8008c7a:	f2c0 8476 	blt.w	800956a <__ieee754_pow+0xa0a>
 8008c7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c82:	e78a      	b.n	8008b9a <__ieee754_pow+0x3a>
 8008c84:	2402      	movs	r4, #2
 8008c86:	e7e8      	b.n	8008c5a <__ieee754_pow+0xfa>
 8008c88:	f1b9 0f00 	cmp.w	r9, #0
 8008c8c:	f04f 0000 	mov.w	r0, #0
 8008c90:	f04f 0100 	mov.w	r1, #0
 8008c94:	da81      	bge.n	8008b9a <__ieee754_pow+0x3a>
 8008c96:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008c9a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008c9e:	e77c      	b.n	8008b9a <__ieee754_pow+0x3a>
 8008ca0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8008ca4:	d106      	bne.n	8008cb4 <__ieee754_pow+0x154>
 8008ca6:	4632      	mov	r2, r6
 8008ca8:	463b      	mov	r3, r7
 8008caa:	4630      	mov	r0, r6
 8008cac:	4639      	mov	r1, r7
 8008cae:	f7f7 fca3 	bl	80005f8 <__aeabi_dmul>
 8008cb2:	e772      	b.n	8008b9a <__ieee754_pow+0x3a>
 8008cb4:	4a51      	ldr	r2, [pc, #324]	@ (8008dfc <__ieee754_pow+0x29c>)
 8008cb6:	4591      	cmp	r9, r2
 8008cb8:	d109      	bne.n	8008cce <__ieee754_pow+0x16e>
 8008cba:	2d00      	cmp	r5, #0
 8008cbc:	db07      	blt.n	8008cce <__ieee754_pow+0x16e>
 8008cbe:	ec47 6b10 	vmov	d0, r6, r7
 8008cc2:	b011      	add	sp, #68	@ 0x44
 8008cc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc8:	f000 bd52 	b.w	8009770 <__ieee754_sqrt>
 8008ccc:	2400      	movs	r4, #0
 8008cce:	ec47 6b10 	vmov	d0, r6, r7
 8008cd2:	9302      	str	r3, [sp, #8]
 8008cd4:	f000 fc88 	bl	80095e8 <fabs>
 8008cd8:	9b02      	ldr	r3, [sp, #8]
 8008cda:	ec51 0b10 	vmov	r0, r1, d0
 8008cde:	bb53      	cbnz	r3, 8008d36 <__ieee754_pow+0x1d6>
 8008ce0:	4b44      	ldr	r3, [pc, #272]	@ (8008df4 <__ieee754_pow+0x294>)
 8008ce2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d002      	beq.n	8008cf0 <__ieee754_pow+0x190>
 8008cea:	f1b8 0f00 	cmp.w	r8, #0
 8008cee:	d122      	bne.n	8008d36 <__ieee754_pow+0x1d6>
 8008cf0:	f1b9 0f00 	cmp.w	r9, #0
 8008cf4:	da05      	bge.n	8008d02 <__ieee754_pow+0x1a2>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	2000      	movs	r0, #0
 8008cfc:	493d      	ldr	r1, [pc, #244]	@ (8008df4 <__ieee754_pow+0x294>)
 8008cfe:	f7f7 fda5 	bl	800084c <__aeabi_ddiv>
 8008d02:	2d00      	cmp	r5, #0
 8008d04:	f6bf af49 	bge.w	8008b9a <__ieee754_pow+0x3a>
 8008d08:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8008d0c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8008d10:	ea58 0804 	orrs.w	r8, r8, r4
 8008d14:	d108      	bne.n	8008d28 <__ieee754_pow+0x1c8>
 8008d16:	4602      	mov	r2, r0
 8008d18:	460b      	mov	r3, r1
 8008d1a:	4610      	mov	r0, r2
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	f7f7 fab3 	bl	8000288 <__aeabi_dsub>
 8008d22:	4602      	mov	r2, r0
 8008d24:	460b      	mov	r3, r1
 8008d26:	e794      	b.n	8008c52 <__ieee754_pow+0xf2>
 8008d28:	2c01      	cmp	r4, #1
 8008d2a:	f47f af36 	bne.w	8008b9a <__ieee754_pow+0x3a>
 8008d2e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008d32:	4619      	mov	r1, r3
 8008d34:	e731      	b.n	8008b9a <__ieee754_pow+0x3a>
 8008d36:	0feb      	lsrs	r3, r5, #31
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	ea53 0204 	orrs.w	r2, r3, r4
 8008d3e:	d102      	bne.n	8008d46 <__ieee754_pow+0x1e6>
 8008d40:	4632      	mov	r2, r6
 8008d42:	463b      	mov	r3, r7
 8008d44:	e7e9      	b.n	8008d1a <__ieee754_pow+0x1ba>
 8008d46:	3c01      	subs	r4, #1
 8008d48:	431c      	orrs	r4, r3
 8008d4a:	d016      	beq.n	8008d7a <__ieee754_pow+0x21a>
 8008d4c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8008dd8 <__ieee754_pow+0x278>
 8008d50:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8008d54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008d58:	f240 8112 	bls.w	8008f80 <__ieee754_pow+0x420>
 8008d5c:	4b28      	ldr	r3, [pc, #160]	@ (8008e00 <__ieee754_pow+0x2a0>)
 8008d5e:	459a      	cmp	sl, r3
 8008d60:	4b25      	ldr	r3, [pc, #148]	@ (8008df8 <__ieee754_pow+0x298>)
 8008d62:	d916      	bls.n	8008d92 <__ieee754_pow+0x232>
 8008d64:	4598      	cmp	r8, r3
 8008d66:	d80b      	bhi.n	8008d80 <__ieee754_pow+0x220>
 8008d68:	f1b9 0f00 	cmp.w	r9, #0
 8008d6c:	da0b      	bge.n	8008d86 <__ieee754_pow+0x226>
 8008d6e:	2000      	movs	r0, #0
 8008d70:	b011      	add	sp, #68	@ 0x44
 8008d72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d76:	f000 bcf3 	b.w	8009760 <__math_oflow>
 8008d7a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8008de0 <__ieee754_pow+0x280>
 8008d7e:	e7e7      	b.n	8008d50 <__ieee754_pow+0x1f0>
 8008d80:	f1b9 0f00 	cmp.w	r9, #0
 8008d84:	dcf3      	bgt.n	8008d6e <__ieee754_pow+0x20e>
 8008d86:	2000      	movs	r0, #0
 8008d88:	b011      	add	sp, #68	@ 0x44
 8008d8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d8e:	f000 bcdf 	b.w	8009750 <__math_uflow>
 8008d92:	4598      	cmp	r8, r3
 8008d94:	d20c      	bcs.n	8008db0 <__ieee754_pow+0x250>
 8008d96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	f7f7 fe9d 	bl	8000adc <__aeabi_dcmplt>
 8008da2:	3800      	subs	r0, #0
 8008da4:	bf18      	it	ne
 8008da6:	2001      	movne	r0, #1
 8008da8:	f1b9 0f00 	cmp.w	r9, #0
 8008dac:	daec      	bge.n	8008d88 <__ieee754_pow+0x228>
 8008dae:	e7df      	b.n	8008d70 <__ieee754_pow+0x210>
 8008db0:	4b10      	ldr	r3, [pc, #64]	@ (8008df4 <__ieee754_pow+0x294>)
 8008db2:	4598      	cmp	r8, r3
 8008db4:	f04f 0200 	mov.w	r2, #0
 8008db8:	d924      	bls.n	8008e04 <__ieee754_pow+0x2a4>
 8008dba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	f7f7 fe8c 	bl	8000adc <__aeabi_dcmplt>
 8008dc4:	3800      	subs	r0, #0
 8008dc6:	bf18      	it	ne
 8008dc8:	2001      	movne	r0, #1
 8008dca:	f1b9 0f00 	cmp.w	r9, #0
 8008dce:	dccf      	bgt.n	8008d70 <__ieee754_pow+0x210>
 8008dd0:	e7da      	b.n	8008d88 <__ieee754_pow+0x228>
 8008dd2:	bf00      	nop
 8008dd4:	f3af 8000 	nop.w
 8008dd8:	00000000 	.word	0x00000000
 8008ddc:	3ff00000 	.word	0x3ff00000
 8008de0:	00000000 	.word	0x00000000
 8008de4:	bff00000 	.word	0xbff00000
 8008de8:	fff00000 	.word	0xfff00000
 8008dec:	7ff00000 	.word	0x7ff00000
 8008df0:	433fffff 	.word	0x433fffff
 8008df4:	3ff00000 	.word	0x3ff00000
 8008df8:	3fefffff 	.word	0x3fefffff
 8008dfc:	3fe00000 	.word	0x3fe00000
 8008e00:	43f00000 	.word	0x43f00000
 8008e04:	4b5a      	ldr	r3, [pc, #360]	@ (8008f70 <__ieee754_pow+0x410>)
 8008e06:	f7f7 fa3f 	bl	8000288 <__aeabi_dsub>
 8008e0a:	a351      	add	r3, pc, #324	@ (adr r3, 8008f50 <__ieee754_pow+0x3f0>)
 8008e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e10:	4604      	mov	r4, r0
 8008e12:	460d      	mov	r5, r1
 8008e14:	f7f7 fbf0 	bl	80005f8 <__aeabi_dmul>
 8008e18:	a34f      	add	r3, pc, #316	@ (adr r3, 8008f58 <__ieee754_pow+0x3f8>)
 8008e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1e:	4606      	mov	r6, r0
 8008e20:	460f      	mov	r7, r1
 8008e22:	4620      	mov	r0, r4
 8008e24:	4629      	mov	r1, r5
 8008e26:	f7f7 fbe7 	bl	80005f8 <__aeabi_dmul>
 8008e2a:	4b52      	ldr	r3, [pc, #328]	@ (8008f74 <__ieee754_pow+0x414>)
 8008e2c:	4682      	mov	sl, r0
 8008e2e:	468b      	mov	fp, r1
 8008e30:	2200      	movs	r2, #0
 8008e32:	4620      	mov	r0, r4
 8008e34:	4629      	mov	r1, r5
 8008e36:	f7f7 fbdf 	bl	80005f8 <__aeabi_dmul>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	a148      	add	r1, pc, #288	@ (adr r1, 8008f60 <__ieee754_pow+0x400>)
 8008e40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e44:	f7f7 fa20 	bl	8000288 <__aeabi_dsub>
 8008e48:	4622      	mov	r2, r4
 8008e4a:	462b      	mov	r3, r5
 8008e4c:	f7f7 fbd4 	bl	80005f8 <__aeabi_dmul>
 8008e50:	4602      	mov	r2, r0
 8008e52:	460b      	mov	r3, r1
 8008e54:	2000      	movs	r0, #0
 8008e56:	4948      	ldr	r1, [pc, #288]	@ (8008f78 <__ieee754_pow+0x418>)
 8008e58:	f7f7 fa16 	bl	8000288 <__aeabi_dsub>
 8008e5c:	4622      	mov	r2, r4
 8008e5e:	4680      	mov	r8, r0
 8008e60:	4689      	mov	r9, r1
 8008e62:	462b      	mov	r3, r5
 8008e64:	4620      	mov	r0, r4
 8008e66:	4629      	mov	r1, r5
 8008e68:	f7f7 fbc6 	bl	80005f8 <__aeabi_dmul>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	460b      	mov	r3, r1
 8008e70:	4640      	mov	r0, r8
 8008e72:	4649      	mov	r1, r9
 8008e74:	f7f7 fbc0 	bl	80005f8 <__aeabi_dmul>
 8008e78:	a33b      	add	r3, pc, #236	@ (adr r3, 8008f68 <__ieee754_pow+0x408>)
 8008e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7e:	f7f7 fbbb 	bl	80005f8 <__aeabi_dmul>
 8008e82:	4602      	mov	r2, r0
 8008e84:	460b      	mov	r3, r1
 8008e86:	4650      	mov	r0, sl
 8008e88:	4659      	mov	r1, fp
 8008e8a:	f7f7 f9fd 	bl	8000288 <__aeabi_dsub>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	460b      	mov	r3, r1
 8008e92:	4680      	mov	r8, r0
 8008e94:	4689      	mov	r9, r1
 8008e96:	4630      	mov	r0, r6
 8008e98:	4639      	mov	r1, r7
 8008e9a:	f7f7 f9f7 	bl	800028c <__adddf3>
 8008e9e:	2400      	movs	r4, #0
 8008ea0:	4632      	mov	r2, r6
 8008ea2:	463b      	mov	r3, r7
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	460d      	mov	r5, r1
 8008ea8:	f7f7 f9ee 	bl	8000288 <__aeabi_dsub>
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	4640      	mov	r0, r8
 8008eb2:	4649      	mov	r1, r9
 8008eb4:	f7f7 f9e8 	bl	8000288 <__aeabi_dsub>
 8008eb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ebc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	9304      	str	r3, [sp, #16]
 8008ec4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008ec8:	4606      	mov	r6, r0
 8008eca:	460f      	mov	r7, r1
 8008ecc:	4652      	mov	r2, sl
 8008ece:	465b      	mov	r3, fp
 8008ed0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ed4:	f7f7 f9d8 	bl	8000288 <__aeabi_dsub>
 8008ed8:	4622      	mov	r2, r4
 8008eda:	462b      	mov	r3, r5
 8008edc:	f7f7 fb8c 	bl	80005f8 <__aeabi_dmul>
 8008ee0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ee4:	4680      	mov	r8, r0
 8008ee6:	4689      	mov	r9, r1
 8008ee8:	4630      	mov	r0, r6
 8008eea:	4639      	mov	r1, r7
 8008eec:	f7f7 fb84 	bl	80005f8 <__aeabi_dmul>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	4640      	mov	r0, r8
 8008ef6:	4649      	mov	r1, r9
 8008ef8:	f7f7 f9c8 	bl	800028c <__adddf3>
 8008efc:	4652      	mov	r2, sl
 8008efe:	465b      	mov	r3, fp
 8008f00:	4606      	mov	r6, r0
 8008f02:	460f      	mov	r7, r1
 8008f04:	4620      	mov	r0, r4
 8008f06:	4629      	mov	r1, r5
 8008f08:	f7f7 fb76 	bl	80005f8 <__aeabi_dmul>
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	4602      	mov	r2, r0
 8008f10:	4680      	mov	r8, r0
 8008f12:	4689      	mov	r9, r1
 8008f14:	4630      	mov	r0, r6
 8008f16:	4639      	mov	r1, r7
 8008f18:	f7f7 f9b8 	bl	800028c <__adddf3>
 8008f1c:	4b17      	ldr	r3, [pc, #92]	@ (8008f7c <__ieee754_pow+0x41c>)
 8008f1e:	4299      	cmp	r1, r3
 8008f20:	4604      	mov	r4, r0
 8008f22:	460d      	mov	r5, r1
 8008f24:	468a      	mov	sl, r1
 8008f26:	468b      	mov	fp, r1
 8008f28:	f340 82ef 	ble.w	800950a <__ieee754_pow+0x9aa>
 8008f2c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008f30:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008f34:	4303      	orrs	r3, r0
 8008f36:	f000 81e8 	beq.w	800930a <__ieee754_pow+0x7aa>
 8008f3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	2300      	movs	r3, #0
 8008f42:	f7f7 fdcb 	bl	8000adc <__aeabi_dcmplt>
 8008f46:	3800      	subs	r0, #0
 8008f48:	bf18      	it	ne
 8008f4a:	2001      	movne	r0, #1
 8008f4c:	e710      	b.n	8008d70 <__ieee754_pow+0x210>
 8008f4e:	bf00      	nop
 8008f50:	60000000 	.word	0x60000000
 8008f54:	3ff71547 	.word	0x3ff71547
 8008f58:	f85ddf44 	.word	0xf85ddf44
 8008f5c:	3e54ae0b 	.word	0x3e54ae0b
 8008f60:	55555555 	.word	0x55555555
 8008f64:	3fd55555 	.word	0x3fd55555
 8008f68:	652b82fe 	.word	0x652b82fe
 8008f6c:	3ff71547 	.word	0x3ff71547
 8008f70:	3ff00000 	.word	0x3ff00000
 8008f74:	3fd00000 	.word	0x3fd00000
 8008f78:	3fe00000 	.word	0x3fe00000
 8008f7c:	408fffff 	.word	0x408fffff
 8008f80:	4bd5      	ldr	r3, [pc, #852]	@ (80092d8 <__ieee754_pow+0x778>)
 8008f82:	402b      	ands	r3, r5
 8008f84:	2200      	movs	r2, #0
 8008f86:	b92b      	cbnz	r3, 8008f94 <__ieee754_pow+0x434>
 8008f88:	4bd4      	ldr	r3, [pc, #848]	@ (80092dc <__ieee754_pow+0x77c>)
 8008f8a:	f7f7 fb35 	bl	80005f8 <__aeabi_dmul>
 8008f8e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8008f92:	468b      	mov	fp, r1
 8008f94:	ea4f 532b 	mov.w	r3, fp, asr #20
 8008f98:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8008f9c:	4413      	add	r3, r2
 8008f9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fa0:	4bcf      	ldr	r3, [pc, #828]	@ (80092e0 <__ieee754_pow+0x780>)
 8008fa2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8008fa6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8008faa:	459b      	cmp	fp, r3
 8008fac:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008fb0:	dd08      	ble.n	8008fc4 <__ieee754_pow+0x464>
 8008fb2:	4bcc      	ldr	r3, [pc, #816]	@ (80092e4 <__ieee754_pow+0x784>)
 8008fb4:	459b      	cmp	fp, r3
 8008fb6:	f340 81a5 	ble.w	8009304 <__ieee754_pow+0x7a4>
 8008fba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fc0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8008fc4:	f04f 0a00 	mov.w	sl, #0
 8008fc8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008fcc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008fce:	4bc6      	ldr	r3, [pc, #792]	@ (80092e8 <__ieee754_pow+0x788>)
 8008fd0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008fd4:	ed93 7b00 	vldr	d7, [r3]
 8008fd8:	4629      	mov	r1, r5
 8008fda:	ec53 2b17 	vmov	r2, r3, d7
 8008fde:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008fe2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008fe6:	f7f7 f94f 	bl	8000288 <__aeabi_dsub>
 8008fea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008fee:	4606      	mov	r6, r0
 8008ff0:	460f      	mov	r7, r1
 8008ff2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ff6:	f7f7 f949 	bl	800028c <__adddf3>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	2000      	movs	r0, #0
 8009000:	49ba      	ldr	r1, [pc, #744]	@ (80092ec <__ieee754_pow+0x78c>)
 8009002:	f7f7 fc23 	bl	800084c <__aeabi_ddiv>
 8009006:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800900a:	4602      	mov	r2, r0
 800900c:	460b      	mov	r3, r1
 800900e:	4630      	mov	r0, r6
 8009010:	4639      	mov	r1, r7
 8009012:	f7f7 faf1 	bl	80005f8 <__aeabi_dmul>
 8009016:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800901a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800901e:	106d      	asrs	r5, r5, #1
 8009020:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8009024:	f04f 0b00 	mov.w	fp, #0
 8009028:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800902c:	4661      	mov	r1, ip
 800902e:	2200      	movs	r2, #0
 8009030:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009034:	4658      	mov	r0, fp
 8009036:	46e1      	mov	r9, ip
 8009038:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800903c:	4614      	mov	r4, r2
 800903e:	461d      	mov	r5, r3
 8009040:	f7f7 fada 	bl	80005f8 <__aeabi_dmul>
 8009044:	4602      	mov	r2, r0
 8009046:	460b      	mov	r3, r1
 8009048:	4630      	mov	r0, r6
 800904a:	4639      	mov	r1, r7
 800904c:	f7f7 f91c 	bl	8000288 <__aeabi_dsub>
 8009050:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009054:	4606      	mov	r6, r0
 8009056:	460f      	mov	r7, r1
 8009058:	4620      	mov	r0, r4
 800905a:	4629      	mov	r1, r5
 800905c:	f7f7 f914 	bl	8000288 <__aeabi_dsub>
 8009060:	4602      	mov	r2, r0
 8009062:	460b      	mov	r3, r1
 8009064:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009068:	f7f7 f90e 	bl	8000288 <__aeabi_dsub>
 800906c:	465a      	mov	r2, fp
 800906e:	464b      	mov	r3, r9
 8009070:	f7f7 fac2 	bl	80005f8 <__aeabi_dmul>
 8009074:	4602      	mov	r2, r0
 8009076:	460b      	mov	r3, r1
 8009078:	4630      	mov	r0, r6
 800907a:	4639      	mov	r1, r7
 800907c:	f7f7 f904 	bl	8000288 <__aeabi_dsub>
 8009080:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009084:	f7f7 fab8 	bl	80005f8 <__aeabi_dmul>
 8009088:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800908c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009090:	4610      	mov	r0, r2
 8009092:	4619      	mov	r1, r3
 8009094:	f7f7 fab0 	bl	80005f8 <__aeabi_dmul>
 8009098:	a37d      	add	r3, pc, #500	@ (adr r3, 8009290 <__ieee754_pow+0x730>)
 800909a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909e:	4604      	mov	r4, r0
 80090a0:	460d      	mov	r5, r1
 80090a2:	f7f7 faa9 	bl	80005f8 <__aeabi_dmul>
 80090a6:	a37c      	add	r3, pc, #496	@ (adr r3, 8009298 <__ieee754_pow+0x738>)
 80090a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ac:	f7f7 f8ee 	bl	800028c <__adddf3>
 80090b0:	4622      	mov	r2, r4
 80090b2:	462b      	mov	r3, r5
 80090b4:	f7f7 faa0 	bl	80005f8 <__aeabi_dmul>
 80090b8:	a379      	add	r3, pc, #484	@ (adr r3, 80092a0 <__ieee754_pow+0x740>)
 80090ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090be:	f7f7 f8e5 	bl	800028c <__adddf3>
 80090c2:	4622      	mov	r2, r4
 80090c4:	462b      	mov	r3, r5
 80090c6:	f7f7 fa97 	bl	80005f8 <__aeabi_dmul>
 80090ca:	a377      	add	r3, pc, #476	@ (adr r3, 80092a8 <__ieee754_pow+0x748>)
 80090cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d0:	f7f7 f8dc 	bl	800028c <__adddf3>
 80090d4:	4622      	mov	r2, r4
 80090d6:	462b      	mov	r3, r5
 80090d8:	f7f7 fa8e 	bl	80005f8 <__aeabi_dmul>
 80090dc:	a374      	add	r3, pc, #464	@ (adr r3, 80092b0 <__ieee754_pow+0x750>)
 80090de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e2:	f7f7 f8d3 	bl	800028c <__adddf3>
 80090e6:	4622      	mov	r2, r4
 80090e8:	462b      	mov	r3, r5
 80090ea:	f7f7 fa85 	bl	80005f8 <__aeabi_dmul>
 80090ee:	a372      	add	r3, pc, #456	@ (adr r3, 80092b8 <__ieee754_pow+0x758>)
 80090f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f4:	f7f7 f8ca 	bl	800028c <__adddf3>
 80090f8:	4622      	mov	r2, r4
 80090fa:	4606      	mov	r6, r0
 80090fc:	460f      	mov	r7, r1
 80090fe:	462b      	mov	r3, r5
 8009100:	4620      	mov	r0, r4
 8009102:	4629      	mov	r1, r5
 8009104:	f7f7 fa78 	bl	80005f8 <__aeabi_dmul>
 8009108:	4602      	mov	r2, r0
 800910a:	460b      	mov	r3, r1
 800910c:	4630      	mov	r0, r6
 800910e:	4639      	mov	r1, r7
 8009110:	f7f7 fa72 	bl	80005f8 <__aeabi_dmul>
 8009114:	465a      	mov	r2, fp
 8009116:	4604      	mov	r4, r0
 8009118:	460d      	mov	r5, r1
 800911a:	464b      	mov	r3, r9
 800911c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009120:	f7f7 f8b4 	bl	800028c <__adddf3>
 8009124:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009128:	f7f7 fa66 	bl	80005f8 <__aeabi_dmul>
 800912c:	4622      	mov	r2, r4
 800912e:	462b      	mov	r3, r5
 8009130:	f7f7 f8ac 	bl	800028c <__adddf3>
 8009134:	465a      	mov	r2, fp
 8009136:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800913a:	464b      	mov	r3, r9
 800913c:	4658      	mov	r0, fp
 800913e:	4649      	mov	r1, r9
 8009140:	f7f7 fa5a 	bl	80005f8 <__aeabi_dmul>
 8009144:	4b6a      	ldr	r3, [pc, #424]	@ (80092f0 <__ieee754_pow+0x790>)
 8009146:	2200      	movs	r2, #0
 8009148:	4606      	mov	r6, r0
 800914a:	460f      	mov	r7, r1
 800914c:	f7f7 f89e 	bl	800028c <__adddf3>
 8009150:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009154:	f7f7 f89a 	bl	800028c <__adddf3>
 8009158:	46d8      	mov	r8, fp
 800915a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800915e:	460d      	mov	r5, r1
 8009160:	465a      	mov	r2, fp
 8009162:	460b      	mov	r3, r1
 8009164:	4640      	mov	r0, r8
 8009166:	4649      	mov	r1, r9
 8009168:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800916c:	f7f7 fa44 	bl	80005f8 <__aeabi_dmul>
 8009170:	465c      	mov	r4, fp
 8009172:	4680      	mov	r8, r0
 8009174:	4689      	mov	r9, r1
 8009176:	4b5e      	ldr	r3, [pc, #376]	@ (80092f0 <__ieee754_pow+0x790>)
 8009178:	2200      	movs	r2, #0
 800917a:	4620      	mov	r0, r4
 800917c:	4629      	mov	r1, r5
 800917e:	f7f7 f883 	bl	8000288 <__aeabi_dsub>
 8009182:	4632      	mov	r2, r6
 8009184:	463b      	mov	r3, r7
 8009186:	f7f7 f87f 	bl	8000288 <__aeabi_dsub>
 800918a:	4602      	mov	r2, r0
 800918c:	460b      	mov	r3, r1
 800918e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009192:	f7f7 f879 	bl	8000288 <__aeabi_dsub>
 8009196:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800919a:	f7f7 fa2d 	bl	80005f8 <__aeabi_dmul>
 800919e:	4622      	mov	r2, r4
 80091a0:	4606      	mov	r6, r0
 80091a2:	460f      	mov	r7, r1
 80091a4:	462b      	mov	r3, r5
 80091a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091aa:	f7f7 fa25 	bl	80005f8 <__aeabi_dmul>
 80091ae:	4602      	mov	r2, r0
 80091b0:	460b      	mov	r3, r1
 80091b2:	4630      	mov	r0, r6
 80091b4:	4639      	mov	r1, r7
 80091b6:	f7f7 f869 	bl	800028c <__adddf3>
 80091ba:	4606      	mov	r6, r0
 80091bc:	460f      	mov	r7, r1
 80091be:	4602      	mov	r2, r0
 80091c0:	460b      	mov	r3, r1
 80091c2:	4640      	mov	r0, r8
 80091c4:	4649      	mov	r1, r9
 80091c6:	f7f7 f861 	bl	800028c <__adddf3>
 80091ca:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80091ce:	a33c      	add	r3, pc, #240	@ (adr r3, 80092c0 <__ieee754_pow+0x760>)
 80091d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d4:	4658      	mov	r0, fp
 80091d6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80091da:	460d      	mov	r5, r1
 80091dc:	f7f7 fa0c 	bl	80005f8 <__aeabi_dmul>
 80091e0:	465c      	mov	r4, fp
 80091e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091e6:	4642      	mov	r2, r8
 80091e8:	464b      	mov	r3, r9
 80091ea:	4620      	mov	r0, r4
 80091ec:	4629      	mov	r1, r5
 80091ee:	f7f7 f84b 	bl	8000288 <__aeabi_dsub>
 80091f2:	4602      	mov	r2, r0
 80091f4:	460b      	mov	r3, r1
 80091f6:	4630      	mov	r0, r6
 80091f8:	4639      	mov	r1, r7
 80091fa:	f7f7 f845 	bl	8000288 <__aeabi_dsub>
 80091fe:	a332      	add	r3, pc, #200	@ (adr r3, 80092c8 <__ieee754_pow+0x768>)
 8009200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009204:	f7f7 f9f8 	bl	80005f8 <__aeabi_dmul>
 8009208:	a331      	add	r3, pc, #196	@ (adr r3, 80092d0 <__ieee754_pow+0x770>)
 800920a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920e:	4606      	mov	r6, r0
 8009210:	460f      	mov	r7, r1
 8009212:	4620      	mov	r0, r4
 8009214:	4629      	mov	r1, r5
 8009216:	f7f7 f9ef 	bl	80005f8 <__aeabi_dmul>
 800921a:	4602      	mov	r2, r0
 800921c:	460b      	mov	r3, r1
 800921e:	4630      	mov	r0, r6
 8009220:	4639      	mov	r1, r7
 8009222:	f7f7 f833 	bl	800028c <__adddf3>
 8009226:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009228:	4b32      	ldr	r3, [pc, #200]	@ (80092f4 <__ieee754_pow+0x794>)
 800922a:	4413      	add	r3, r2
 800922c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009230:	f7f7 f82c 	bl	800028c <__adddf3>
 8009234:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009238:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800923a:	f7f7 f973 	bl	8000524 <__aeabi_i2d>
 800923e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009240:	4b2d      	ldr	r3, [pc, #180]	@ (80092f8 <__ieee754_pow+0x798>)
 8009242:	4413      	add	r3, r2
 8009244:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009248:	4606      	mov	r6, r0
 800924a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800924e:	460f      	mov	r7, r1
 8009250:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009254:	f7f7 f81a 	bl	800028c <__adddf3>
 8009258:	4642      	mov	r2, r8
 800925a:	464b      	mov	r3, r9
 800925c:	f7f7 f816 	bl	800028c <__adddf3>
 8009260:	4632      	mov	r2, r6
 8009262:	463b      	mov	r3, r7
 8009264:	f7f7 f812 	bl	800028c <__adddf3>
 8009268:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800926c:	4632      	mov	r2, r6
 800926e:	463b      	mov	r3, r7
 8009270:	4658      	mov	r0, fp
 8009272:	460d      	mov	r5, r1
 8009274:	f7f7 f808 	bl	8000288 <__aeabi_dsub>
 8009278:	4642      	mov	r2, r8
 800927a:	464b      	mov	r3, r9
 800927c:	f7f7 f804 	bl	8000288 <__aeabi_dsub>
 8009280:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009284:	f7f7 f800 	bl	8000288 <__aeabi_dsub>
 8009288:	465c      	mov	r4, fp
 800928a:	4602      	mov	r2, r0
 800928c:	e036      	b.n	80092fc <__ieee754_pow+0x79c>
 800928e:	bf00      	nop
 8009290:	4a454eef 	.word	0x4a454eef
 8009294:	3fca7e28 	.word	0x3fca7e28
 8009298:	93c9db65 	.word	0x93c9db65
 800929c:	3fcd864a 	.word	0x3fcd864a
 80092a0:	a91d4101 	.word	0xa91d4101
 80092a4:	3fd17460 	.word	0x3fd17460
 80092a8:	518f264d 	.word	0x518f264d
 80092ac:	3fd55555 	.word	0x3fd55555
 80092b0:	db6fabff 	.word	0xdb6fabff
 80092b4:	3fdb6db6 	.word	0x3fdb6db6
 80092b8:	33333303 	.word	0x33333303
 80092bc:	3fe33333 	.word	0x3fe33333
 80092c0:	e0000000 	.word	0xe0000000
 80092c4:	3feec709 	.word	0x3feec709
 80092c8:	dc3a03fd 	.word	0xdc3a03fd
 80092cc:	3feec709 	.word	0x3feec709
 80092d0:	145b01f5 	.word	0x145b01f5
 80092d4:	be3e2fe0 	.word	0xbe3e2fe0
 80092d8:	7ff00000 	.word	0x7ff00000
 80092dc:	43400000 	.word	0x43400000
 80092e0:	0003988e 	.word	0x0003988e
 80092e4:	000bb679 	.word	0x000bb679
 80092e8:	0800a810 	.word	0x0800a810
 80092ec:	3ff00000 	.word	0x3ff00000
 80092f0:	40080000 	.word	0x40080000
 80092f4:	0800a7f0 	.word	0x0800a7f0
 80092f8:	0800a800 	.word	0x0800a800
 80092fc:	460b      	mov	r3, r1
 80092fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009302:	e5d7      	b.n	8008eb4 <__ieee754_pow+0x354>
 8009304:	f04f 0a01 	mov.w	sl, #1
 8009308:	e65e      	b.n	8008fc8 <__ieee754_pow+0x468>
 800930a:	a3b4      	add	r3, pc, #720	@ (adr r3, 80095dc <__ieee754_pow+0xa7c>)
 800930c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009310:	4630      	mov	r0, r6
 8009312:	4639      	mov	r1, r7
 8009314:	f7f6 ffba 	bl	800028c <__adddf3>
 8009318:	4642      	mov	r2, r8
 800931a:	e9cd 0100 	strd	r0, r1, [sp]
 800931e:	464b      	mov	r3, r9
 8009320:	4620      	mov	r0, r4
 8009322:	4629      	mov	r1, r5
 8009324:	f7f6 ffb0 	bl	8000288 <__aeabi_dsub>
 8009328:	4602      	mov	r2, r0
 800932a:	460b      	mov	r3, r1
 800932c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009330:	f7f7 fbf2 	bl	8000b18 <__aeabi_dcmpgt>
 8009334:	2800      	cmp	r0, #0
 8009336:	f47f ae00 	bne.w	8008f3a <__ieee754_pow+0x3da>
 800933a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800933e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009342:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8009346:	fa43 fa0a 	asr.w	sl, r3, sl
 800934a:	44da      	add	sl, fp
 800934c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009350:	489d      	ldr	r0, [pc, #628]	@ (80095c8 <__ieee754_pow+0xa68>)
 8009352:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8009356:	4108      	asrs	r0, r1
 8009358:	ea00 030a 	and.w	r3, r0, sl
 800935c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009360:	f1c1 0114 	rsb	r1, r1, #20
 8009364:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8009368:	fa4a fa01 	asr.w	sl, sl, r1
 800936c:	f1bb 0f00 	cmp.w	fp, #0
 8009370:	4640      	mov	r0, r8
 8009372:	4649      	mov	r1, r9
 8009374:	f04f 0200 	mov.w	r2, #0
 8009378:	bfb8      	it	lt
 800937a:	f1ca 0a00 	rsblt	sl, sl, #0
 800937e:	f7f6 ff83 	bl	8000288 <__aeabi_dsub>
 8009382:	4680      	mov	r8, r0
 8009384:	4689      	mov	r9, r1
 8009386:	4632      	mov	r2, r6
 8009388:	463b      	mov	r3, r7
 800938a:	4640      	mov	r0, r8
 800938c:	4649      	mov	r1, r9
 800938e:	f7f6 ff7d 	bl	800028c <__adddf3>
 8009392:	2400      	movs	r4, #0
 8009394:	a37c      	add	r3, pc, #496	@ (adr r3, 8009588 <__ieee754_pow+0xa28>)
 8009396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939a:	4620      	mov	r0, r4
 800939c:	460d      	mov	r5, r1
 800939e:	f7f7 f92b 	bl	80005f8 <__aeabi_dmul>
 80093a2:	4642      	mov	r2, r8
 80093a4:	e9cd 0100 	strd	r0, r1, [sp]
 80093a8:	464b      	mov	r3, r9
 80093aa:	4620      	mov	r0, r4
 80093ac:	4629      	mov	r1, r5
 80093ae:	f7f6 ff6b 	bl	8000288 <__aeabi_dsub>
 80093b2:	4602      	mov	r2, r0
 80093b4:	460b      	mov	r3, r1
 80093b6:	4630      	mov	r0, r6
 80093b8:	4639      	mov	r1, r7
 80093ba:	f7f6 ff65 	bl	8000288 <__aeabi_dsub>
 80093be:	a374      	add	r3, pc, #464	@ (adr r3, 8009590 <__ieee754_pow+0xa30>)
 80093c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c4:	f7f7 f918 	bl	80005f8 <__aeabi_dmul>
 80093c8:	a373      	add	r3, pc, #460	@ (adr r3, 8009598 <__ieee754_pow+0xa38>)
 80093ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ce:	4680      	mov	r8, r0
 80093d0:	4689      	mov	r9, r1
 80093d2:	4620      	mov	r0, r4
 80093d4:	4629      	mov	r1, r5
 80093d6:	f7f7 f90f 	bl	80005f8 <__aeabi_dmul>
 80093da:	4602      	mov	r2, r0
 80093dc:	460b      	mov	r3, r1
 80093de:	4640      	mov	r0, r8
 80093e0:	4649      	mov	r1, r9
 80093e2:	f7f6 ff53 	bl	800028c <__adddf3>
 80093e6:	4604      	mov	r4, r0
 80093e8:	460d      	mov	r5, r1
 80093ea:	4602      	mov	r2, r0
 80093ec:	460b      	mov	r3, r1
 80093ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093f2:	f7f6 ff4b 	bl	800028c <__adddf3>
 80093f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093fa:	4680      	mov	r8, r0
 80093fc:	4689      	mov	r9, r1
 80093fe:	f7f6 ff43 	bl	8000288 <__aeabi_dsub>
 8009402:	4602      	mov	r2, r0
 8009404:	460b      	mov	r3, r1
 8009406:	4620      	mov	r0, r4
 8009408:	4629      	mov	r1, r5
 800940a:	f7f6 ff3d 	bl	8000288 <__aeabi_dsub>
 800940e:	4642      	mov	r2, r8
 8009410:	4606      	mov	r6, r0
 8009412:	460f      	mov	r7, r1
 8009414:	464b      	mov	r3, r9
 8009416:	4640      	mov	r0, r8
 8009418:	4649      	mov	r1, r9
 800941a:	f7f7 f8ed 	bl	80005f8 <__aeabi_dmul>
 800941e:	a360      	add	r3, pc, #384	@ (adr r3, 80095a0 <__ieee754_pow+0xa40>)
 8009420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009424:	4604      	mov	r4, r0
 8009426:	460d      	mov	r5, r1
 8009428:	f7f7 f8e6 	bl	80005f8 <__aeabi_dmul>
 800942c:	a35e      	add	r3, pc, #376	@ (adr r3, 80095a8 <__ieee754_pow+0xa48>)
 800942e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009432:	f7f6 ff29 	bl	8000288 <__aeabi_dsub>
 8009436:	4622      	mov	r2, r4
 8009438:	462b      	mov	r3, r5
 800943a:	f7f7 f8dd 	bl	80005f8 <__aeabi_dmul>
 800943e:	a35c      	add	r3, pc, #368	@ (adr r3, 80095b0 <__ieee754_pow+0xa50>)
 8009440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009444:	f7f6 ff22 	bl	800028c <__adddf3>
 8009448:	4622      	mov	r2, r4
 800944a:	462b      	mov	r3, r5
 800944c:	f7f7 f8d4 	bl	80005f8 <__aeabi_dmul>
 8009450:	a359      	add	r3, pc, #356	@ (adr r3, 80095b8 <__ieee754_pow+0xa58>)
 8009452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009456:	f7f6 ff17 	bl	8000288 <__aeabi_dsub>
 800945a:	4622      	mov	r2, r4
 800945c:	462b      	mov	r3, r5
 800945e:	f7f7 f8cb 	bl	80005f8 <__aeabi_dmul>
 8009462:	a357      	add	r3, pc, #348	@ (adr r3, 80095c0 <__ieee754_pow+0xa60>)
 8009464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009468:	f7f6 ff10 	bl	800028c <__adddf3>
 800946c:	4622      	mov	r2, r4
 800946e:	462b      	mov	r3, r5
 8009470:	f7f7 f8c2 	bl	80005f8 <__aeabi_dmul>
 8009474:	4602      	mov	r2, r0
 8009476:	460b      	mov	r3, r1
 8009478:	4640      	mov	r0, r8
 800947a:	4649      	mov	r1, r9
 800947c:	f7f6 ff04 	bl	8000288 <__aeabi_dsub>
 8009480:	4604      	mov	r4, r0
 8009482:	460d      	mov	r5, r1
 8009484:	4602      	mov	r2, r0
 8009486:	460b      	mov	r3, r1
 8009488:	4640      	mov	r0, r8
 800948a:	4649      	mov	r1, r9
 800948c:	f7f7 f8b4 	bl	80005f8 <__aeabi_dmul>
 8009490:	2200      	movs	r2, #0
 8009492:	e9cd 0100 	strd	r0, r1, [sp]
 8009496:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800949a:	4620      	mov	r0, r4
 800949c:	4629      	mov	r1, r5
 800949e:	f7f6 fef3 	bl	8000288 <__aeabi_dsub>
 80094a2:	4602      	mov	r2, r0
 80094a4:	460b      	mov	r3, r1
 80094a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094aa:	f7f7 f9cf 	bl	800084c <__aeabi_ddiv>
 80094ae:	4632      	mov	r2, r6
 80094b0:	4604      	mov	r4, r0
 80094b2:	460d      	mov	r5, r1
 80094b4:	463b      	mov	r3, r7
 80094b6:	4640      	mov	r0, r8
 80094b8:	4649      	mov	r1, r9
 80094ba:	f7f7 f89d 	bl	80005f8 <__aeabi_dmul>
 80094be:	4632      	mov	r2, r6
 80094c0:	463b      	mov	r3, r7
 80094c2:	f7f6 fee3 	bl	800028c <__adddf3>
 80094c6:	4602      	mov	r2, r0
 80094c8:	460b      	mov	r3, r1
 80094ca:	4620      	mov	r0, r4
 80094cc:	4629      	mov	r1, r5
 80094ce:	f7f6 fedb 	bl	8000288 <__aeabi_dsub>
 80094d2:	4642      	mov	r2, r8
 80094d4:	464b      	mov	r3, r9
 80094d6:	f7f6 fed7 	bl	8000288 <__aeabi_dsub>
 80094da:	460b      	mov	r3, r1
 80094dc:	4602      	mov	r2, r0
 80094de:	493b      	ldr	r1, [pc, #236]	@ (80095cc <__ieee754_pow+0xa6c>)
 80094e0:	2000      	movs	r0, #0
 80094e2:	f7f6 fed1 	bl	8000288 <__aeabi_dsub>
 80094e6:	ec41 0b10 	vmov	d0, r0, r1
 80094ea:	ee10 3a90 	vmov	r3, s1
 80094ee:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80094f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094f6:	da30      	bge.n	800955a <__ieee754_pow+0x9fa>
 80094f8:	4650      	mov	r0, sl
 80094fa:	f000 f87d 	bl	80095f8 <scalbn>
 80094fe:	ec51 0b10 	vmov	r0, r1, d0
 8009502:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009506:	f7ff bbd2 	b.w	8008cae <__ieee754_pow+0x14e>
 800950a:	4c31      	ldr	r4, [pc, #196]	@ (80095d0 <__ieee754_pow+0xa70>)
 800950c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009510:	42a3      	cmp	r3, r4
 8009512:	d91a      	bls.n	800954a <__ieee754_pow+0x9ea>
 8009514:	4b2f      	ldr	r3, [pc, #188]	@ (80095d4 <__ieee754_pow+0xa74>)
 8009516:	440b      	add	r3, r1
 8009518:	4303      	orrs	r3, r0
 800951a:	d009      	beq.n	8009530 <__ieee754_pow+0x9d0>
 800951c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009520:	2200      	movs	r2, #0
 8009522:	2300      	movs	r3, #0
 8009524:	f7f7 fada 	bl	8000adc <__aeabi_dcmplt>
 8009528:	3800      	subs	r0, #0
 800952a:	bf18      	it	ne
 800952c:	2001      	movne	r0, #1
 800952e:	e42b      	b.n	8008d88 <__ieee754_pow+0x228>
 8009530:	4642      	mov	r2, r8
 8009532:	464b      	mov	r3, r9
 8009534:	f7f6 fea8 	bl	8000288 <__aeabi_dsub>
 8009538:	4632      	mov	r2, r6
 800953a:	463b      	mov	r3, r7
 800953c:	f7f7 fae2 	bl	8000b04 <__aeabi_dcmpge>
 8009540:	2800      	cmp	r0, #0
 8009542:	d1eb      	bne.n	800951c <__ieee754_pow+0x9bc>
 8009544:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80095e4 <__ieee754_pow+0xa84>
 8009548:	e6f7      	b.n	800933a <__ieee754_pow+0x7da>
 800954a:	469a      	mov	sl, r3
 800954c:	4b22      	ldr	r3, [pc, #136]	@ (80095d8 <__ieee754_pow+0xa78>)
 800954e:	459a      	cmp	sl, r3
 8009550:	f63f aef3 	bhi.w	800933a <__ieee754_pow+0x7da>
 8009554:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009558:	e715      	b.n	8009386 <__ieee754_pow+0x826>
 800955a:	ec51 0b10 	vmov	r0, r1, d0
 800955e:	4619      	mov	r1, r3
 8009560:	e7cf      	b.n	8009502 <__ieee754_pow+0x9a2>
 8009562:	491a      	ldr	r1, [pc, #104]	@ (80095cc <__ieee754_pow+0xa6c>)
 8009564:	2000      	movs	r0, #0
 8009566:	f7ff bb18 	b.w	8008b9a <__ieee754_pow+0x3a>
 800956a:	2000      	movs	r0, #0
 800956c:	2100      	movs	r1, #0
 800956e:	f7ff bb14 	b.w	8008b9a <__ieee754_pow+0x3a>
 8009572:	4630      	mov	r0, r6
 8009574:	4639      	mov	r1, r7
 8009576:	f7ff bb10 	b.w	8008b9a <__ieee754_pow+0x3a>
 800957a:	460c      	mov	r4, r1
 800957c:	f7ff bb5e 	b.w	8008c3c <__ieee754_pow+0xdc>
 8009580:	2400      	movs	r4, #0
 8009582:	f7ff bb49 	b.w	8008c18 <__ieee754_pow+0xb8>
 8009586:	bf00      	nop
 8009588:	00000000 	.word	0x00000000
 800958c:	3fe62e43 	.word	0x3fe62e43
 8009590:	fefa39ef 	.word	0xfefa39ef
 8009594:	3fe62e42 	.word	0x3fe62e42
 8009598:	0ca86c39 	.word	0x0ca86c39
 800959c:	be205c61 	.word	0xbe205c61
 80095a0:	72bea4d0 	.word	0x72bea4d0
 80095a4:	3e663769 	.word	0x3e663769
 80095a8:	c5d26bf1 	.word	0xc5d26bf1
 80095ac:	3ebbbd41 	.word	0x3ebbbd41
 80095b0:	af25de2c 	.word	0xaf25de2c
 80095b4:	3f11566a 	.word	0x3f11566a
 80095b8:	16bebd93 	.word	0x16bebd93
 80095bc:	3f66c16c 	.word	0x3f66c16c
 80095c0:	5555553e 	.word	0x5555553e
 80095c4:	3fc55555 	.word	0x3fc55555
 80095c8:	fff00000 	.word	0xfff00000
 80095cc:	3ff00000 	.word	0x3ff00000
 80095d0:	4090cbff 	.word	0x4090cbff
 80095d4:	3f6f3400 	.word	0x3f6f3400
 80095d8:	3fe00000 	.word	0x3fe00000
 80095dc:	652b82fe 	.word	0x652b82fe
 80095e0:	3c971547 	.word	0x3c971547
 80095e4:	4090cc00 	.word	0x4090cc00

080095e8 <fabs>:
 80095e8:	ec51 0b10 	vmov	r0, r1, d0
 80095ec:	4602      	mov	r2, r0
 80095ee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80095f2:	ec43 2b10 	vmov	d0, r2, r3
 80095f6:	4770      	bx	lr

080095f8 <scalbn>:
 80095f8:	b570      	push	{r4, r5, r6, lr}
 80095fa:	ec55 4b10 	vmov	r4, r5, d0
 80095fe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009602:	4606      	mov	r6, r0
 8009604:	462b      	mov	r3, r5
 8009606:	b991      	cbnz	r1, 800962e <scalbn+0x36>
 8009608:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800960c:	4323      	orrs	r3, r4
 800960e:	d03d      	beq.n	800968c <scalbn+0x94>
 8009610:	4b35      	ldr	r3, [pc, #212]	@ (80096e8 <scalbn+0xf0>)
 8009612:	4620      	mov	r0, r4
 8009614:	4629      	mov	r1, r5
 8009616:	2200      	movs	r2, #0
 8009618:	f7f6 ffee 	bl	80005f8 <__aeabi_dmul>
 800961c:	4b33      	ldr	r3, [pc, #204]	@ (80096ec <scalbn+0xf4>)
 800961e:	429e      	cmp	r6, r3
 8009620:	4604      	mov	r4, r0
 8009622:	460d      	mov	r5, r1
 8009624:	da0f      	bge.n	8009646 <scalbn+0x4e>
 8009626:	a328      	add	r3, pc, #160	@ (adr r3, 80096c8 <scalbn+0xd0>)
 8009628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962c:	e01e      	b.n	800966c <scalbn+0x74>
 800962e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8009632:	4291      	cmp	r1, r2
 8009634:	d10b      	bne.n	800964e <scalbn+0x56>
 8009636:	4622      	mov	r2, r4
 8009638:	4620      	mov	r0, r4
 800963a:	4629      	mov	r1, r5
 800963c:	f7f6 fe26 	bl	800028c <__adddf3>
 8009640:	4604      	mov	r4, r0
 8009642:	460d      	mov	r5, r1
 8009644:	e022      	b.n	800968c <scalbn+0x94>
 8009646:	460b      	mov	r3, r1
 8009648:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800964c:	3936      	subs	r1, #54	@ 0x36
 800964e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8009652:	4296      	cmp	r6, r2
 8009654:	dd0d      	ble.n	8009672 <scalbn+0x7a>
 8009656:	2d00      	cmp	r5, #0
 8009658:	a11d      	add	r1, pc, #116	@ (adr r1, 80096d0 <scalbn+0xd8>)
 800965a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800965e:	da02      	bge.n	8009666 <scalbn+0x6e>
 8009660:	a11d      	add	r1, pc, #116	@ (adr r1, 80096d8 <scalbn+0xe0>)
 8009662:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009666:	a31a      	add	r3, pc, #104	@ (adr r3, 80096d0 <scalbn+0xd8>)
 8009668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966c:	f7f6 ffc4 	bl	80005f8 <__aeabi_dmul>
 8009670:	e7e6      	b.n	8009640 <scalbn+0x48>
 8009672:	1872      	adds	r2, r6, r1
 8009674:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009678:	428a      	cmp	r2, r1
 800967a:	dcec      	bgt.n	8009656 <scalbn+0x5e>
 800967c:	2a00      	cmp	r2, #0
 800967e:	dd08      	ble.n	8009692 <scalbn+0x9a>
 8009680:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009684:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009688:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800968c:	ec45 4b10 	vmov	d0, r4, r5
 8009690:	bd70      	pop	{r4, r5, r6, pc}
 8009692:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8009696:	da08      	bge.n	80096aa <scalbn+0xb2>
 8009698:	2d00      	cmp	r5, #0
 800969a:	a10b      	add	r1, pc, #44	@ (adr r1, 80096c8 <scalbn+0xd0>)
 800969c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096a0:	dac1      	bge.n	8009626 <scalbn+0x2e>
 80096a2:	a10f      	add	r1, pc, #60	@ (adr r1, 80096e0 <scalbn+0xe8>)
 80096a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096a8:	e7bd      	b.n	8009626 <scalbn+0x2e>
 80096aa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80096ae:	3236      	adds	r2, #54	@ 0x36
 80096b0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80096b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80096b8:	4620      	mov	r0, r4
 80096ba:	4b0d      	ldr	r3, [pc, #52]	@ (80096f0 <scalbn+0xf8>)
 80096bc:	4629      	mov	r1, r5
 80096be:	2200      	movs	r2, #0
 80096c0:	e7d4      	b.n	800966c <scalbn+0x74>
 80096c2:	bf00      	nop
 80096c4:	f3af 8000 	nop.w
 80096c8:	c2f8f359 	.word	0xc2f8f359
 80096cc:	01a56e1f 	.word	0x01a56e1f
 80096d0:	8800759c 	.word	0x8800759c
 80096d4:	7e37e43c 	.word	0x7e37e43c
 80096d8:	8800759c 	.word	0x8800759c
 80096dc:	fe37e43c 	.word	0xfe37e43c
 80096e0:	c2f8f359 	.word	0xc2f8f359
 80096e4:	81a56e1f 	.word	0x81a56e1f
 80096e8:	43500000 	.word	0x43500000
 80096ec:	ffff3cb0 	.word	0xffff3cb0
 80096f0:	3c900000 	.word	0x3c900000

080096f4 <with_errno>:
 80096f4:	b510      	push	{r4, lr}
 80096f6:	ed2d 8b02 	vpush	{d8}
 80096fa:	eeb0 8a40 	vmov.f32	s16, s0
 80096fe:	eef0 8a60 	vmov.f32	s17, s1
 8009702:	4604      	mov	r4, r0
 8009704:	f7fd f826 	bl	8006754 <__errno>
 8009708:	eeb0 0a48 	vmov.f32	s0, s16
 800970c:	eef0 0a68 	vmov.f32	s1, s17
 8009710:	ecbd 8b02 	vpop	{d8}
 8009714:	6004      	str	r4, [r0, #0]
 8009716:	bd10      	pop	{r4, pc}

08009718 <xflow>:
 8009718:	4603      	mov	r3, r0
 800971a:	b507      	push	{r0, r1, r2, lr}
 800971c:	ec51 0b10 	vmov	r0, r1, d0
 8009720:	b183      	cbz	r3, 8009744 <xflow+0x2c>
 8009722:	4602      	mov	r2, r0
 8009724:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009728:	e9cd 2300 	strd	r2, r3, [sp]
 800972c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009730:	f7f6 ff62 	bl	80005f8 <__aeabi_dmul>
 8009734:	ec41 0b10 	vmov	d0, r0, r1
 8009738:	2022      	movs	r0, #34	@ 0x22
 800973a:	b003      	add	sp, #12
 800973c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009740:	f7ff bfd8 	b.w	80096f4 <with_errno>
 8009744:	4602      	mov	r2, r0
 8009746:	460b      	mov	r3, r1
 8009748:	e7ee      	b.n	8009728 <xflow+0x10>
 800974a:	0000      	movs	r0, r0
 800974c:	0000      	movs	r0, r0
	...

08009750 <__math_uflow>:
 8009750:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009758 <__math_uflow+0x8>
 8009754:	f7ff bfe0 	b.w	8009718 <xflow>
 8009758:	00000000 	.word	0x00000000
 800975c:	10000000 	.word	0x10000000

08009760 <__math_oflow>:
 8009760:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009768 <__math_oflow+0x8>
 8009764:	f7ff bfd8 	b.w	8009718 <xflow>
 8009768:	00000000 	.word	0x00000000
 800976c:	70000000 	.word	0x70000000

08009770 <__ieee754_sqrt>:
 8009770:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009774:	4a68      	ldr	r2, [pc, #416]	@ (8009918 <__ieee754_sqrt+0x1a8>)
 8009776:	ec55 4b10 	vmov	r4, r5, d0
 800977a:	43aa      	bics	r2, r5
 800977c:	462b      	mov	r3, r5
 800977e:	4621      	mov	r1, r4
 8009780:	d110      	bne.n	80097a4 <__ieee754_sqrt+0x34>
 8009782:	4622      	mov	r2, r4
 8009784:	4620      	mov	r0, r4
 8009786:	4629      	mov	r1, r5
 8009788:	f7f6 ff36 	bl	80005f8 <__aeabi_dmul>
 800978c:	4602      	mov	r2, r0
 800978e:	460b      	mov	r3, r1
 8009790:	4620      	mov	r0, r4
 8009792:	4629      	mov	r1, r5
 8009794:	f7f6 fd7a 	bl	800028c <__adddf3>
 8009798:	4604      	mov	r4, r0
 800979a:	460d      	mov	r5, r1
 800979c:	ec45 4b10 	vmov	d0, r4, r5
 80097a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a4:	2d00      	cmp	r5, #0
 80097a6:	dc0e      	bgt.n	80097c6 <__ieee754_sqrt+0x56>
 80097a8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80097ac:	4322      	orrs	r2, r4
 80097ae:	d0f5      	beq.n	800979c <__ieee754_sqrt+0x2c>
 80097b0:	b19d      	cbz	r5, 80097da <__ieee754_sqrt+0x6a>
 80097b2:	4622      	mov	r2, r4
 80097b4:	4620      	mov	r0, r4
 80097b6:	4629      	mov	r1, r5
 80097b8:	f7f6 fd66 	bl	8000288 <__aeabi_dsub>
 80097bc:	4602      	mov	r2, r0
 80097be:	460b      	mov	r3, r1
 80097c0:	f7f7 f844 	bl	800084c <__aeabi_ddiv>
 80097c4:	e7e8      	b.n	8009798 <__ieee754_sqrt+0x28>
 80097c6:	152a      	asrs	r2, r5, #20
 80097c8:	d115      	bne.n	80097f6 <__ieee754_sqrt+0x86>
 80097ca:	2000      	movs	r0, #0
 80097cc:	e009      	b.n	80097e2 <__ieee754_sqrt+0x72>
 80097ce:	0acb      	lsrs	r3, r1, #11
 80097d0:	3a15      	subs	r2, #21
 80097d2:	0549      	lsls	r1, r1, #21
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d0fa      	beq.n	80097ce <__ieee754_sqrt+0x5e>
 80097d8:	e7f7      	b.n	80097ca <__ieee754_sqrt+0x5a>
 80097da:	462a      	mov	r2, r5
 80097dc:	e7fa      	b.n	80097d4 <__ieee754_sqrt+0x64>
 80097de:	005b      	lsls	r3, r3, #1
 80097e0:	3001      	adds	r0, #1
 80097e2:	02dc      	lsls	r4, r3, #11
 80097e4:	d5fb      	bpl.n	80097de <__ieee754_sqrt+0x6e>
 80097e6:	1e44      	subs	r4, r0, #1
 80097e8:	1b12      	subs	r2, r2, r4
 80097ea:	f1c0 0420 	rsb	r4, r0, #32
 80097ee:	fa21 f404 	lsr.w	r4, r1, r4
 80097f2:	4323      	orrs	r3, r4
 80097f4:	4081      	lsls	r1, r0
 80097f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097fa:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80097fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009802:	07d2      	lsls	r2, r2, #31
 8009804:	bf5c      	itt	pl
 8009806:	005b      	lslpl	r3, r3, #1
 8009808:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800980c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009810:	bf58      	it	pl
 8009812:	0049      	lslpl	r1, r1, #1
 8009814:	2600      	movs	r6, #0
 8009816:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800981a:	106d      	asrs	r5, r5, #1
 800981c:	0049      	lsls	r1, r1, #1
 800981e:	2016      	movs	r0, #22
 8009820:	4632      	mov	r2, r6
 8009822:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8009826:	1917      	adds	r7, r2, r4
 8009828:	429f      	cmp	r7, r3
 800982a:	bfde      	ittt	le
 800982c:	193a      	addle	r2, r7, r4
 800982e:	1bdb      	suble	r3, r3, r7
 8009830:	1936      	addle	r6, r6, r4
 8009832:	0fcf      	lsrs	r7, r1, #31
 8009834:	3801      	subs	r0, #1
 8009836:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800983a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800983e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009842:	d1f0      	bne.n	8009826 <__ieee754_sqrt+0xb6>
 8009844:	4604      	mov	r4, r0
 8009846:	2720      	movs	r7, #32
 8009848:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800984c:	429a      	cmp	r2, r3
 800984e:	eb00 0e0c 	add.w	lr, r0, ip
 8009852:	db02      	blt.n	800985a <__ieee754_sqrt+0xea>
 8009854:	d113      	bne.n	800987e <__ieee754_sqrt+0x10e>
 8009856:	458e      	cmp	lr, r1
 8009858:	d811      	bhi.n	800987e <__ieee754_sqrt+0x10e>
 800985a:	f1be 0f00 	cmp.w	lr, #0
 800985e:	eb0e 000c 	add.w	r0, lr, ip
 8009862:	da42      	bge.n	80098ea <__ieee754_sqrt+0x17a>
 8009864:	2800      	cmp	r0, #0
 8009866:	db40      	blt.n	80098ea <__ieee754_sqrt+0x17a>
 8009868:	f102 0801 	add.w	r8, r2, #1
 800986c:	1a9b      	subs	r3, r3, r2
 800986e:	458e      	cmp	lr, r1
 8009870:	bf88      	it	hi
 8009872:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009876:	eba1 010e 	sub.w	r1, r1, lr
 800987a:	4464      	add	r4, ip
 800987c:	4642      	mov	r2, r8
 800987e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8009882:	3f01      	subs	r7, #1
 8009884:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009888:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800988c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009890:	d1dc      	bne.n	800984c <__ieee754_sqrt+0xdc>
 8009892:	4319      	orrs	r1, r3
 8009894:	d01b      	beq.n	80098ce <__ieee754_sqrt+0x15e>
 8009896:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800991c <__ieee754_sqrt+0x1ac>
 800989a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009920 <__ieee754_sqrt+0x1b0>
 800989e:	e9da 0100 	ldrd	r0, r1, [sl]
 80098a2:	e9db 2300 	ldrd	r2, r3, [fp]
 80098a6:	f7f6 fcef 	bl	8000288 <__aeabi_dsub>
 80098aa:	e9da 8900 	ldrd	r8, r9, [sl]
 80098ae:	4602      	mov	r2, r0
 80098b0:	460b      	mov	r3, r1
 80098b2:	4640      	mov	r0, r8
 80098b4:	4649      	mov	r1, r9
 80098b6:	f7f7 f91b 	bl	8000af0 <__aeabi_dcmple>
 80098ba:	b140      	cbz	r0, 80098ce <__ieee754_sqrt+0x15e>
 80098bc:	f1b4 3fff 	cmp.w	r4, #4294967295
 80098c0:	e9da 0100 	ldrd	r0, r1, [sl]
 80098c4:	e9db 2300 	ldrd	r2, r3, [fp]
 80098c8:	d111      	bne.n	80098ee <__ieee754_sqrt+0x17e>
 80098ca:	3601      	adds	r6, #1
 80098cc:	463c      	mov	r4, r7
 80098ce:	1072      	asrs	r2, r6, #1
 80098d0:	0863      	lsrs	r3, r4, #1
 80098d2:	07f1      	lsls	r1, r6, #31
 80098d4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80098d8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80098dc:	bf48      	it	mi
 80098de:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80098e2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80098e6:	4618      	mov	r0, r3
 80098e8:	e756      	b.n	8009798 <__ieee754_sqrt+0x28>
 80098ea:	4690      	mov	r8, r2
 80098ec:	e7be      	b.n	800986c <__ieee754_sqrt+0xfc>
 80098ee:	f7f6 fccd 	bl	800028c <__adddf3>
 80098f2:	e9da 8900 	ldrd	r8, r9, [sl]
 80098f6:	4602      	mov	r2, r0
 80098f8:	460b      	mov	r3, r1
 80098fa:	4640      	mov	r0, r8
 80098fc:	4649      	mov	r1, r9
 80098fe:	f7f7 f8ed 	bl	8000adc <__aeabi_dcmplt>
 8009902:	b120      	cbz	r0, 800990e <__ieee754_sqrt+0x19e>
 8009904:	1ca0      	adds	r0, r4, #2
 8009906:	bf08      	it	eq
 8009908:	3601      	addeq	r6, #1
 800990a:	3402      	adds	r4, #2
 800990c:	e7df      	b.n	80098ce <__ieee754_sqrt+0x15e>
 800990e:	1c63      	adds	r3, r4, #1
 8009910:	f023 0401 	bic.w	r4, r3, #1
 8009914:	e7db      	b.n	80098ce <__ieee754_sqrt+0x15e>
 8009916:	bf00      	nop
 8009918:	7ff00000 	.word	0x7ff00000
 800991c:	200001e0 	.word	0x200001e0
 8009920:	200001d8 	.word	0x200001d8
 8009924:	00000000 	.word	0x00000000

08009928 <__ieee754_log>:
 8009928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800992c:	ec51 0b10 	vmov	r0, r1, d0
 8009930:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8009934:	b087      	sub	sp, #28
 8009936:	460d      	mov	r5, r1
 8009938:	da26      	bge.n	8009988 <__ieee754_log+0x60>
 800993a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800993e:	4303      	orrs	r3, r0
 8009940:	4602      	mov	r2, r0
 8009942:	d10a      	bne.n	800995a <__ieee754_log+0x32>
 8009944:	49ce      	ldr	r1, [pc, #824]	@ (8009c80 <__ieee754_log+0x358>)
 8009946:	2200      	movs	r2, #0
 8009948:	2300      	movs	r3, #0
 800994a:	2000      	movs	r0, #0
 800994c:	f7f6 ff7e 	bl	800084c <__aeabi_ddiv>
 8009950:	ec41 0b10 	vmov	d0, r0, r1
 8009954:	b007      	add	sp, #28
 8009956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800995a:	2900      	cmp	r1, #0
 800995c:	da05      	bge.n	800996a <__ieee754_log+0x42>
 800995e:	460b      	mov	r3, r1
 8009960:	f7f6 fc92 	bl	8000288 <__aeabi_dsub>
 8009964:	2200      	movs	r2, #0
 8009966:	2300      	movs	r3, #0
 8009968:	e7f0      	b.n	800994c <__ieee754_log+0x24>
 800996a:	4bc6      	ldr	r3, [pc, #792]	@ (8009c84 <__ieee754_log+0x35c>)
 800996c:	2200      	movs	r2, #0
 800996e:	f7f6 fe43 	bl	80005f8 <__aeabi_dmul>
 8009972:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 8009976:	460d      	mov	r5, r1
 8009978:	4ac3      	ldr	r2, [pc, #780]	@ (8009c88 <__ieee754_log+0x360>)
 800997a:	4295      	cmp	r5, r2
 800997c:	dd06      	ble.n	800998c <__ieee754_log+0x64>
 800997e:	4602      	mov	r2, r0
 8009980:	460b      	mov	r3, r1
 8009982:	f7f6 fc83 	bl	800028c <__adddf3>
 8009986:	e7e3      	b.n	8009950 <__ieee754_log+0x28>
 8009988:	2300      	movs	r3, #0
 800998a:	e7f5      	b.n	8009978 <__ieee754_log+0x50>
 800998c:	152c      	asrs	r4, r5, #20
 800998e:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8009992:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8009996:	441c      	add	r4, r3
 8009998:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800999c:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 80099a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80099a4:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 80099a8:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 80099ac:	ea42 0105 	orr.w	r1, r2, r5
 80099b0:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80099b4:	2200      	movs	r2, #0
 80099b6:	4bb5      	ldr	r3, [pc, #724]	@ (8009c8c <__ieee754_log+0x364>)
 80099b8:	f7f6 fc66 	bl	8000288 <__aeabi_dsub>
 80099bc:	1cab      	adds	r3, r5, #2
 80099be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099c2:	2b02      	cmp	r3, #2
 80099c4:	4682      	mov	sl, r0
 80099c6:	468b      	mov	fp, r1
 80099c8:	f04f 0200 	mov.w	r2, #0
 80099cc:	dc53      	bgt.n	8009a76 <__ieee754_log+0x14e>
 80099ce:	2300      	movs	r3, #0
 80099d0:	f7f7 f87a 	bl	8000ac8 <__aeabi_dcmpeq>
 80099d4:	b1d0      	cbz	r0, 8009a0c <__ieee754_log+0xe4>
 80099d6:	2c00      	cmp	r4, #0
 80099d8:	f000 8120 	beq.w	8009c1c <__ieee754_log+0x2f4>
 80099dc:	4620      	mov	r0, r4
 80099de:	f7f6 fda1 	bl	8000524 <__aeabi_i2d>
 80099e2:	a391      	add	r3, pc, #580	@ (adr r3, 8009c28 <__ieee754_log+0x300>)
 80099e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e8:	4606      	mov	r6, r0
 80099ea:	460f      	mov	r7, r1
 80099ec:	f7f6 fe04 	bl	80005f8 <__aeabi_dmul>
 80099f0:	a38f      	add	r3, pc, #572	@ (adr r3, 8009c30 <__ieee754_log+0x308>)
 80099f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f6:	4604      	mov	r4, r0
 80099f8:	460d      	mov	r5, r1
 80099fa:	4630      	mov	r0, r6
 80099fc:	4639      	mov	r1, r7
 80099fe:	f7f6 fdfb 	bl	80005f8 <__aeabi_dmul>
 8009a02:	4602      	mov	r2, r0
 8009a04:	460b      	mov	r3, r1
 8009a06:	4620      	mov	r0, r4
 8009a08:	4629      	mov	r1, r5
 8009a0a:	e7ba      	b.n	8009982 <__ieee754_log+0x5a>
 8009a0c:	a38a      	add	r3, pc, #552	@ (adr r3, 8009c38 <__ieee754_log+0x310>)
 8009a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a12:	4650      	mov	r0, sl
 8009a14:	4659      	mov	r1, fp
 8009a16:	f7f6 fdef 	bl	80005f8 <__aeabi_dmul>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	2000      	movs	r0, #0
 8009a20:	499b      	ldr	r1, [pc, #620]	@ (8009c90 <__ieee754_log+0x368>)
 8009a22:	f7f6 fc31 	bl	8000288 <__aeabi_dsub>
 8009a26:	4652      	mov	r2, sl
 8009a28:	4606      	mov	r6, r0
 8009a2a:	460f      	mov	r7, r1
 8009a2c:	465b      	mov	r3, fp
 8009a2e:	4650      	mov	r0, sl
 8009a30:	4659      	mov	r1, fp
 8009a32:	f7f6 fde1 	bl	80005f8 <__aeabi_dmul>
 8009a36:	4602      	mov	r2, r0
 8009a38:	460b      	mov	r3, r1
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	4639      	mov	r1, r7
 8009a3e:	f7f6 fddb 	bl	80005f8 <__aeabi_dmul>
 8009a42:	4606      	mov	r6, r0
 8009a44:	460f      	mov	r7, r1
 8009a46:	b914      	cbnz	r4, 8009a4e <__ieee754_log+0x126>
 8009a48:	4632      	mov	r2, r6
 8009a4a:	463b      	mov	r3, r7
 8009a4c:	e0a0      	b.n	8009b90 <__ieee754_log+0x268>
 8009a4e:	4620      	mov	r0, r4
 8009a50:	f7f6 fd68 	bl	8000524 <__aeabi_i2d>
 8009a54:	a374      	add	r3, pc, #464	@ (adr r3, 8009c28 <__ieee754_log+0x300>)
 8009a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5a:	4680      	mov	r8, r0
 8009a5c:	4689      	mov	r9, r1
 8009a5e:	f7f6 fdcb 	bl	80005f8 <__aeabi_dmul>
 8009a62:	a373      	add	r3, pc, #460	@ (adr r3, 8009c30 <__ieee754_log+0x308>)
 8009a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a68:	4604      	mov	r4, r0
 8009a6a:	460d      	mov	r5, r1
 8009a6c:	4640      	mov	r0, r8
 8009a6e:	4649      	mov	r1, r9
 8009a70:	f7f6 fdc2 	bl	80005f8 <__aeabi_dmul>
 8009a74:	e0a5      	b.n	8009bc2 <__ieee754_log+0x29a>
 8009a76:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009a7a:	f7f6 fc07 	bl	800028c <__adddf3>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	460b      	mov	r3, r1
 8009a82:	4650      	mov	r0, sl
 8009a84:	4659      	mov	r1, fp
 8009a86:	f7f6 fee1 	bl	800084c <__aeabi_ddiv>
 8009a8a:	e9cd 0100 	strd	r0, r1, [sp]
 8009a8e:	4620      	mov	r0, r4
 8009a90:	f7f6 fd48 	bl	8000524 <__aeabi_i2d>
 8009a94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a9c:	4610      	mov	r0, r2
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	f7f6 fdaa 	bl	80005f8 <__aeabi_dmul>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009aac:	f7f6 fda4 	bl	80005f8 <__aeabi_dmul>
 8009ab0:	a363      	add	r3, pc, #396	@ (adr r3, 8009c40 <__ieee754_log+0x318>)
 8009ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab6:	4680      	mov	r8, r0
 8009ab8:	4689      	mov	r9, r1
 8009aba:	f7f6 fd9d 	bl	80005f8 <__aeabi_dmul>
 8009abe:	a362      	add	r3, pc, #392	@ (adr r3, 8009c48 <__ieee754_log+0x320>)
 8009ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac4:	f7f6 fbe2 	bl	800028c <__adddf3>
 8009ac8:	4642      	mov	r2, r8
 8009aca:	464b      	mov	r3, r9
 8009acc:	f7f6 fd94 	bl	80005f8 <__aeabi_dmul>
 8009ad0:	a35f      	add	r3, pc, #380	@ (adr r3, 8009c50 <__ieee754_log+0x328>)
 8009ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad6:	f7f6 fbd9 	bl	800028c <__adddf3>
 8009ada:	4642      	mov	r2, r8
 8009adc:	464b      	mov	r3, r9
 8009ade:	f7f6 fd8b 	bl	80005f8 <__aeabi_dmul>
 8009ae2:	a35d      	add	r3, pc, #372	@ (adr r3, 8009c58 <__ieee754_log+0x330>)
 8009ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae8:	f7f6 fbd0 	bl	800028c <__adddf3>
 8009aec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009af0:	f7f6 fd82 	bl	80005f8 <__aeabi_dmul>
 8009af4:	a35a      	add	r3, pc, #360	@ (adr r3, 8009c60 <__ieee754_log+0x338>)
 8009af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009afe:	4640      	mov	r0, r8
 8009b00:	4649      	mov	r1, r9
 8009b02:	f7f6 fd79 	bl	80005f8 <__aeabi_dmul>
 8009b06:	a358      	add	r3, pc, #352	@ (adr r3, 8009c68 <__ieee754_log+0x340>)
 8009b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0c:	f7f6 fbbe 	bl	800028c <__adddf3>
 8009b10:	4642      	mov	r2, r8
 8009b12:	464b      	mov	r3, r9
 8009b14:	f7f6 fd70 	bl	80005f8 <__aeabi_dmul>
 8009b18:	a355      	add	r3, pc, #340	@ (adr r3, 8009c70 <__ieee754_log+0x348>)
 8009b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1e:	f7f6 fbb5 	bl	800028c <__adddf3>
 8009b22:	4642      	mov	r2, r8
 8009b24:	464b      	mov	r3, r9
 8009b26:	f7f6 fd67 	bl	80005f8 <__aeabi_dmul>
 8009b2a:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8009b2e:	4602      	mov	r2, r0
 8009b30:	460b      	mov	r3, r1
 8009b32:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8009b36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b3a:	f7f6 fba7 	bl	800028c <__adddf3>
 8009b3e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8009b42:	3551      	adds	r5, #81	@ 0x51
 8009b44:	4335      	orrs	r5, r6
 8009b46:	2d00      	cmp	r5, #0
 8009b48:	4680      	mov	r8, r0
 8009b4a:	4689      	mov	r9, r1
 8009b4c:	dd48      	ble.n	8009be0 <__ieee754_log+0x2b8>
 8009b4e:	4b50      	ldr	r3, [pc, #320]	@ (8009c90 <__ieee754_log+0x368>)
 8009b50:	2200      	movs	r2, #0
 8009b52:	4650      	mov	r0, sl
 8009b54:	4659      	mov	r1, fp
 8009b56:	f7f6 fd4f 	bl	80005f8 <__aeabi_dmul>
 8009b5a:	4652      	mov	r2, sl
 8009b5c:	465b      	mov	r3, fp
 8009b5e:	f7f6 fd4b 	bl	80005f8 <__aeabi_dmul>
 8009b62:	4602      	mov	r2, r0
 8009b64:	460b      	mov	r3, r1
 8009b66:	4606      	mov	r6, r0
 8009b68:	460f      	mov	r7, r1
 8009b6a:	4640      	mov	r0, r8
 8009b6c:	4649      	mov	r1, r9
 8009b6e:	f7f6 fb8d 	bl	800028c <__adddf3>
 8009b72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b76:	f7f6 fd3f 	bl	80005f8 <__aeabi_dmul>
 8009b7a:	4680      	mov	r8, r0
 8009b7c:	4689      	mov	r9, r1
 8009b7e:	b964      	cbnz	r4, 8009b9a <__ieee754_log+0x272>
 8009b80:	4602      	mov	r2, r0
 8009b82:	460b      	mov	r3, r1
 8009b84:	4630      	mov	r0, r6
 8009b86:	4639      	mov	r1, r7
 8009b88:	f7f6 fb7e 	bl	8000288 <__aeabi_dsub>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	4650      	mov	r0, sl
 8009b92:	4659      	mov	r1, fp
 8009b94:	f7f6 fb78 	bl	8000288 <__aeabi_dsub>
 8009b98:	e6da      	b.n	8009950 <__ieee754_log+0x28>
 8009b9a:	a323      	add	r3, pc, #140	@ (adr r3, 8009c28 <__ieee754_log+0x300>)
 8009b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ba4:	f7f6 fd28 	bl	80005f8 <__aeabi_dmul>
 8009ba8:	a321      	add	r3, pc, #132	@ (adr r3, 8009c30 <__ieee754_log+0x308>)
 8009baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bae:	4604      	mov	r4, r0
 8009bb0:	460d      	mov	r5, r1
 8009bb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bb6:	f7f6 fd1f 	bl	80005f8 <__aeabi_dmul>
 8009bba:	4642      	mov	r2, r8
 8009bbc:	464b      	mov	r3, r9
 8009bbe:	f7f6 fb65 	bl	800028c <__adddf3>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	4639      	mov	r1, r7
 8009bca:	f7f6 fb5d 	bl	8000288 <__aeabi_dsub>
 8009bce:	4652      	mov	r2, sl
 8009bd0:	465b      	mov	r3, fp
 8009bd2:	f7f6 fb59 	bl	8000288 <__aeabi_dsub>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	460b      	mov	r3, r1
 8009bda:	4620      	mov	r0, r4
 8009bdc:	4629      	mov	r1, r5
 8009bde:	e7d9      	b.n	8009b94 <__ieee754_log+0x26c>
 8009be0:	4602      	mov	r2, r0
 8009be2:	460b      	mov	r3, r1
 8009be4:	4650      	mov	r0, sl
 8009be6:	4659      	mov	r1, fp
 8009be8:	f7f6 fb4e 	bl	8000288 <__aeabi_dsub>
 8009bec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bf0:	f7f6 fd02 	bl	80005f8 <__aeabi_dmul>
 8009bf4:	4606      	mov	r6, r0
 8009bf6:	460f      	mov	r7, r1
 8009bf8:	2c00      	cmp	r4, #0
 8009bfa:	f43f af25 	beq.w	8009a48 <__ieee754_log+0x120>
 8009bfe:	a30a      	add	r3, pc, #40	@ (adr r3, 8009c28 <__ieee754_log+0x300>)
 8009c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c08:	f7f6 fcf6 	bl	80005f8 <__aeabi_dmul>
 8009c0c:	a308      	add	r3, pc, #32	@ (adr r3, 8009c30 <__ieee754_log+0x308>)
 8009c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c12:	4604      	mov	r4, r0
 8009c14:	460d      	mov	r5, r1
 8009c16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c1a:	e729      	b.n	8009a70 <__ieee754_log+0x148>
 8009c1c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8009c78 <__ieee754_log+0x350>
 8009c20:	e698      	b.n	8009954 <__ieee754_log+0x2c>
 8009c22:	bf00      	nop
 8009c24:	f3af 8000 	nop.w
 8009c28:	fee00000 	.word	0xfee00000
 8009c2c:	3fe62e42 	.word	0x3fe62e42
 8009c30:	35793c76 	.word	0x35793c76
 8009c34:	3dea39ef 	.word	0x3dea39ef
 8009c38:	55555555 	.word	0x55555555
 8009c3c:	3fd55555 	.word	0x3fd55555
 8009c40:	df3e5244 	.word	0xdf3e5244
 8009c44:	3fc2f112 	.word	0x3fc2f112
 8009c48:	96cb03de 	.word	0x96cb03de
 8009c4c:	3fc74664 	.word	0x3fc74664
 8009c50:	94229359 	.word	0x94229359
 8009c54:	3fd24924 	.word	0x3fd24924
 8009c58:	55555593 	.word	0x55555593
 8009c5c:	3fe55555 	.word	0x3fe55555
 8009c60:	d078c69f 	.word	0xd078c69f
 8009c64:	3fc39a09 	.word	0x3fc39a09
 8009c68:	1d8e78af 	.word	0x1d8e78af
 8009c6c:	3fcc71c5 	.word	0x3fcc71c5
 8009c70:	9997fa04 	.word	0x9997fa04
 8009c74:	3fd99999 	.word	0x3fd99999
	...
 8009c80:	c3500000 	.word	0xc3500000
 8009c84:	43500000 	.word	0x43500000
 8009c88:	7fefffff 	.word	0x7fefffff
 8009c8c:	3ff00000 	.word	0x3ff00000
 8009c90:	3fe00000 	.word	0x3fe00000

08009c94 <_init>:
 8009c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c96:	bf00      	nop
 8009c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c9a:	bc08      	pop	{r3}
 8009c9c:	469e      	mov	lr, r3
 8009c9e:	4770      	bx	lr

08009ca0 <_fini>:
 8009ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ca2:	bf00      	nop
 8009ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ca6:	bc08      	pop	{r3}
 8009ca8:	469e      	mov	lr, r3
 8009caa:	4770      	bx	lr
